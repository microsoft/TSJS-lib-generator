 [
    {
        "kind": "property",
        "interface": "Window",
        "name": "event",
        "type": "Event | undefined"
    },
    {
        "kind": "method",
        "interface": "Node",
        "name": "insertBefore",
        "signatures": ["insertBefore(newChild: Node, refChild: Node | null): Node"]
    },
    {
        "kind": "method",
        "interface": "HTMLCollection",
        "name": "item",
        "signatures": ["item(index: number): Element"]
    },
    {
        "kind": "method",
        "interface": "IDBObjectStore",
        "name": "createIndex",
        "signatures": ["createIndex(name: string, keyPath: string | string[], optionalParameters?: IDBIndexParameters): IDBIndex"]
    },
    {
    	"kind": "property",
    	"interface": "IDBIndex",
    	"name": "keyPath",
    	"type": "string | string[]"
    },
    {
        "kind": "method",
        "interface": "IDBDatabase",
        "name": "createObjectStore",
        "signatures": ["createObjectStore(name: string, optionalParameters?: IDBObjectStoreParameters): IDBObjectStore"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "texSubImage2D",
        "signatures": [
            "texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels?: ArrayBufferView): void",
            "texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, pixels?: ImageData | HTMLVideoElement | HTMLImageElement | HTMLCanvasElement): void"
        ]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "texImage2D",
        "signatures": [
            "texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels?: ArrayBufferView): void",
            "texImage2D(target: number, level: number, internalformat: number, format: number, type: number, pixels?: ImageData | HTMLVideoElement | HTMLImageElement | HTMLCanvasElement): void"
        ]
    },
    {
        "kind": "method",
        "interface": "XMLHttpRequest",
        "name": "send",
        "signatures": [
            "send(data?: string): void",
            "send(data?: any): void"
        ],
        "webOnlySignatures": [
            "send(data?: Document): void"
        ]
    },
    {
        "kind": "method",
        "interface": "HTMLCanvasElement",
        "name": "getContext",
        "signatures": [
            "getContext(contextId: \"2d\", contextAttributes?: Canvas2DContextAttributes): CanvasRenderingContext2D | null",
            "getContext(contextId: \"webgl\" | \"experimental-webgl\", contextAttributes?: WebGLContextAttributes): WebGLRenderingContext | null",
            "getContext(contextId: string, contextAttributes?: {}): CanvasRenderingContext2D | WebGLRenderingContext | null"
        ]
    },
    {
        "kind": "method",
        "name": "alert",
        "signatures": ["alert(message?: any): void"]
    },
    {
        "kind": "method",
        "interface": "Document",
        "name": "open",
        "signatures": ["open(url?: string, name?: string, features?: string, replace?: boolean): Document"]
    },
    {
        "kind": "method",
        "interface": "Document",
        "name": "getElementById",
        "signatures": ["getElementById(elementId: string): HTMLElement | null"]
    },
    {
        "kind": "method",
        "interface": "Document",
        "name": "msElementsFromRect",
        "signatures": ["msElementsFromRect(left: number, top: number, width: number, height: number): NodeListOf<Element>"]
    },
    {
        "kind": "method",
        "interface": "Document",
        "name": "msElementsFromPoint",
        "signatures": ["msElementsFromPoint(x: number, y: number): NodeListOf<Element>"]
    },
    {
        "kind": "method",
        "name": "getElementsByTagNameNS",
        "signatures": [
            "getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", localName: string): HTMLCollectionOf<HTMLElement>",
            "getElementsByTagNameNS(namespaceURI: \"http://www.w3.org/2000/svg\", localName: string): HTMLCollectionOf<SVGElement>",
            "getElementsByTagNameNS(namespaceURI: string, localName: string): HTMLCollectionOf<Element>"
        ]
    },
    {
        "kind": "method",
        "name": "getElementsByClassName",
        "signatures": ["getElementsByClassName(classNames: string): HTMLCollectionOf<Element>"]
    },
    {
        "kind": "method",
        "name": "getElementsByName",
        "signatures": [
            "getElementsByName(elementName: string): NodeListOf<HTMLElement>"
        ]
    },
    {
        "kind": "property",
        "interface": "Document",
        "name": "anchors",
        "type": "HTMLCollectionOf<HTMLAnchorElement>"
    },
    {
        "kind": "property",
        "interface": "Document",
        "name": "applets",
        "type": "HTMLCollectionOf<HTMLAppletElement>"
    },
    {
        "kind": "property",
        "interface": "Document",
        "name": "embeds",
        "type": "HTMLCollectionOf<HTMLEmbedElement>"
    },
    {
        "kind": "property",
        "interface": "Document",
        "name": "forms",
        "type": "HTMLCollectionOf<HTMLFormElement>"
    },
    {
        "kind": "property",
        "interface": "Document",
        "name": "images",
        "type": "HTMLCollectionOf<HTMLImageElement>"
    },
    {
        "kind": "property",
        "interface": "Document",
        "name": "links",
        "type": "HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>"
    },
    {
        "kind": "property",
        "interface": "Document",
        "name": "plugins",
        "type": "HTMLCollectionOf<HTMLEmbedElement>"
    },
    {
        "kind": "property",
        "interface": "Document",
        "name": "scripts",
        "type": "HTMLCollectionOf<HTMLScriptElement>"
    },
    {
        "kind": "property",
        "interface": "CanvasRenderingContext2D",
        "name": "fillStyle",
        "type": "string | CanvasGradient | CanvasPattern"
    },
    {
        "kind": "property",
        "interface": "CanvasRenderingContext2D",
        "name": "strokeStyle",
        "type": "string | CanvasGradient | CanvasPattern"
    },
    {
        "kind": "property",
        "interface": "BeforeUnloadEvent",
        "name": "returnValue",
        "type": "any"
    },
    {
        "kind": "property",
        "interface": "HTMLEmbedElement",
        "name": "hidden",
        "type": "any"
    },
    {
        "kind": "property",
        "name": "documentElement",
        "type": "HTMLElement"
    },
    {
        "kind": "property",
        "interface": "SVGStylable",
        "name": "className",
        "type": "any"
    },
    {
        "kind": "property",
        "interface": "SVGElement",
        "name": "className",
        "type": "any"
    },
    {
        "kind": "method",
        "interface": "SVGSVGElement",
        "name": "getEnclosureList",
        "signatures": ["getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>"]
    },
    {
        "kind": "method",
        "interface": "SVGSVGElement",
        "name": "getIntersectionList",
        "signatures": ["getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>"]
    },
    {
        "kind": "property",
        "interface": "Window",
        "name": "orientation",
        "type": "string | number"
    },
    {
        "kind": "method",
        "interface": "Console",
        "name": "dir",
        "signatures": ["dir(value?: any, ...optionalParams: any[]): void"]
    },
    {
        "kind": "method",
        "interface": "Console",
        "name": "dirxml",
        "signatures": ["dirxml(value: any): void"]
    },
    {
        "kind": "method",
        "interface": "Console",
        "name": "error",
        "signatures": ["error(message?: any, ...optionalParams: any[]): void"]
    },
    {
        "kind": "method",
        "interface": "Console",
        "name": "info",
        "signatures": ["info(message?: any, ...optionalParams: any[]): void"]
    },
    {
        "kind": "method",
        "interface": "Console",
        "name": "log",
        "signatures": ["log(message?: any, ...optionalParams: any[]): void"]
    },
    {
        "kind": "method",
        "interface": "Console",
        "name": "warn",
        "signatures": ["warn(message?: any, ...optionalParams: any[]): void"]
    },
    {
        "kind": "callback",
        "name": "ErrorEventHandler",
        "signatures": ["(message: string, filename?: string, lineno?: number, colno?: number, error?:Error): void"]
    },
    {
        "kind": "constructor",
        "interface": "Blob",
        "signatures": ["new (blobParts?: any[], options?: BlobPropertyBag): Blob"]
    },
    {
        "kind": "constructor",
        "interface": "FormData",
        "signatures": ["new (form?: HTMLFormElement): FormData"]
    },
    {
        "kind": "constructor",
        "interface": "MessageEvent",
        "signatures": ["new(type: string, eventInitDict?: MessageEventInit): MessageEvent"]
    },
    {
        "kind": "constructor",
        "interface": "ProgressEvent",
        "signatures": ["new(type: string, eventInitDict?: ProgressEventInit): ProgressEvent"]
    },
    {
        "kind": "constructor",
        "interface": "File",
        "signatures": ["new (parts: (ArrayBuffer | ArrayBufferView | Blob | string)[], filename: string, properties?: FilePropertyBag): File"]
    },
    {
        "kind": "constructor",
        "interface": "ImageData",
        "signatures": [
            "new(width: number, height: number): ImageData",
            "new(array: Uint8ClampedArray, width: number, height: number): ImageData"
        ]
    },
    {
        "kind": "property",
        "interface": "HTMLSelectElement",
        "name": "selectedOptions",
        "type": "HTMLCollectionOf<HTMLOptionElement>"
    },
    {
        "kind": "property",
        "interface": "HTMLDataListElement",
        "name": "options",
        "type": "HTMLCollectionOf<HTMLOptionElement>"
    },
    {
        "kind": "property",
        "interface": "ImageData",
        "name": "data",
        "type": "Uint8ClampedArray"
    },
    {
        "kind": "method",
        "interface": "HTMLTableElement",
        "name": "insertRow",
        "signatures": ["insertRow(index?: number): HTMLTableRowElement"]
    },
    {
        "kind": "method",
        "interface": "HTMLTableElement",
        "name": "createTHead",
        "signatures": ["createTHead(): HTMLTableSectionElement"]
    },
    {
        "kind": "method",
        "interface": "HTMLTableElement",
        "name": "createTBody",
        "signatures": ["createTBody(): HTMLTableSectionElement"]
    },
    {
        "kind": "method",
        "interface": "HTMLTableElement",
        "name": "createTFoot",
        "signatures": ["createTFoot(): HTMLTableSectionElement"]
    },
    {
        "kind": "method",
        "interface": "HTMLTableElement",
        "name": "createCaption",
        "signatures": ["createCaption(): HTMLTableCaptionElement"]
    },
    {
        "kind": "property",
        "interface": "HTMLTableElement",
        "name": "rows",
        "type": "HTMLCollectionOf<HTMLTableRowElement>"
    },
    {
        "kind": "property",
        "interface": "HTMLTableElement",
        "name": "tBodies",
        "type": "HTMLCollectionOf<HTMLTableSectionElement>"
    },
    {
        "kind": "method",
        "interface": "HTMLTableSectionElement",
        "name": "insertRow",
        "signatures": ["insertRow(index?: number): HTMLTableRowElement"]
    },
    {
        "kind": "property",
        "interface": "HTMLTableSectionElement",
        "name": "rows",
        "type": "HTMLCollectionOf<HTMLTableRowElement>"
    },
    {
        "kind": "method",
        "interface": "HTMLTableRowElement",
        "name": "insertCell",
        "signatures": ["insertCell(index?: number): HTMLTableDataCellElement"]
    },
    {
        "kind": "property",
        "interface": "HTMLTableRowElement",
        "name": "cells",
        "type": "HTMLCollectionOf<HTMLTableDataCellElement | HTMLTableHeaderCellElement>"
    },
    {
        "kind": "method",
        "interface": "Element",
        "name": "setAttribute",
        "signatures": ["setAttribute(name: string, value: string): void"]
    },
    {
        "kind": "property",
        "interface": "HTMLMediaElement",
        "name": "readyState",
        "type": "number"
    },
    {
        "kind": "property",
        "interface": "IDBDatabase",
        "name": "version",
        "type": "number"
    },
    {
        "kind": "method",
        "interface": "Console",
        "name": "trace",
        "signatures": ["trace(message?: any, ...optionalParams: any[]): void"]
    },
    {
        "kind": "method",
        "interface": "DataTransferItemList",
        "name": "item",
        "signatures": ["item(index: number): DataTransferItem"]
    },
    {
        "kind": "indexer",
        "interface": "DataTransferItemList",
        "signatures": ["[index: number]: DataTransferItem"]
    },
    {
        "kind": "constructor",
        "interface": "StorageEvent",
        "signatures": [
            "new (type: string, eventInitDict?: StorageEventInit): StorageEvent"
        ]
    },
    {
        "kind": "property",
        "interface": "IDBCursor",
        "name": "source",
        "type": "IDBObjectStore | IDBIndex"
    },
    {
        "kind": "method",
        "interface": "IDBDatabase",
        "name": "transaction",
        "signatures": ["transaction(storeNames: string | string[], mode?: string): IDBTransaction"]
    },
    {
        "kind": "property",
        "interface": "IDBObjectStore",
        "name": "keyPath",
        "type": "string | string[]"
    },
    {
        "kind": "property",
        "interface": "IDBRequest",
        "name": "source",
        "type": "IDBObjectStore | IDBIndex | IDBCursor"
    },
    {
        "kind": "method",
        "interface": "Window",
        "name": "open",
        "signatures": ["open(url?: string, target?: string, features?: string, replace?: boolean): Window"]
    },
    {
        "kind": "method",
        "interface": "AudioNode",
        "name": "disconnect",
        "signatures": [
             "disconnect(output?: number): void",
             "disconnect(destination: AudioNode, output?: number, input?: number): void",
             "disconnect(destination: AudioParam, output?: number): void"
        ]
    },
    {
        "kind": "callback",
        "name": "DecodeErrorCallback",
        "signatures": ["(error: DOMException): void"]
    },
    {
        "kind": "property",
        "name": "ontouchcancel",
        "type": "(ev: TouchEvent) => any"
    },
    {
        "kind": "property",
        "name": "ontouchend",
        "type": "(ev: TouchEvent) => any"
    },
    {
        "kind": "property",
        "name": "ontouchmove",
        "type": "(ev: TouchEvent) => any"
    },
    {
        "kind": "property",
        "name": "ontouchstart",
        "type": "(ev: TouchEvent) => any"
    },
    {
        "kind": "property",
        "name": "keyPath?",
        "interface": "IDBObjectStoreParameters",
        "type": "string | string[]"
    },
    {
        "kind": "constructor",
        "interface": "ClipboardEvent",
        "signatures": [
            "new(type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent"
        ]
    },
    {
        "kind": "method",
        "interface": "IDBIndex",
        "name": "openCursor",
        "signatures": ["openCursor(range?: IDBKeyRange | IDBValidKey, direction?: string): IDBRequest"]
    },
    {
        "kind": "method",
        "interface": "IDBIndex",
        "name": "openKeyCursor",
        "signatures": ["openKeyCursor(range?: IDBKeyRange | IDBValidKey, direction?: string): IDBRequest"]
    },
    {
        "kind": "method",
        "interface": "IDBObjectStore",
        "name": "openCursor",
        "signatures": ["openCursor(range?: IDBKeyRange | IDBValidKey, direction?: string): IDBRequest"]
    },
    {
        "kind": "method",
        "interface": "IDBObjectStore",
        "name": "add",
        "signatures": ["add(value: any, key?: IDBKeyRange | IDBValidKey): IDBRequest"]
    },
    {
        "kind": "method",
        "interface": "IDBObjectStore",
        "name": "count",
        "signatures": ["count(key?: IDBKeyRange | IDBValidKey): IDBRequest"]
    },
    {
        "kind": "method",
        "interface": "IDBObjectStore",
        "name": "delete",
        "signatures": ["delete(key: IDBKeyRange | IDBValidKey): IDBRequest"]
    },
    {
        "kind": "method",
        "interface": "IDBObjectStore",
        "name": "put",
        "signatures": ["put(value: any, key?: IDBKeyRange | IDBValidKey): IDBRequest"]
    },
    {
        "kind": "property",
        "interface": "IDBCursor",
        "name": "key",
        "type": "IDBKeyRange | IDBValidKey"
    },
    {
        "kind": "method",
        "interface": "IDBCursor",
        "name": "continue",
        "signatures": ["continue(key?: IDBKeyRange | IDBValidKey): void"]
    },
    {
        "kind": "method",
        "interface": "IDBIndex",
        "name": "count",
        "signatures": ["count(key?: IDBKeyRange | IDBValidKey): IDBRequest"]
    },
    {
        "kind": "method",
        "interface": "IDBIndex",
        "name": "get",
        "signatures": ["get(key: IDBKeyRange | IDBValidKey): IDBRequest"]
    },
    {
        "kind": "method",
        "interface": "IDBIndex",
        "name": "getKey",
        "signatures": ["getKey(key: IDBKeyRange | IDBValidKey): IDBRequest"]
    },
    {
        "kind": "method",
        "interface": "Storage",
        "name": "getItem",
        "signatures": ["getItem(key: string): string | null"]
    },
    {
        "kind": "method",
        "interface": "Storage",
        "name": "key",
        "signatures": ["key(index: number): string | null"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "uniform1fv",
        "signatures": ["uniform1fv(location: WebGLUniformLocation, v: Float32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "uniform2fv",
        "signatures": ["uniform2fv(location: WebGLUniformLocation, v: Float32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "uniform3fv",
        "signatures": ["uniform3fv(location: WebGLUniformLocation, v: Float32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "uniform4fv",
        "signatures": ["uniform4fv(location: WebGLUniformLocation, v: Float32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "uniform1iv",
        "signatures": ["uniform1iv(location: WebGLUniformLocation, v: Int32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "uniform2iv",
        "signatures": ["uniform2iv(location: WebGLUniformLocation, v: Int32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "uniform3iv",
        "signatures": ["uniform3iv(location: WebGLUniformLocation, v: Int32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "uniform4iv",
        "signatures": ["uniform4iv(location: WebGLUniformLocation, v: Int32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "uniformMatrix2fv",
        "signatures": ["uniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "uniformMatrix3fv",
        "signatures": ["uniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "uniformMatrix4fv",
        "signatures": ["uniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "vertexAttrib1fv",
        "signatures": ["vertexAttrib1fv(indx: number, values: Float32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "vertexAttrib2fv",
        "signatures": ["vertexAttrib2fv(indx: number, values: Float32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "vertexAttrib3fv",
        "signatures": ["vertexAttrib3fv(indx: number, values: Float32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "vertexAttrib4fv",
        "signatures": ["vertexAttrib4fv(indx: number, values: Float32Array | number[]): void"]
    },
    {
        "kind": "method",
        "interface": "Element",
        "name": "getAttribute",
        "signatures": ["getAttribute(name: string): string | null"]
    },
    {
        "kind": "extends",
        "baseInterface": "HTMLCollectionOf<HTMLOptionElement>",
        "interface": "HTMLOptionsCollection"
    },
     {
         "kind": "property",
         "interface": "Algorithm",
         "name": "name",
         "type": "string"
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "decrypt",
         "signatures": ["decrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: BufferSource): PromiseLike<ArrayBuffer>"]
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "deriveBits",
         "signatures": ["deriveBits(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, length: number): PromiseLike<ArrayBuffer>"]
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "deriveKey",
         "signatures": ["deriveKey(algorithm: string | EcdhKeyDeriveParams | DhKeyDeriveParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: string | AesDerivedKeyParams | HmacImportParams | ConcatParams | HkdfCtrParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>"]
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "digest",
         "signatures": ["digest(algorithm: AlgorithmIdentifier, data: BufferSource): PromiseLike<ArrayBuffer>"]
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "encrypt",
         "signatures": ["encrypt(algorithm: string | RsaOaepParams | AesCtrParams | AesCbcParams | AesCmacParams | AesGcmParams | AesCfbParams, key: CryptoKey, data: BufferSource): PromiseLike<ArrayBuffer>"]
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "exportKey",
         "signatures": [
             "exportKey(format: \"jwk\", key: CryptoKey): PromiseLike<JsonWebKey>",
             "exportKey(format: \"raw\" | \"pkcs8\" | \"spki\", key: CryptoKey): PromiseLike<ArrayBuffer>",
             "exportKey(format: string, key: CryptoKey): PromiseLike<JsonWebKey | ArrayBuffer>"
         ]
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "generateKey",
         "signatures": [
             "generateKey(algorithm: string, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair | CryptoKey>",
             "generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams | DhKeyGenParams, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKeyPair>",
             "generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>"
         ]
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "importKey",
         "signatures": [
             "importKey(format: \"jwk\", keyData: JsonWebKey, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams, extractable:boolean, keyUsages: string[]): PromiseLike<CryptoKey>",
             "importKey(format: \"raw\" | \"pkcs8\" | \"spki\", keyData: BufferSource, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams, extractable:boolean, keyUsages: string[]): PromiseLike<CryptoKey>",
             "importKey(format: string, keyData: JsonWebKey | BufferSource, algorithm: string | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | DhImportKeyParams, extractable:boolean, keyUsages: string[]): PromiseLike<CryptoKey>"
         ]
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "sign",
         "signatures": ["sign(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, data: BufferSource): PromiseLike<ArrayBuffer>"]
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "unwrapKey",
         "signatures": ["unwrapKey(format: string, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier, unwrappedKeyAlgorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: string[]): PromiseLike<CryptoKey>"]
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "verify",
         "signatures": ["verify(algorithm: string | RsaPssParams | EcdsaParams | AesCmacParams, key: CryptoKey, signature: BufferSource, data: BufferSource): PromiseLike<boolean>"]
     },
     {
         "kind": "method",
         "interface": "SubtleCrypto",
         "name": "wrapKey",
         "signatures": ["wrapKey(format: string, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier): PromiseLike<ArrayBuffer>"]
     },
     {
        "kind": "method",
        "name": "setTimeout",
        "signatures": [
            "setTimeout(handler: (...args: any[]) => void, timeout: number): number",
            "setTimeout(handler: any, timeout?: any, ...args: any[]): number"
        ]
     },
     {
        "kind": "method",
        "name": "setImmediate",
        "signatures": [
            "setImmediate(handler: (...args: any[]) => void): number",
            "setImmediate(handler: any, ...args: any[]): number"
        ]
     },
     {
        "kind": "method",
        "name": "setInterval",
        "signatures": [
            "setInterval(handler: (...args: any[]) => void, timeout: number): number",
            "setInterval(handler: any, timeout?: any, ...args: any[]): number"
        ]
     },
     {
         "kind": "property",
         "interface": "HTMLInputElement",
         "readonly": true,
         "name": "files",
         "type": "FileList | null"
     },
     {
         "kind": "property",
         "interface": "Window",
         "name": "opener",
         "type": "any"
    },
    {
        "kind": "method",
        "interface": "History",
        "name": "back",
        "signatures": ["back(): void"]
    },
    {
        "kind": "method",
        "interface": "History",
        "name": "forward",
        "signatures": ["forward(): void"]
    },
    {
        "kind": "method",
        "interface": "History",
        "name": "go",
        "signatures": ["go(delta?: number): void"]
    },
    {
        "kind": "method",
        "interface": "History",
        "name": "pushState",
        "signatures": ["pushState(data: any, title: string, url?: string | null): void"]
    },
    {
        "kind": "method",
        "interface": "History",
        "name": "replaceState",
        "signatures": ["replaceState(data: any, title: string, url?: string | null): void"]
    },
    {
        "kind": "property",
        "interface": "Node",
        "readonly": true,
        "name": "firstChild",
        "type": "Node | null"
    },
    {
        "kind": "property",
        "interface": "Node",
        "readonly": true,
        "name": "lastChild",
        "type": "Node | null"
    },
    {
        "kind": "property",
        "interface": "Node",
        "readonly": true,
        "name": "nextSibling",
        "type": "Node | null"
    },
    {
        "kind": "property",
        "interface": "Node",
        "readonly": true,
        "name": "previousSibling",
        "type": "Node | null"
    },
    {
        "kind": "property",
        "interface": "Node",
        "readonly": true,
        "name": "parentNode",
        "type": "Node | null"
    },
    {
        "kind": "property",
        "interface": "Node",
        "readonly": true,
        "name": "parentElement",
        "type": "HTMLElement | null"
    },
    {
        "kind": "method",
        "interface": "MouseEvent",
        "name": "initMouseEvent",
        "signatures": ["initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget | null): void"]
    },
    {
        "kind": "property",
        "interface": "DataTransfer",
        "readonly": true,
        "name": "types",
        "type": "string[]"
    },
    {
        "kind": "method",
        "interface": "XPathEvaluator",
        "name": "evaluate",
        "signatures": ["evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver | null, type: number, result: XPathResult | null): XPathResult"]
    },
    {
        "kind": "method",
        "interface": "Document",
        "name": "evaluate",
        "signatures": ["evaluate(expression: string, contextNode: Node, resolver: XPathNSResolver | null, type: number, result: XPathResult | null): XPathResult"]
    },
    {
        "kind": "method",
        "interface": "XPathExpression",
        "name": "evaluate",
        "signatures": ["evaluate(contextNode: Node, type: number, result: XPathResult | null): XPathResult"]
    },
    {
        "kind": "extends",
        "baseInterface": "Node, GlobalEventHandlers, NodeSelector, DocumentEvent, ParentNode, DocumentOrShadowRoot",
        "interface": "Document"
    },
    {
        "kind": "property",
        "interface": "ElementTraversal",
        "readonly": true,
        "name": "firstElementChild",
        "type": "Element | null"
    },
    {
        "kind": "property",
        "interface": "ElementTraversal",
        "readonly": true,
        "name": "lastElementChild",
        "type": "Element | null"
    },
    {
        "kind": "property",
        "interface": "ElementTraversal",
        "readonly": true,
        "name": "nextElementSibling",
        "type": "Element | null"
    },
    {
        "kind": "property",
        "interface": "ElementTraversal",
        "readonly": true,
        "name": "previousElementSibling",
        "type": "Element | null"
    }
 ]
