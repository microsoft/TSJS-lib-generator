[
    {
        "kind": "property",
        "interface": "Window",
        "exposeGlobally": false,
        "name": "URL",
        "type": "URL"
    },
    {
        "kind": "property",
        "interface": "Element",
        "name": "id",
        "type": "string"
    },
    {
        "kind": "property",
        "interface": "Element",
        "name": "className",
        "readonly": true,
        "type": "string"
    },
    {
        "kind": "property",
        "interface": "SVGElement",
        "name": "className",
        "type": "any"
    },
    {
        "kind": "interface",
        "name": "NodeListOf<TNode extends Node>",
        "flavor": "web",
        "extends": "NodeList",
        "properties": [
            {
                "name": "length",
                "type": "number"
            }
        ],
        "methods": [
            {
                "name": "item",
                "signatures": [
                    "item(index: number): TNode"
                ]
            }
        ],
        "indexer": [
            {
                "signatures": [
                    "[index: number]: TNode"
                ]
            }
        ]
    },
    {
        "kind": "interface",
        "name": "BlobPropertyBag",
        "constructorSignatures": [
            "new(): NodeList"
        ],
        "properties": [
            {
                "name": "type?",
                "type": "string"
            },
            {
                "name": "endings?",
                "type": "string"
            }
        ]
    },
    {
        "kind": "interface",
        "name": "FilePropertyBag",
        "properties": [
            {
                "name": "type?",
                "type": "string"
            },
            {
                "name": "lastModified?",
                "type": "number"
            }
        ]
    },
    {
        "kind": "interface",
        "name": "EventListenerObject",
        "methods": [
            {
                "name": "handleEvent",
                "signatures": [
                    "handleEvent(evt: Event): void"
                ]
            }
        ]
    },
    {
        "kind": "interface",
        "name": "MessageEventInit",
        "extends": "EventInit",
        "properties": [
            {
                "name": "data?",
                "type": "any"
            },
            {
                "name": "origin?",
                "type": "string"
            },
            {
                "name": "lastEventId?",
                "type": "string"
            },
            {
                "name": "channel?",
                "type": "string"
            },
            {
                "name": "source?",
                "type": "any"
            },
            {
                "name": "ports?",
                "type": "MessagePort[]"
            }
        ]
    },
    {
        "kind": "interface",
        "name": "ProgressEventInit",
        "extends": "EventInit",
        "properties": [
            {
                "name": "lengthComputable?",
                "type": "boolean"
            },
            {
                "name": "loaded?",
                "type": "number"
            },
            {
                "name": "total?",
                "type": "number"
            }
        ]
    },
    {
        "kind": "method",
        "interface": "HTMLElement",
        "name": "getElementsByClassName"
    },
    {
        "kind": "property",
        "interface": "HTMLElement",
        "name": "id"
    },
    {
        "kind": "property",
        "interface": "HTMLElement",
        "name": "className"
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "texSubImage2D",
        "signatures": [
            "texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void",
            "texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, image: HTMLImageElement): void",
            "texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, canvas: HTMLCanvasElement): void",
            "texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, video: HTMLVideoElement): void",
            "texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, pixels: ImageData): void"
        ]
    },
    {
        "kind": "method",
        "interface": "WebGLRenderingContext",
        "name": "texImage2D",
        "signatures": [
            "texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView): void",
            "texImage2D(target: number, level: number, internalformat: number, format: number, type: number, image: HTMLImageElement): void",
            "texImage2D(target: number, level: number, internalformat: number, format: number, type: number, canvas: HTMLCanvasElement): void",
            "texImage2D(target: number, level: number, internalformat: number, format: number, type: number, video: HTMLVideoElement): void",
            "texImage2D(target: number, level: number, internalformat: number, format: number, type: number, pixels: ImageData): void"
        ]
    },
    {
        "kind": "method",
        "interface": "XMLHttpRequest",
        "name": "send",
        "signatures": [
            "send(data?: string): void",
            "send(data?: any): void"
        ],
        "webOnlySignatures": [
            "send(data?: Document): void"
        ]
    },
    {
        "kind": "method",
        "interface": "HTMLCanvasElement",
        "name": "getContext",
        "signatures": [
            "getContext(contextId: \"2d\"): CanvasRenderingContext2D",
            "getContext(contextId: \"experimental-webgl\"): WebGLRenderingContext",
            "getContext(contextId: string, ...args: any[]): CanvasRenderingContext2D | WebGLRenderingContext"
        ]
    },
    {
        "kind": "method",
        "name": "alert",
        "signatures": [
            "alert(message?: any): void"
        ]
    },
    {
        "kind": "method",
        "interface": "Document",
        "name": "open",
        "signatures": [
            "open(url?: string, name?: string, features?: string, replace?: boolean): Document"
        ]
    },
    {
        "kind": "method",
        "interface": "Document",
        "name": "getElementById",
        "signatures": [
            "getElementById(elementId: string): HTMLElement"
        ]
    },
    {
        "kind": "method",
        "interface": "NodeSelector",
        "name": "querySelectorAll",
        "signatures": [
            "querySelectorAll(selectors: string): NodeListOf<Element>"
        ]
    },
    {
        "kind": "method",
        "name": "getElementsByTagNameNS",
        "signatures": [
            "getElementsByTagNameNS(namespaceURI: string, localName: string): NodeListOf<Element>"
        ]
    },
    {
        "kind": "method",
        "name": "getElementsByClassName",
        "signatures": [
            "getElementsByClassName(classNames: string): NodeListOf<Element>"
        ]
    },
    {
        "kind": "method",
        "name": "getElementsByName",
        "signatures": [
            "getElementsByName(elementName: string): NodeListOf<Element>"
        ]
    },
    {
        "kind": "property",
        "interface": "CanvasRenderingContext2D",
        "name": "fillStyle",
        "type": "string | CanvasGradient | CanvasPattern"
    },
    {
        "kind": "property",
        "interface": "CanvasRenderingContext2D",
        "name": "strokeStyle",
        "type": "string | CanvasGradient | CanvasPattern"
    },
    {
        "kind": "property",
        "interface": "BeforeUnloadEvent",
        "name": "returnValue",
        "type": "any"
    },
    {
        "kind": "property",
        "interface": "HTMLEmbedElement",
        "name": "hidden",
        "type": "any"
    },
    {
        "kind": "property",
        "name": "documentElement",
        "type": "HTMLElement"
    },
    {
        "kind": "property",
        "interface": "SVGStylable",
        "name": "className",
        "type": "any"
    },
    {
        "kind": "property",
        "interface": "SVGElement",
        "name": "className",
        "type": "any"
    },
    {
        "kind": "property",
        "interface": "Window",
        "name": "orientation",
        "type": "string | number"
    },
    {
        "kind": "method",
        "interface": "Element",
        "static": true,
        "signatures": [ "getElementsByClassName(classNames: string): NodeListOf<Element>" ]
    },
    {
        "kind": "constructor",
        "interface": "File",
        "signatures": [ "new (parts: (ArrayBuffer | ArrayBufferView | Blob | string)[], filename: string, properties?: FilePropertyBag): File" ]
    },
    {
        "kind": "indexer",
        "interface": "HTMLCollection",
        "signatures": [ "[index: number]: Element" ]
    },
    {
        "kind": "signatureoverload",
        "name": "createElementNS",
        "interface": "Document",
        "signatures": [ "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"a\"): SVGAElement" ]
    },
    {
        "kind": "typedef",
        "name": "IDBValidKey",
        "type": "number | string | Date | IDBArrayKey"
    },
    {
        "kind": "extends",
        "baseInterface": "ParentNode",
        "interface": "Document"
    },
    {
        "kind": "interface", 
        "name": "ParentNode",
        "flavor": "DOM",
        "properties": [
            {
                "name": "children",
                "readonly": true,
                "type": "HTMLCollection"
            }
        ]
    },
    {
        "kind": "interface",
        "name": "DOMException",
        "extends": "Error",
        "properties": [
            {
                "name": "name",
                "type": "string",
                "readonly": true
            },
            {
                "name": "code",
                "type": "number",
                "readonly": true
            }
        ],
        "constructorSignatures": [
            "new (message?: string, name?: string): DOMException"
        ],
        "constants": [
            {
                "name": "INDEX_SIZE_ERR",
                "type": "number"
            }
        ]
    }
]
