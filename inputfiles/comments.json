{
    "mixins": {
        "mixin": {
            "DocumentOrShadowRoot": {
                "properties": {
                    "property": {
                        "styleSheets": {
                            "comment": "/**\n * Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.\n */"
                        }
                    }
                }
            },
            "GlobalEventHandlers": {
                "properties": {
                    "property": {
                        "ondragleave": {
                            "comment": "/**\n * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\n * @param ev The drag event.\n */"
                        },
                        "ondragenter": {
                            "comment": "/**\n * Fires on the target element when the user drags the object to a valid drop target.\n * @param ev The drag event.\n */"
                        },
                        "ondragend": {
                            "comment": "/**\n * Fires on the source object when the user releases the mouse at the close of a drag operation.\n * @param ev The event.\n */"
                        },
                        "ondragover": {
                            "comment": "/**\n * Fires on the target element continuously while the user drags the object over a valid drop target.\n * @param ev The event.\n */"
                        },
                        "ondragstart": {
                            "comment": "/**\n * Fires on the source object when the user starts to drag a text selection or selected object.\n * @param ev The event.\n */"
                        },
                        "ondrag": {
                            "comment": "/**\n * Fires on the source object continuously during a drag operation.\n * @param ev The event.\n */"
                        },
                        "onseeked": {
                            "comment": "/**\n * Occurs when the seek operation ends.\n * @param ev The event.\n */"
                        },
                        "onseeking": {
                            "comment": "/**\n * Occurs when the current playback position is moved.\n * @param ev The event.\n */"
                        },
                        "onreset": {
                            "comment": "/**\n * Fires when the user resets a form.\n * @param ev The event.\n */"
                        },
                        "onkeydown": {
                            "comment": "/**\n * Fires when the user presses a key.\n * @param ev The keyboard event\n */"
                        },
                        "onkeyup": {
                            "comment": "/**\n * Fires when the user releases a key.\n * @param ev The keyboard event\n */"
                        },
                        "ondurationchange": {
                            "comment": "/**\n * Occurs when the duration attribute is updated.\n * @param ev The event.\n */"
                        },
                        "onblur": {
                            "comment": "/**\n * Fires when the object loses the input focus.\n * @param ev The focus event.\n */"
                        },
                        "onload": {
                            "comment": "/**\n * Fires immediately after the browser loads the object.\n * @param ev The event.\n */"
                        },
                        "onscroll": {
                            "comment": "/**\n * Fires when the user repositions the scroll box in the scroll bar on the object.\n * @param ev The event.\n */"
                        },
                        "onpause": {
                            "comment": "/**\n * Occurs when playback is paused.\n * @param ev The event.\n */"
                        },
                        "onmousedown": {
                            "comment": "/**\n * Fires when the user clicks the object with either mouse button.\n * @param ev The mouse event.\n */"
                        },
                        "onclick": {
                            "comment": "/**\n * Fires when the user clicks the left mouse button on the object\n * @param ev The mouse event.\n */"
                        },
                        "onwaiting": {
                            "comment": "/**\n * Occurs when playback stops because the next frame of a video resource is not available.\n * @param ev The event.\n */"
                        },
                        "onkeypress": {
                            "comment": "/**\n * Fires when the user presses an alphanumeric key.\n * @param ev The event.\n */"
                        },
                        "onloadeddata": {
                            "comment": "/**\n * Occurs when media data is loaded at the current playback position.\n * @param ev The event.\n */"
                        },
                        "onfocus": {
                            "comment": "/**\n * Fires when the object receives focus.\n * @param ev The event.\n */"
                        },
                        "ontimeupdate": {
                            "comment": "/**\n * Occurs to indicate the current playback position.\n * @param ev The event.\n */"
                        },
                        "onselect": {
                            "comment": "/**\n * Fires when the current selection changes.\n * @param ev The event.\n */"
                        },
                        "onended": {
                            "comment": "/**\n * Occurs when the end of playback is reached.\n * @param ev The event\n */"
                        },
                        "onabort": {
                            "comment": "/**\n * Fires when the user aborts the download.\n * @param ev The event.\n */"
                        },
                        "onratechange": {
                            "comment": "/**\n * Occurs when the playback rate is increased or decreased.\n * @param ev The event.\n */"
                        },
                        "onprogress": {
                            "comment": "/**\n * Occurs to indicate progress while downloading media data.\n * @param ev The event.\n */"
                        },
                        "ondblclick": {
                            "comment": "/**\n * Fires when the user double-clicks the object.\n * @param ev The mouse event.\n */"
                        },
                        "oncontextmenu": {
                            "comment": "/**\n * Fires when the user clicks the right mouse button in the client area, opening the context menu.\n * @param ev The mouse event.\n */"
                        },
                        "onloadedmetadata": {
                            "comment": "/**\n * Occurs when the duration and dimensions of the media have been determined.\n * @param ev The event.\n */"
                        },
                        "onerror": {
                            "comment": "/**\n * Fires when an error occurs during object loading.\n * @param ev The event.\n */"
                        },
                        "onplay": {
                            "comment": "/**\n * Occurs when the play method is requested.\n * @param ev The event.\n */"
                        },
                        "onplaying": {
                            "comment": "/**\n * Occurs when the audio or video has started playing.\n * @param ev The event.\n */"
                        },
                        "onstalled": {
                            "comment": "/**\n * Occurs when the download has stopped.\n * @param ev The event.\n */"
                        },
                        "onmousemove": {
                            "comment": "/**\n * Fires when the user moves the mouse over the object.\n * @param ev The mouse event.\n */"
                        },
                        "onmouseup": {
                            "comment": "/**\n * Fires when the user releases a mouse button while the mouse is over the object.\n * @param ev The mouse event.\n */"
                        },
                        "onmouseover": {
                            "comment": "/**\n * Fires when the user moves the mouse pointer into the object.\n * @param ev The mouse event.\n */"
                        },
                        "onsuspend": {
                            "comment": "/**\n * Occurs if the load operation has been intentionally halted.\n * @param ev The event.\n */"
                        },
                        "onmouseout": {
                            "comment": "/**\n * Fires when the user moves the mouse pointer outside the boundaries of the object.\n * @param ev The mouse event.\n */"
                        },
                        "onvolumechange": {
                            "comment": "/**\n * Occurs when the volume is changed, or playback is muted or unmuted.\n * @param ev The event.\n */"
                        },
                        "onchange": {
                            "comment": "/**\n * Fires when the contents of the object or selection have changed.\n * @param ev The event.\n */"
                        },
                        "oncanplay": {
                            "comment": "/**\n * Occurs when playback is possible, but would require further buffering.\n * @param ev The event.\n */"
                        },
                        "onloadstart": {
                            "comment": "/**\n * Occurs when Internet Explorer begins looking for media data.\n * @param ev The event.\n */"
                        },
                        "onemptied": {
                            "comment": "/**\n * Occurs when the media element is reset to its initial state.\n * @param ev The event.\n */"
                        }
                    }
                }
            }
        }
    },
    "interfaces": {
        "interface": {
            "Headers": {
                "iterator": {
                    "comments": {
                        "comment": {
                            "entries": "/**\n * Returns an iterator allowing to go through all key/value pairs contained in this object.\n */",
                            "keys": "/**\n * Returns an iterator allowing to go through all keys of the key/value pairs contained in this object.\n */",
                            "values": "/**\n * Returns an iterator allowing to go through all values of the key/value pairs contained in this object.\n */"
                        }
                    }
                }
            },
            "FormData": {
                "iterator": {
                    "comments": {
                        "comment": {
                            "entries": "/**\n * Returns an array of key, value pairs for every entry in the list.\n */",
                            "keys": "/**\n * Returns a list of keys in the list.\n */",
                            "values": "/**\n * Returns a list of values in the list.\n */"
                        }
                    }
                }
            },
            "NodeListOf": {
                "methods": {
                    "method": {
                        "forEach": {
                            "comment": "/**\n * Performs the specified action for each node in an list.\n * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.\n * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n */"
                        }
                    }
                },
                "iterator": {
                    "comments": {
                        "comment": {
                            "entries": "/**\n * Returns an array of key, value pairs for every entry in the list.\n */",
                            "keys": "/**\n * Returns an list of keys in the list.\n */",
                            "values": "/**\n * Returns an list of values in the list.\n */"
                        }
                    }
                }
            },
            "NodeList": {
                "methods": {
                    "method": {
                        "forEach": {
                            "comment": "/**\n * Performs the specified action for each node in an list.\n * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.\n * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n */"
                        }
                    }
                },
                "iterator": {
                    "comments": {
                        "comment": {
                            "entries": "/**\n * Returns an array of key, value pairs for every entry in the list.\n */",
                            "keys": "/**\n * Returns an list of keys in the list.\n */",
                            "values": "/**\n * Returns an list of values in the list.\n */"
                        }
                    }
                }
            },
            "HTMLTableElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Sets or retrieves the width of the object.\n */"
                        },
                        "cellSpacing": {
                            "comment": "/**\n * Sets or retrieves the amount of space between cells in a table.\n */"
                        },
                        "tFoot": {
                            "comment": "/**\n * Retrieves the tFoot object of the table.\n */"
                        },
                        "frame": {
                            "comment": "/**\n * Sets or retrieves the way the border frame around the table is displayed.\n */"
                        },
                        "rows": {
                            "comment": "/**\n * Sets or retrieves the number of horizontal rows contained in the object.\n */"
                        },
                        "rules": {
                            "comment": "/**\n * Sets or retrieves which dividing lines (inner borders) are displayed.\n */"
                        },
                        "summary": {
                            "comment": "/**\n * Sets or retrieves a description and/or structure of the object.\n */"
                        },
                        "caption": {
                            "comment": "/**\n * Retrieves the caption object of a table.\n */"
                        },
                        "tBodies": {
                            "comment": "/**\n * Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.\n */"
                        },
                        "tHead": {
                            "comment": "/**\n * Retrieves the tHead object of the table.\n */"
                        },
                        "align": {
                            "comment": "/**\n * Sets or retrieves a value that indicates the table alignment.\n */"
                        },
                        "cellPadding": {
                            "comment": "/**\n * Sets or retrieves the amount of space between the border of the cell and the content of the cell.\n */"
                        },
                        "border": {
                            "comment": "/**\n * Sets or retrieves the width of the border to draw around the object.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "deleteRow": {
                            "comment": "/**\n * Removes the specified row (tr) from the element and from the rows collection.\n * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\n */"
                        },
                        "createTBody": {
                            "comment": "/**\n * Creates an empty tBody element in the table.\n */"
                        },
                        "deleteCaption": {
                            "comment": "/**\n * Deletes the caption element and its contents from the table.\n */"
                        },
                        "insertRow": {
                            "comment": "/**\n * Creates a new row (tr) in the table, and adds the row to the rows collection.\n * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\n */"
                        },
                        "deleteTFoot": {
                            "comment": "/**\n * Deletes the tFoot element and its contents from the table.\n */"
                        },
                        "createTHead": {
                            "comment": "/**\n * Returns the tHead element object if successful, or null otherwise.\n */"
                        },
                        "deleteTHead": {
                            "comment": "/**\n * Deletes the tHead element and its contents from the table.\n */"
                        },
                        "createCaption": {
                            "comment": "/**\n * Creates an empty caption element in the table.\n */"
                        },
                        "createTFoot": {
                            "comment": "/**\n * Creates an empty tFoot element in the table.\n */"
                        }
                    }
                }
            },
            "HTMLBaseElement": {
                "properties": {
                    "property": {
                        "target": {
                            "comment": "/**\n * Sets or retrieves the window or frame at which to target content.\n */"
                        },
                        "href": {
                            "comment": "/**\n * Gets or sets the baseline URL on which relative links are based.\n */"
                        }
                    }
                }
            },
            "HTMLParagraphElement": {
                "properties": {
                    "property": {
                        "align": {
                            "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
                        }
                    }
                }
            },
            "HTMLAppletElement": {
                "properties": {
                    "property": {
                        "archive": {
                            "comment": "/**\n * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\n */"
                        },
                        "alt": {
                            "comment": "/**\n * Sets or retrieves a text alternative to the graphic.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the shape of the object.\n */"
                        },
                        "height": {
                            "comment": "/**\n * Sets or retrieves the height of the object.\n */"
                        },
                        "codeBase": {
                            "comment": "/**\n * Sets or retrieves the URL of the component.\n */"
                        }
                    }
                }
            },
            "HTMLOListElement": {
                "properties": {
                    "property": {
                        "start": {
                            "comment": "/**\n * The starting number.\n */"
                        }
                    }
                }
            },
            "HTMLSelectElement": {
                "properties": {
                    "property": {
                        "value": {
                            "comment": "/**\n * Sets or retrieves the value which is returned to the server when the form control is submitted.\n */"
                        },
                        "form": {
                            "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the name of the object.\n */"
                        },
                        "size": {
                            "comment": "/**\n * Sets or retrieves the number of rows in the list box.\n */"
                        },
                        "length": {
                            "comment": "/**\n * Sets or retrieves the number of objects in a collection.\n */"
                        },
                        "selectedIndex": {
                            "comment": "/**\n * Sets or retrieves the index of the selected option in a select object.\n */"
                        },
                        "multiple": {
                            "comment": "/**\n * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\n */"
                        },
                        "type": {
                            "comment": "/**\n * Retrieves the type of select control based on the value of the MULTIPLE attribute.\n */"
                        },
                        "validationMessage": {
                            "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
                        },
                        "validity": {
                            "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
                        },
                        "required": {
                            "comment": "/**\n * When present, marks an element that can't be submitted without a value.\n */"
                        },
                        "willValidate": {
                            "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "remove": {
                            "comment": "/**\n * Removes an element from the collection.\n * @param index Number that specifies the zero-based index of the element to remove from the collection.\n */"
                        },
                        "add": {
                            "comment": "/**\n * Adds an element to the areas, controlRange, or options collection.\n * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.\n * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection.\n */"
                        },
                        "item": {
                            "comment": "/**\n * Retrieves a select object or an object from an options collection.\n * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\n * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\n */"
                        },
                        "namedItem": {
                            "comment": "/**\n * Retrieves a select object or an object from an options collection.\n * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.\n */"
                        },
                        "checkValidity": {
                            "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
                        },
                        "setCustomValidity": {
                            "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
                        }
                    }
                }
            },
            "HTMLMetaElement": {
                "properties": {
                    "property": {
                        "httpEquiv": {
                            "comment": "/**\n * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the value specified in the content attribute of the meta object.\n */"
                        },
                        "content": {
                            "comment": "/**\n * Gets or sets meta-information to associate with httpEquiv or name.\n */"
                        },
                        "scheme": {
                            "comment": "/**\n * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.\n */"
                        }
                    }
                }
            },
            "HTMLLinkElement": {
                "properties": {
                    "property": {
                        "rel": {
                            "comment": "/**\n * Sets or retrieves the relationship between the object and the destination of the link.\n */"
                        },
                        "target": {
                            "comment": "/**\n * Sets or retrieves the window or frame at which to target content.\n */"
                        },
                        "href": {
                            "comment": "/**\n * Sets or retrieves a destination URL or an anchor point.\n */"
                        },
                        "media": {
                            "comment": "/**\n * Sets or retrieves the media type.\n */"
                        },
                        "rev": {
                            "comment": "/**\n * Sets or retrieves the relationship between the object and the destination of the link.\n */"
                        },
                        "type": {
                            "comment": "/**\n * Sets or retrieves the MIME type of the object.\n */"
                        },
                        "charset": {
                            "comment": "/**\n * Sets or retrieves the character set used to encode the object.\n */"
                        },
                        "hreflang": {
                            "comment": "/**\n * Sets or retrieves the language code of the object.\n */"
                        }
                    }
                }
            },
            "HTMLFontElement": {
                "properties": {
                    "property": {
                        "face": {
                            "comment": "/**\n * Sets or retrieves the current typeface family.\n */"
                        }
                    }
                }
            },
            "HTMLTableCaptionElement": {
                "properties": {
                    "property": {
                        "align": {
                            "comment": "/**\n * Sets or retrieves the alignment of the caption or legend.\n */"
                        }
                    }
                }
            },
            "HTMLOptionElement": {
                "properties": {
                    "property": {
                        "index": {
                            "comment": "/**\n * Sets or retrieves the ordinal position of an option in a list box.\n */"
                        },
                        "defaultSelected": {
                            "comment": "/**\n * Sets or retrieves the status of an option.\n */"
                        },
                        "value": {
                            "comment": "/**\n * Sets or retrieves the value which is returned to the server when the form control is submitted.\n */"
                        },
                        "text": {
                            "comment": "/**\n * Sets or retrieves the text string specified by the option tag.\n */"
                        },
                        "form": {
                            "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
                        },
                        "label": {
                            "comment": "/**\n * Sets or retrieves a value that you can use to implement your own label functionality for the object.\n */"
                        },
                        "selected": {
                            "comment": "/**\n * Sets or retrieves whether the option in the list box is the default item.\n */"
                        }
                    }
                }
            },
            "HTMLMapElement": {
                "properties": {
                    "property": {
                        "name": {
                            "comment": "/**\n * Sets or retrieves the name of the object.\n */"
                        },
                        "areas": {
                            "comment": "/**\n * Retrieves a collection of the area objects defined for the given map object.\n */"
                        }
                    }
                }
            },
            "HTMLCollection": {
                "properties": {
                    "property": {
                        "length": {
                            "comment": "/**\n * Sets or retrieves the number of objects in a collection.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "item": {
                            "comment": "/**\n * Retrieves an object from various collections.\n */"
                        },
                        "namedItem": {
                            "comment": "/**\n * Retrieves a select object or an object from an options collection.\n */"
                        }
                    }
                }
            },
            "HTMLImageElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Sets or retrieves the width of the object.\n */"
                        },
                        "vspace": {
                            "comment": "/**\n * Sets or retrieves the vertical margin for the object.\n */"
                        },
                        "naturalHeight": {
                            "comment": "/**\n * The original height of the image resource before sizing.\n */"
                        },
                        "alt": {
                            "comment": "/**\n * Sets or retrieves a text alternative to the graphic.\n */"
                        },
                        "align": {
                            "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
                        },
                        "src": {
                            "comment": "/**\n * The address or URL of the a media resource that is to be considered.\n */"
                        },
                        "useMap": {
                            "comment": "/**\n * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n */"
                        },
                        "naturalWidth": {
                            "comment": "/**\n * The original width of the image resource before sizing.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the name of the object.\n */"
                        },
                        "height": {
                            "comment": "/**\n * Sets or retrieves the height of the object.\n */"
                        },
                        "border": {
                            "comment": "/**\n * Specifies the properties of a border drawn around an object.\n */"
                        },
                        "hspace": {
                            "comment": "/**\n * Sets or retrieves the width of the border to draw around the object.\n */"
                        },
                        "longDesc": {
                            "comment": "/**\n * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.\n */"
                        },
                        "isMap": {
                            "comment": "/**\n * Sets or retrieves whether the image is a server-side image map.\n */"
                        },
                        "complete": {
                            "comment": "/**\n * Retrieves whether the object is fully loaded.\n */"
                        }
                    }
                }
            },
            "HTMLAreaElement": {
                "properties": {
                    "property": {
                        "alt": {
                            "comment": "/**\n * Sets or retrieves a text alternative to the graphic.\n */"
                        },
                        "coords": {
                            "comment": "/**\n * Sets or retrieves the coordinates of the object.\n */"
                        },
                        "target": {
                            "comment": "/**\n * Sets or retrieves the window or frame at which to target content.\n */"
                        },
                        "noHref": {
                            "comment": "/**\n * Sets or gets whether clicks in this region cause action.\n */"
                        },
                        "shape": {
                            "comment": "/**\n * Sets or retrieves the shape of the object.\n */"
                        }
                    }
                }
            },
            "HTMLButtonElement": {
                "properties": {
                    "property": {
                        "value": {
                            "comment": "/**\n * Sets or retrieves the default or selected value of the control.\n */"
                        },
                        "form": {
                            "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the name of the object.\n */"
                        },
                        "type": {
                            "comment": "/**\n * Gets the classification and default behavior of the button.\n */"
                        },
                        "validationMessage": {
                            "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
                        },
                        "formTarget": {
                            "comment": "/**\n * Overrides the target attribute on a form element.\n */"
                        },
                        "willValidate": {
                            "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
                        },
                        "formAction": {
                            "comment": "/**\n * Overrides the action attribute (where the data on a form is sent) on the parent form element.\n */"
                        },
                        "validity": {
                            "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
                        },
                        "formNoValidate": {
                            "comment": "/**\n * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\n */"
                        },
                        "formEnctype": {
                            "comment": "/**\n * Used to override the encoding (formEnctype attribute) specified on the form element.\n */"
                        },
                        "formMethod": {
                            "comment": "/**\n * Overrides the submit method attribute previously specified on a form element.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "checkValidity": {
                            "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
                        },
                        "setCustomValidity": {
                            "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
                        }
                    }
                }
            },
            "HTMLSourceElement": {
                "properties": {
                    "property": {
                        "src": {
                            "comment": "/**\n * The address or URL of the a media resource that is to be considered.\n */"
                        },
                        "media": {
                            "comment": "/**\n * Gets or sets the intended media type of the media source.\n */"
                        },
                        "type": {
                            "comment": "/**\n * Gets or sets the MIME type of a media resource.\n */"
                        }
                    }
                }
            },
            "Document": {
                "properties": {
                    "property": {
                        "implementation": {
                            "comment": "/**\n * Gets the implementation object of the current document.\n */"
                        },
                        "scripts": {
                            "comment": "/**\n * Retrieves a collection of all script objects in the document.\n */"
                        },
                        "charset": {
                            "comment": "/**\n * Gets or sets the character set used to encode the object.\n */"
                        },
                        "vlinkColor": {
                            "comment": "/**\n * Sets or gets the color of the links that the user has visited.\n */"
                        },
                        "title": {
                            "comment": "/**\n * Contains the title of the document.\n */"
                        },
                        "embeds": {
                            "comment": "/**\n * Retrieves a collection of all embed objects in the document.\n */"
                        },
                        "all": {
                            "comment": "/**\n * Returns a reference to the collection of elements contained by the object.\n */"
                        },
                        "forms": {
                            "comment": "/**\n * Retrieves a collection, in source order, of all form objects in the document.\n */"
                        },
                        "dir": {
                            "comment": "/**\n * Sets or retrieves a value that indicates the reading order of the object.\n */"
                        },
                        "designMode": {
                            "comment": "/**\n * Sets or gets a value that indicates whether the document can be edited.\n */"
                        },
                        "inputEncoding": {
                            "comment": "/**\n * Returns the character encoding used to create the webpage that is loaded into the document object.\n */"
                        },
                        "links": {
                            "comment": "/**\n * Retrieves a collection of all a objects that specify the href property and all area objects in the document.\n */"
                        },
                        "URL": {
                            "comment": "/**\n * Sets or gets the URL for the current document.\n */"
                        },
                        "anchors": {
                            "comment": "/**\n * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.\n */"
                        },
                        "readyState": {
                            "comment": "/**\n * Retrieves a value that indicates the current state of the object.\n */"
                        },
                        "referrer": {
                            "comment": "/**\n * Gets the URL of the location that referred the user to the current page.\n */"
                        },
                        "alinkColor": {
                            "comment": "/**\n * Sets or gets the color of all active links in the document.\n */"
                        },
                        "doctype": {
                            "comment": "/**\n * Gets an object representing the document type declaration associated with the current document.\n */"
                        },
                        "bgColor": {
                            "comment": "/**\n * Deprecated. Sets or retrieves a value that indicates the background color behind the object.\n */"
                        },
                        "linkColor": {
                            "comment": "/**\n * Sets or gets the color of the document links.\n */"
                        },
                        "applets": {
                            "comment": "/**\n * Retrieves a collection of all applet objects in the document.\n */"
                        },
                        "body": {
                            "comment": "/**\n * Specifies the beginning and end of the document body.\n */"
                        },
                        "domain": {
                            "comment": "/**\n * Sets or gets the security domain of the document.\n */"
                        },
                        "documentElement": {
                            "comment": "/**\n * Gets a reference to the root node of the document.\n */"
                        },
                        "images": {
                            "comment": "/**\n * Retrieves a collection, in source order, of img objects in the document.\n */"
                        },
                        "location": {
                            "comment": "/**\n * Contains information about the current URL.\n */"
                        },
                        "onreadystatechange": {
                            "comment": "/**\n * Fires when the state of the object has changed.\n * @param ev The event\n */"
                        },
                        "lastModified": {
                            "comment": "/**\n * Gets the date that the page was last modified, if the page supplies one.\n */"
                        },
                        "fgColor": {
                            "comment": "/**\n * Sets or gets the foreground (text) color of the document.\n */"
                        },
                        "compatMode": {
                            "comment": "/**\n * Gets a value that indicates whether standards-compliant mode is switched on for the object.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "queryCommandValue": {
                            "comment": "/**\n * Returns the current value of the document, range, or current selection for the given command.\n * @param commandId String that specifies a command identifier.\n */"
                        },
                        "queryCommandIndeterm": {
                            "comment": "/**\n * Returns a Boolean value that indicates whether the specified command is in the indeterminate state.\n * @param commandId String that specifies a command identifier.\n */"
                        },
                        "execCommand": {
                            "comment": "/**\n * Executes a command on the current document, current selection, or the given range.\n * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.\n * @param showUI Display the user interface, defaults to false.\n * @param value Value to assign.\n */"
                        },
                        "elementFromPoint": {
                            "comment": "/**\n * Returns the element for the specified x coordinate and the specified y coordinate.\n * @param x The x-offset\n * @param y The y-offset\n */"
                        },
                        "write": {
                            "comment": "/**\n * Writes one or more HTML expressions to a document in the specified window.\n * @param content Specifies the text and HTML tags to write.\n */"
                        },
                        "createElement": {
                            "comment": "/**\n * Creates an instance of the element for the specified tag.\n * @param tagName The name of an element.\n */"
                        },
                        "writeln": {
                            "comment": "/**\n * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.\n * @param content The text and HTML tags to write.\n */"
                        },
                        "open": {
                            "comment": "/**\n * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.\n * @param url Specifies a MIME type for the document.\n * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.\n * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, \"fullscreen=yes, toolbar=yes\"). The following values are supported.\n * @param replace Specifies whether the existing entry for the document is replaced in the history list.\n */"
                        },
                        "queryCommandSupported": {
                            "comment": "/**\n * Returns a Boolean value that indicates whether the current command is supported on the current range.\n * @param commandId Specifies a command identifier.\n */"
                        },
                        "createTreeWalker": {
                            "comment": "/**\n * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.\n * @param root The root element or node to start traversing on.\n * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.\n * @param filter A custom NodeFilter function to use.\n * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\n */"
                        },
                        "queryCommandEnabled": {
                            "comment": "/**\n * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.\n * @param commandId Specifies a command identifier.\n */"
                        },
                        "close": {
                            "comment": "/**\n * Closes an output stream and forces the sent data to display.\n */"
                        },
                        "createRange": {
                            "comment": "/**\n *  Returns an empty range object that has both of its boundary points positioned at the beginning of the document.\n */"
                        },
                        "createComment": {
                            "comment": "/**\n * Creates a comment object with the specified data.\n * @param data Sets the comment object's data.\n */"
                        },
                        "getElementsByTagName": {
                            "comment": "/**\n * Retrieves a collection of objects based on the specified element name.\n * @param name Specifies the name of an element.\n */"
                        },
                        "createDocumentFragment": {
                            "comment": "/**\n * Creates a new document.\n */"
                        },
                        "getElementsByName": {
                            "comment": "/**\n * Gets a collection of objects based on the value of the NAME or ID attribute.\n * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.\n */"
                        },
                        "queryCommandState": {
                            "comment": "/**\n * Returns a Boolean value that indicates the current state of the command.\n * @param commandId String that specifies a command identifier.\n */"
                        },
                        "hasFocus": {
                            "comment": "/**\n * Gets a value indicating whether the object currently has focus.\n */"
                        },
                        "createAttribute": {
                            "comment": "/**\n * Creates an attribute object with a specified name.\n * @param name String that sets the attribute object's name.\n */"
                        },
                        "createTextNode": {
                            "comment": "/**\n * Creates a text string from the specified value.\n * @param data String that specifies the nodeValue property of the text node.\n */"
                        },
                        "createNodeIterator": {
                            "comment": "/**\n * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.\n * @param root The root element or node to start traversing on.\n * @param whatToShow The type of nodes or elements to appear in the node list\n * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.\n * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\n */"
                        },
                        "getSelection": {
                            "comment": "/**\n * Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.\n */"
                        },
                        "getElementById": {
                            "comment": "/**\n * Returns a reference to the first object with the specified value of the ID or NAME attribute.\n * @param elementId String that specifies the ID value. Case-insensitive.\n */"
                        }
                    }
                }
            },
            "HTMLScriptElement": {
                "properties": {
                    "property": {
                        "defer": {
                            "comment": "/**\n * Sets or retrieves the status of the script.\n */"
                        },
                        "text": {
                            "comment": "/**\n * Retrieves or sets the text of the object as a string.\n */"
                        },
                        "src": {
                            "comment": "/**\n * Retrieves the URL to an external file that contains the source code or data.\n */"
                        },
                        "htmlFor": {
                            "comment": "/**\n * Sets or retrieves the object that is bound to the event script.\n */"
                        },
                        "charset": {
                            "comment": "/**\n * Sets or retrieves the character set used to encode the object.\n */"
                        },
                        "type": {
                            "comment": "/**\n * Sets or retrieves the MIME type for the associated scripting engine.\n */"
                        },
                        "event": {
                            "comment": "/**\n * Sets or retrieves the event for which the script is written.\n */"
                        }
                    }
                }
            },
            "HTMLTableRowElement": {
                "properties": {
                    "property": {
                        "rowIndex": {
                            "comment": "/**\n * Retrieves the position of the object in the rows collection for the table.\n */"
                        },
                        "cells": {
                            "comment": "/**\n * Retrieves a collection of all cells in the table row.\n */"
                        },
                        "align": {
                            "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
                        },
                        "sectionRowIndex": {
                            "comment": "/**\n * Retrieves the position of the object in the collection.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "deleteCell": {
                            "comment": "/**\n * Removes the specified cell from the table row, as well as from the cells collection.\n * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.\n */"
                        },
                        "insertCell": {
                            "comment": "/**\n * Creates a new cell in the table row, and adds the cell to the cells collection.\n * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.\n */"
                        }
                    }
                }
            },
            "HTMLHtmlElement": {
                "properties": {
                    "property": {
                        "version": {
                            "comment": "/**\n * Sets or retrieves the DTD version that governs the current document.\n */"
                        }
                    }
                }
            },
            "HTMLFrameElement": {
                "properties": {
                    "property": {
                        "scrolling": {
                            "comment": "/**\n * Sets or retrieves whether the frame can be scrolled.\n */"
                        },
                        "marginHeight": {
                            "comment": "/**\n * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\n */"
                        },
                        "marginWidth": {
                            "comment": "/**\n * Sets or retrieves the left and right margin widths before displaying the text in a frame.\n */"
                        },
                        "frameBorder": {
                            "comment": "/**\n * Sets or retrieves whether to display a border for the frame.\n */"
                        },
                        "noResize": {
                            "comment": "/**\n * Sets or retrieves whether the user can resize the frame.\n */"
                        },
                        "contentWindow": {
                            "comment": "/**\n * Retrieves the object of the specified.\n */"
                        },
                        "src": {
                            "comment": "/**\n * Sets or retrieves a URL to be loaded by the object.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the frame name.\n */"
                        },
                        "contentDocument": {
                            "comment": "/**\n * Retrieves the document object of the page or frame.\n */"
                        },
                        "longDesc": {
                            "comment": "/**\n * Sets or retrieves a URI to a long description of the object.\n */"
                        }
                    }
                }
            },
            "HTMLQuoteElement": {
                "properties": {
                    "property": {
                        "cite": {
                            "comment": "/**\n * Sets or retrieves reference information about the object.\n */"
                        }
                    }
                }
            },
            "HTMLFrameSetElement": {
                "properties": {
                    "property": {
                        "rows": {
                            "comment": "/**\n * Sets or retrieves the frame heights of the object.\n */"
                        },
                        "cols": {
                            "comment": "/**\n * Sets or retrieves the frame widths of the object.\n */"
                        }
                    }
                }
            },
            "HTMLLabelElement": {
                "properties": {
                    "property": {
                        "htmlFor": {
                            "comment": "/**\n * Sets or retrieves the object to which the given label object is assigned.\n */"
                        },
                        "form": {
                            "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
                        }
                    }
                }
            },
            "HTMLLegendElement": {
                "properties": {
                    "property": {
                        "form": {
                            "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
                        }
                    }
                }
            },
            "HTMLLIElement": {
                "properties": {
                    "property": {
                        "value": {
                            "comment": "/**\n * Sets or retrieves the value of a list item.\n */"
                        }
                    }
                }
            },
            "HTMLIFrameElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Sets or retrieves the width of the object.\n */"
                        },
                        "scrolling": {
                            "comment": "/**\n * Sets or retrieves whether the frame can be scrolled.\n */"
                        },
                        "marginHeight": {
                            "comment": "/**\n * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\n */"
                        },
                        "marginWidth": {
                            "comment": "/**\n * Sets or retrieves the left and right margin widths before displaying the text in a frame.\n */"
                        },
                        "frameBorder": {
                            "comment": "/**\n * Sets or retrieves whether to display a border for the frame.\n */"
                        },
                        "contentWindow": {
                            "comment": "/**\n * Retrieves the object of the specified.\n */"
                        },
                        "align": {
                            "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
                        },
                        "src": {
                            "comment": "/**\n * Sets or retrieves a URL to be loaded by the object.\n */"
                        },
                        "srcdoc": {
                            "comment": "/**\n * Sets or retrives the content of the page that is to contain.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the frame name.\n */"
                        },
                        "height": {
                            "comment": "/**\n * Sets or retrieves the height of the object.\n */"
                        },
                        "contentDocument": {
                            "comment": "/**\n * Retrieves the document object of the page or frame.\n */"
                        },
                        "longDesc": {
                            "comment": "/**\n * Sets or retrieves a URI to a long description of the object.\n */"
                        }
                    }
                }
            },
            "HTMLTableSectionElement": {
                "properties": {
                    "property": {
                        "align": {
                            "comment": "/**\n * Sets or retrieves a value that indicates the table alignment.\n */"
                        },
                        "rows": {
                            "comment": "/**\n * Sets or retrieves the number of horizontal rows contained in the object.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "deleteRow": {
                            "comment": "/**\n * Removes the specified row (tr) from the element and from the rows collection.\n * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\n */"
                        },
                        "insertRow": {
                            "comment": "/**\n * Creates a new row (tr) in the table, and adds the row to the rows collection.\n * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\n */"
                        }
                    }
                }
            },
            "HTMLInputElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Sets or retrieves the width of the object.\n */"
                        },
                        "form": {
                            "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
                        },
                        "selectionStart": {
                            "comment": "/**\n * Gets or sets the starting position or offset of a text selection.\n */"
                        },
                        "selectionEnd": {
                            "comment": "/**\n * Gets or sets the end position or offset of a text selection.\n */"
                        },
                        "accept": {
                            "comment": "/**\n * Sets or retrieves a comma-separated list of content types.\n */"
                        },
                        "alt": {
                            "comment": "/**\n * Sets or retrieves a text alternative to the graphic.\n */"
                        },
                        "defaultChecked": {
                            "comment": "/**\n * Sets or retrieves the state of the check box or radio button.\n */"
                        },
                        "align": {
                            "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
                        },
                        "value": {
                            "comment": "/**\n * Returns the value of the data at the cursor's current position.\n */"
                        },
                        "valueAsDate": {
                            "comment": "/**\n * Returns a Date object representing the form control's value, if applicable; otherwise, returns null. Can be set, to change the value. Throws an \"InvalidStateError\" DOMException if the control isn't date- or time-based.\n */"
                        },
                        "src": {
                            "comment": "/**\n * The address or URL of the a media resource that is to be considered.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the name of the object.\n */"
                        },
                        "useMap": {
                            "comment": "/**\n * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n */"
                        },
                        "height": {
                            "comment": "/**\n * Sets or retrieves the height of the object.\n */"
                        },
                        "checked": {
                            "comment": "/**\n * Sets or retrieves the state of the check box or radio button.\n */"
                        },
                        "maxLength": {
                            "comment": "/**\n * Sets or retrieves the maximum number of characters that the user can enter in a text control.\n */"
                        },
                        "type": {
                            "comment": "/**\n * Returns the content type of the object.\n */"
                        },
                        "defaultValue": {
                            "comment": "/**\n * Sets or retrieves the initial contents of the object.\n */"
                        },
                        "validationMessage": {
                            "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
                        },
                        "files": {
                            "comment": "/**\n * Returns a FileList object on a file type input object.\n */"
                        },
                        "max": {
                            "comment": "/**\n * Defines the maximum acceptable value for an input element with type=\"number\".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.\n */"
                        },
                        "formTarget": {
                            "comment": "/**\n * Overrides the target attribute on a form element.\n */"
                        },
                        "willValidate": {
                            "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
                        },
                        "step": {
                            "comment": "/**\n * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.\n */"
                        },
                        "required": {
                            "comment": "/**\n * When present, marks an element that can't be submitted without a value.\n */"
                        },
                        "formEnctype": {
                            "comment": "/**\n * Used to override the encoding (formEnctype attribute) specified on the form element.\n */"
                        },
                        "valueAsNumber": {
                            "comment": "/**\n * Returns the input field value as a number.\n */"
                        },
                        "placeholder": {
                            "comment": "/**\n * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\n */"
                        },
                        "formMethod": {
                            "comment": "/**\n * Overrides the submit method attribute previously specified on a form element.\n */"
                        },
                        "list": {
                            "comment": "/**\n * Specifies the ID of a pre-defined datalist of options for an input element.\n */"
                        },
                        "autocomplete": {
                            "comment": "/**\n * Specifies whether autocomplete is applied to an editable text field.\n */"
                        },
                        "min": {
                            "comment": "/**\n * Defines the minimum acceptable value for an input element with type=\"number\". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.\n */"
                        },
                        "formAction": {
                            "comment": "/**\n * Overrides the action attribute (where the data on a form is sent) on the parent form element.\n */"
                        },
                        "pattern": {
                            "comment": "/**\n * Gets or sets a string containing a regular expression that the user's input must match.\n */"
                        },
                        "validity": {
                            "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
                        },
                        "formNoValidate": {
                            "comment": "/**\n * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\n */"
                        },
                        "multiple": {
                            "comment": "/**\n * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "setSelectionRange": {
                            "comment": "/**\n * Sets the start and end positions of a selection in a text field.\n * @param start The offset into the text field for the start of the selection.\n * @param end The offset into the text field for the end of the selection.\n * @param direction The direction in which the selection is performed.\n */"
                        },
                        "select": {
                            "comment": "/**\n * Makes the selection equal to the current object.\n */"
                        },
                        "checkValidity": {
                            "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
                        },
                        "stepDown": {
                            "comment": "/**\n * Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.\n * @param n Value to decrement the value by.\n */"
                        },
                        "stepUp": {
                            "comment": "/**\n * Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.\n * @param n Value to increment the value by.\n */"
                        },
                        "setCustomValidity": {
                            "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
                        }
                    }
                }
            },
            "HTMLAnchorElement": {
                "properties": {
                    "property": {
                        "rel": {
                            "comment": "/**\n * Sets or retrieves the relationship between the object and the destination of the link.\n */"
                        },
                        "coords": {
                            "comment": "/**\n * Sets or retrieves the coordinates of the object.\n */"
                        },
                        "target": {
                            "comment": "/**\n * Sets or retrieves the window or frame at which to target content.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the shape of the object.\n */"
                        },
                        "charset": {
                            "comment": "/**\n * Sets or retrieves the character set used to encode the object.\n */"
                        },
                        "hreflang": {
                            "comment": "/**\n * Sets or retrieves the language code of the object.\n */"
                        },
                        "rev": {
                            "comment": "/**\n * Sets or retrieves the relationship between the object and the destination of the link.\n */"
                        },
                        "shape": {
                            "comment": "/**\n * Sets or retrieves the shape of the object.\n */"
                        },
                        "text": {
                            "comment": "/**\n * Retrieves or sets the text of the object as a string.\n */"
                        }
                    }
                }
            },
            "HTMLParamElement": {
                "properties": {
                    "property": {
                        "value": {
                            "comment": "/**\n * Sets or retrieves the value of an input parameter for an element.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the name of an input parameter for an element.\n */"
                        },
                        "type": {
                            "comment": "/**\n * Sets or retrieves the content type of the resource designated by the value attribute.\n */"
                        },
                        "valueType": {
                            "comment": "/**\n * Sets or retrieves the data type of the value attribute.\n */"
                        }
                    }
                }
            },
            "HTMLPreElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Sets or gets a value that you can use to implement your own width functionality for the object.\n */"
                        }
                    }
                }
            },
            "HTMLCanvasElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Gets or sets the width of a canvas element on a document.\n */"
                        },
                        "height": {
                            "comment": "/**\n * Gets or sets the height of a canvas element on a document.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "toDataURL": {
                            "comment": "/**\n * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.\n * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.\n */"
                        },
                        "getContext": {
                            "comment": "/**\n * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.\n * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext(\"2d\"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext(\"experimental-webgl\");\n */"
                        }
                    }
                }
            },
            "HTMLTitleElement": {
                "properties": {
                    "property": {
                        "text": {
                            "comment": "/**\n * Retrieves or sets the text of the object as a string.\n */"
                        }
                    }
                }
            },
            "HTMLStyleElement": {
                "properties": {
                    "property": {
                        "media": {
                            "comment": "/**\n * Sets or retrieves the media type.\n */"
                        },
                        "type": {
                            "comment": "/**\n * Retrieves the CSS language in which the style sheet is written.\n */"
                        }
                    }
                }
            },
            "HTMLTableCellElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Sets or retrieves the width of the object.\n */"
                        },
                        "headers": {
                            "comment": "/**\n * Sets or retrieves a list of header cells that provide information for the object.\n */"
                        },
                        "cellIndex": {
                            "comment": "/**\n * Retrieves the position of the object in the cells collection of a row.\n */"
                        },
                        "align": {
                            "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
                        },
                        "colSpan": {
                            "comment": "/**\n * Sets or retrieves the number columns in the table that the object should span.\n */"
                        },
                        "axis": {
                            "comment": "/**\n * Sets or retrieves a comma-delimited list of conceptual categories associated with the object.\n */"
                        },
                        "height": {
                            "comment": "/**\n * Sets or retrieves the height of the object.\n */"
                        },
                        "noWrap": {
                            "comment": "/**\n * Sets or retrieves whether the browser automatically performs wordwrap.\n */"
                        },
                        "abbr": {
                            "comment": "/**\n * Sets or retrieves abbreviated text for the object.\n */"
                        },
                        "rowSpan": {
                            "comment": "/**\n * Sets or retrieves how many rows in a table the cell should span.\n */"
                        },
                        "scope": {
                            "comment": "/**\n * Sets or retrieves the group of cells in a table to which the object's information applies.\n */"
                        }
                    }
                }
            },
            "HTMLBaseFontElement": {
                "properties": {
                    "property": {
                        "face": {
                            "comment": "/**\n * Sets or retrieves the current typeface family.\n */"
                        },
                        "size": {
                            "comment": "/**\n * Sets or retrieves the font size of the object.\n */"
                        }
                    }
                }
            },
            "HTMLTextAreaElement": {
                "properties": {
                    "property": {
                        "value": {
                            "comment": "/**\n * Retrieves or sets the text in the entry field of the textArea element.\n */"
                        },
                        "form": {
                            "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the name of the object.\n */"
                        },
                        "selectionStart": {
                            "comment": "/**\n * Gets or sets the starting position or offset of a text selection.\n */"
                        },
                        "rows": {
                            "comment": "/**\n * Sets or retrieves the number of horizontal rows contained in the object.\n */"
                        },
                        "cols": {
                            "comment": "/**\n * Sets or retrieves the width of the object.\n */"
                        },
                        "readOnly": {
                            "comment": "/**\n * Sets or retrieves the value indicated whether the content of the object is read-only.\n */"
                        },
                        "wrap": {
                            "comment": "/**\n * Sets or retrieves how to handle wordwrapping in the object.\n */"
                        },
                        "selectionEnd": {
                            "comment": "/**\n * Gets or sets the end position or offset of a text selection.\n */"
                        },
                        "type": {
                            "comment": "/**\n * Retrieves the type of control.\n */"
                        },
                        "defaultValue": {
                            "comment": "/**\n * Sets or retrieves the initial contents of the object.\n */"
                        },
                        "validationMessage": {
                            "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
                        },
                        "validity": {
                            "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
                        },
                        "required": {
                            "comment": "/**\n * When present, marks an element that can't be submitted without a value.\n */"
                        },
                        "maxLength": {
                            "comment": "/**\n * Sets or retrieves the maximum number of characters that the user can enter in a text control.\n */"
                        },
                        "willValidate": {
                            "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
                        },
                        "placeholder": {
                            "comment": "/**\n * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "setSelectionRange": {
                            "comment": "/**\n * Sets the start and end positions of a selection in a text field.\n * @param start The offset into the text field for the start of the selection.\n * @param end The offset into the text field for the end of the selection.\n * @param direction The direction in which the selection is performed.\n */"
                        },
                        "select": {
                            "comment": "/**\n * Highlights the input area of a form element.\n */"
                        },
                        "checkValidity": {
                            "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
                        },
                        "setCustomValidity": {
                            "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
                        }
                    }
                }
            },
            "HTMLModElement": {
                "properties": {
                    "property": {
                        "dateTime": {
                            "comment": "/**\n * Sets or retrieves the date and time of a modification to the object.\n */"
                        },
                        "cite": {
                            "comment": "/**\n * Sets or retrieves reference information about the object.\n */"
                        }
                    }
                }
            },
            "HTMLTableColElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Sets or retrieves the width of the object.\n */"
                        },
                        "align": {
                            "comment": "/**\n * Sets or retrieves the alignment of the object relative to the display or table.\n */"
                        },
                        "span": {
                            "comment": "/**\n * Sets or retrieves the number of columns in the group.\n */"
                        }
                    }
                }
            },
            "HTMLDivElement": {
                "properties": {
                    "property": {
                        "align": {
                            "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
                        }
                    }
                }
            },
            "HTMLBRElement": {
                "properties": {
                    "property": {
                        "clear": {
                            "comment": "/**\n * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.\n */"
                        }
                    }
                }
            },
            "HTMLHeadingElement": {
                "properties": {
                    "property": {
                        "align": {
                            "comment": "/**\n * Sets or retrieves a value that indicates the table alignment.\n */"
                        }
                    }
                }
            },
            "HTMLFormElement": {
                "properties": {
                    "property": {
                        "length": {
                            "comment": "/**\n * Sets or retrieves the number of objects in a collection.\n */"
                        },
                        "target": {
                            "comment": "/**\n * Sets or retrieves the window or frame at which to target content.\n */"
                        },
                        "acceptCharset": {
                            "comment": "/**\n * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.\n */"
                        },
                        "enctype": {
                            "comment": "/**\n * Sets or retrieves the encoding type for the form.\n */"
                        },
                        "elements": {
                            "comment": "/**\n * Retrieves a collection, in source order, of all controls in a given form.\n */"
                        },
                        "action": {
                            "comment": "/**\n * Sets or retrieves the URL to which the form content is sent for processing.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the name of the object.\n */"
                        },
                        "method": {
                            "comment": "/**\n * Sets or retrieves how to send the form data to the server.\n */"
                        },
                        "encoding": {
                            "comment": "/**\n * Sets or retrieves the MIME encoding for the form.\n */"
                        },
                        "autocomplete": {
                            "comment": "/**\n * Specifies whether autocomplete is applied to an editable text field.\n */"
                        },
                        "noValidate": {
                            "comment": "/**\n * Designates a form that is not validated when submitted.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "reset": {
                            "comment": "/**\n * Fires when the user resets a form.\n */"
                        },
                        "submit": {
                            "comment": "/**\n * Fires when a FORM is about to be submitted.\n */"
                        },
                        "checkValidity": {
                            "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
                        }
                    }
                }
            },
            "HTMLMediaElement": {
                "properties": {
                    "property": {
                        "played": {
                            "comment": "/**\n * Gets TimeRanges for the current media resource that has been played.\n */"
                        },
                        "currentSrc": {
                            "comment": "/**\n * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.\n */"
                        },
                        "loop": {
                            "comment": "/**\n * Gets or sets a flag to specify whether playback should restart after it completes.\n */"
                        },
                        "ended": {
                            "comment": "/**\n * Gets information about whether the playback has ended or not.\n */"
                        },
                        "buffered": {
                            "comment": "/**\n * Gets a collection of buffered time ranges.\n */"
                        },
                        "error": {
                            "comment": "/**\n * Returns an object representing the current error state of the audio or video element.\n */"
                        },
                        "seekable": {
                            "comment": "/**\n * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.\n */"
                        },
                        "autoplay": {
                            "comment": "/**\n * Gets or sets a value that indicates whether to start playing the media automatically.\n */"
                        },
                        "controls": {
                            "comment": "/**\n * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).\n */"
                        },
                        "volume": {
                            "comment": "/**\n * Gets or sets the volume level for audio portions of the media element.\n */"
                        },
                        "src": {
                            "comment": "/**\n * The address or URL of the a media resource that is to be considered.\n */"
                        },
                        "playbackRate": {
                            "comment": "/**\n * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.\n */"
                        },
                        "duration": {
                            "comment": "/**\n * Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.\n */"
                        },
                        "muted": {
                            "comment": "/**\n * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.\n */"
                        },
                        "defaultPlaybackRate": {
                            "comment": "/**\n * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.\n */"
                        },
                        "paused": {
                            "comment": "/**\n * Gets a flag that specifies whether playback is paused.\n */"
                        },
                        "seeking": {
                            "comment": "/**\n * Gets a flag that indicates whether the client is currently moving to a new playback position in the media resource.\n */"
                        },
                        "currentTime": {
                            "comment": "/**\n * Gets or sets the current playback position, in seconds.\n */"
                        },
                        "preload": {
                            "comment": "/**\n * Gets or sets the current playback position, in seconds.\n */"
                        },
                        "networkState": {
                            "comment": "/**\n * Gets the current network activity for the element.\n */"
                        },
                        "msAudioCategory": {
                            "comment": "/**\n * Specifies the purpose of the audio or video media, such as background audio or alerts.\n */"
                        },
                        "msRealTime": {
                            "comment": "/**\n * Specifies whether or not to enable low-latency playback on the media element.\n */"
                        },
                        "msPlayToPrimary": {
                            "comment": "/**\n * Gets or sets the primary DLNA PlayTo device.\n */"
                        },
                        "msPlayToDisabled": {
                            "comment": "/**\n * Gets or sets whether the DLNA PlayTo device is available.\n */"
                        },
                        "audioTracks": {
                            "comment": "/**\n * Returns an AudioTrackList object with the audio tracks for a given video element.\n */"
                        },
                        "msPlayToSource": {
                            "comment": "/**\n * Gets the source associated with the media element for use by the PlayToManager.\n */"
                        },
                        "msAudioDeviceType": {
                            "comment": "/**\n * Specifies the output device id that the audio will be sent to.\n */"
                        },
                        "msPlayToPreferredSourceUri": {
                            "comment": "/**\n * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\n */"
                        },
                        "msKeys": {
                            "comment": "/**\n * Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "pause": {
                            "comment": "/**\n * Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not.\n */"
                        },
                        "play": {
                            "comment": "/**\n * Loads and starts playback of a media resource.\n */"
                        },
                        "load": {
                            "comment": "/**\n * Resets the audio or video object and loads a new media resource.\n */"
                        },
                        "canPlayType": {
                            "comment": "/**\n * Returns a string that specifies whether the client can play a given media resource type.\n */"
                        },
                        "msClearEffects": {
                            "comment": "/**\n * Clears all effects from the media pipeline.\n */"
                        },
                        "msSetMediaProtectionManager": {
                            "comment": "/**\n * Specifies the media protection manager for a given media pipeline.\n */"
                        },
                        "msInsertAudioEffect": {
                            "comment": "/**\n * Inserts the specified audio effect into media pipeline.\n */"
                        }
                    }
                }
            },
            "HTMLFieldSetElement": {
                "properties": {
                    "property": {
                        "form": {
                            "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
                        },
                        "validationMessage": {
                            "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
                        },
                        "validity": {
                            "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
                        },
                        "willValidate": {
                            "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "checkValidity": {
                            "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
                        },
                        "setCustomValidity": {
                            "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
                        }
                    }
                }
            },
            "HTMLHRElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Sets or retrieves the width of the object.\n */"
                        },
                        "align": {
                            "comment": "/**\n * Sets or retrieves how the object is aligned with adjacent text.\n */"
                        },
                        "noShade": {
                            "comment": "/**\n * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.\n */"
                        }
                    }
                }
            },
            "HTMLObjectElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Sets or retrieves the width of the object.\n */"
                        },
                        "codeType": {
                            "comment": "/**\n * Sets or retrieves the Internet media type for the code associated with the object.\n */"
                        },
                        "form": {
                            "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
                        },
                        "code": {
                            "comment": "/**\n * Sets or retrieves the URL of the file containing the compiled Java class.\n */"
                        },
                        "archive": {
                            "comment": "/**\n * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\n */"
                        },
                        "standby": {
                            "comment": "/**\n * Sets or retrieves a message to be displayed while an object is loading.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the name of the object.\n */"
                        },
                        "useMap": {
                            "comment": "/**\n * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\n */"
                        },
                        "data": {
                            "comment": "/**\n * Sets or retrieves the URL that references the data of the object.\n */"
                        },
                        "height": {
                            "comment": "/**\n * Sets or retrieves the height of the object.\n */"
                        },
                        "contentDocument": {
                            "comment": "/**\n * Retrieves the document object of the page or frame.\n */"
                        },
                        "codeBase": {
                            "comment": "/**\n * Sets or retrieves the URL of the component.\n */"
                        },
                        "type": {
                            "comment": "/**\n * Sets or retrieves the MIME type of the object.\n */"
                        },
                        "validationMessage": {
                            "comment": "/**\n * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\n */"
                        },
                        "validity": {
                            "comment": "/**\n * Returns a  ValidityState object that represents the validity states of an element.\n */"
                        },
                        "willValidate": {
                            "comment": "/**\n * Returns whether an element will successfully validate based on forms validation rules and constraints.\n */"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "checkValidity": {
                            "comment": "/**\n * Returns whether a form will validate when it is submitted, without having to submit it.\n */"
                        },
                        "setCustomValidity": {
                            "comment": "/**\n * Sets a custom error message that is displayed when a form is submitted.\n * @param error Sets a custom error message that is displayed when a form is submitted.\n */"
                        }
                    }
                }
            },
            "HTMLEmbedElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Sets or retrieves the width of the object.\n */"
                        },
                        "src": {
                            "comment": "/**\n * Sets or retrieves a URL to be loaded by the object.\n */"
                        },
                        "name": {
                            "comment": "/**\n * Sets or retrieves the name of the object.\n */"
                        },
                        "height": {
                            "comment": "/**\n * Sets or retrieves the height of the object.\n */"
                        }
                    }
                }
            },
            "HTMLOptGroupElement": {
                "properties": {
                    "property": {
                        "form": {
                            "comment": "/**\n * Retrieves a reference to the form that the object is embedded in.\n */"
                        },
                        "label": {
                            "comment": "/**\n * Sets or retrieves a value that you can use to implement your own label functionality for the object.\n */"
                        }
                    }
                }
            },
            "HTMLVideoElement": {
                "properties": {
                    "property": {
                        "width": {
                            "comment": "/**\n * Gets or sets the width of the video element.\n */"
                        },
                        "videoWidth": {
                            "comment": "/**\n * Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.\n */"
                        },
                        "videoHeight": {
                            "comment": "/**\n * Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.\n */"
                        },
                        "height": {
                            "comment": "/**\n * Gets or sets the height of the video element.\n */"
                        },
                        "poster": {
                            "comment": "/**\n * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.\n */"
                        }
                    }
                }
            },
            "HTMLProgressElement": {
                "properties": {
                    "property": {
                        "value": {
                            "comment": "/**\n * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.\n */"
                        },
                        "max": {
                            "comment": "/**\n * Defines the maximum, or \"done\" value for a progress element.\n */"
                        },
                        "position": {
                            "comment": "/**\n * Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).\n */"
                        }
                    }
                }
            },
            "URLSearchParams": {
                "methods": {
                    "method": {
                        "append": {
                            "comment": "/**\n * Appends a specified key/value pair as a new search parameter.\n */"
                        },
                        "delete": {
                            "comment": "/**\n * Deletes the given search parameter, and its associated value, from the list of all search parameters.\n */"
                        },
                        "get": {
                            "comment": "/**\n * Returns the first value associated to the given search parameter.\n */"
                        },
                        "getAll": {
                            "comment": "/**\n * Returns all the values association with a given search parameter.\n */"
                        },
                        "has": {
                            "comment": "/**\n * Returns a Boolean indicating if such a search parameter exists.\n */"
                        },
                        "set": {
                            "comment": "/**\n * Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.\n */"
                        },
                        "toString": {
                            "comment": "/**\n * Returns a string containing a query string suitable for use in a URL. Does not include the question mark.\n */"
                        }
                    },
                    "constructor": "/**\n * Constructor returning a URLSearchParams object.\n */"
                },
                "iterator": {
                    "comments": {
                        "comment": {
                            "entries": "/**\n * Returns an array of key, value pairs for every entry in the search params.\n */",
                            "keys": "/**\n * Returns a list of keys in the search params.\n */",
                            "values": "/**\n * Returns a list of values in the search params.\n */"
                        }
                    }
                }
            }
        }
    }
}
