[
    {
        "kind": "interface",
        "name": "BroadcastChannel",
        "extends": "EventTarget",
        "constructorSignatures": ["new(name: string): BroadcastChannel"],
        "properties": [
            {
                "readonly": true,
                "name": "name",
                "type": "string"
            },
            {
                "name": "onmessage",
                "type": "(ev: MessageEvent) => any"
            },
            {
                "name": "onmessageerror",
                "type": "(ev: MessageEvent) => any"
            }
        ],
        "methods": [
            {
                "name": "close",
                "signatures": ["close(): void"]
            },
            {
                "name": "postMessage",
                "signatures": ["postMessage(message: any): void"]
            },
            {
                "name": "addEventListener",
                "signatures": [
		    "addEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, useCapture?: boolean): void",
		    "addEventListener(type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void"
		]
            }
        ]
    },
    {
        "kind": "interface",
        "name": "BroadcastChannelEventMap",
        "properties": [
            {
                "name": "message",
                "type": "MessageEvent"
            },
            {
                "name": "messageerror",
                "type": "MessageEvent"
            }
        ]
    },
    {
        "kind": "interface",
        "name": "ErrorEventInit",
        "properties": [
            {
                "name": "message?",
                "type": "string"
            },
            {
                "name": "filename?",
                "type": "string"
            },
            {
                "name": "lineno?",
                "type": "number"
            },
            {
                "name": "conlno?",
                "type": "number"
            },
            {
                "name": "error?",
                "type": "any"
            }
        ]
    },
    {
        "kind": "interface",
        "name": "Canvas2DContextAttributes",
        "flavor": "Web",
        "properties": [
            {
                "name": "alpha?",
                "type": "boolean"
            },
            {
                "name": "willReadFrequently?",
                "type": "boolean"
            },
            {
                "name": "storage?",
                "type": "boolean"
            },
            {
                "name": "[attribute: string]",
                "type": "boolean | string | undefined"
            }
        ]
    },
    {
        "kind": "interface",
        "name": "ImageBitmapOptions",
        "properties": [
            {
                "name": "imageOrientation?",
                "type": "\"none\" | \"flipY\""
            },
            {
                "name": "premultiplyAlpha?",
                "type": "\"none\" | \"premultiply\" | \"default\""
            },
            {
                "name": "colorSpaceConversion?",
                "type": "\"none\" | \"default\""
            },
            {
                "name": "resizeWidth?",
                "type": "number"
            },
            {
                "name": "resizeHeight?",
                "type": "number"
            },
            {
                "name": "resizeQuality?",
                "type": "\"pixelated\" | \"low\" | \"medium\" | \"high\""
            }
        ]
    },
    {
        "kind": "interface",
        "name": "ImageBitmap",
        "properties": [
            {
                "name": "width",
                "readonly": true,
                "type": "number"
            },
            {
                "name": "height",
                "readonly": true,
                "type": "number"
            }
        ],
        "methods": [
            {
                "name": "close",
                "signatures": ["close(): void"]
            }
        ]
    },
    {
        "kind": "method",
        "interface": "Window",
        "name": "createImageBitmap",
        "signatures": [
             "createImageBitmap(image: HTMLImageElement | SVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap | ImageData | Blob, options?: ImageBitmapOptions): Promise<ImageBitmap>",
             "createImageBitmap(image: HTMLImageElement | SVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap | ImageData | Blob, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>"
        ]
    },
    {
        "kind": "method",
        "interface": "WorkerGlobalScope",
        "name": "createImageBitmap",
        "signatures": [
             "createImageBitmap(image: ImageBitmap | ImageData | Blob, options?: ImageBitmapOptions): Promise<ImageBitmap>",
             "createImageBitmap(image: ImageBitmap | ImageData | Blob, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>"
        ]
    },
    {
        "kind": "property",
        "interface": "Window",
        "exposeGlobally": false,
        "name": "URLSearchParams",
        "type": "typeof URLSearchParams"
    },
    {
        "kind": "property",
        "interface": "Window",
        "exposeGlobally": false,
        "name": "Blob",
        "type": "typeof Blob"
    },
    {
        "kind": "interface",
        "name": "NodeListOf<TNode extends Node>",
        "flavor": "Web",
        "extends": "NodeList",
        "properties": [
            {
                "name": "length",
                "type": "number"
            }
        ],
        "methods": [
            {
                "name": "item",
                "signatures": ["item(index: number): TNode"]
            }
        ],
        "indexer": [
            {
                "signatures": ["[index: number]: TNode"]
            }
        ]
    },
    {
        "kind": "interface",
        "name": "HTMLCollectionOf<T extends Element>",
        "flavor": "Web",
        "extends": "HTMLCollection",
        "methods": [
            {
                "name": "item",
                "signatures": ["item(index: number): T"]
            },
            {
                "name": "namedItem",
                "signatures": ["namedItem(name: string): T"]
            }
        ],
        "indexer": [
            {
                "signatures": ["[index: number]: T"]
            }
        ]
    },
    {
        "kind": "interface",
        "name": "BlobPropertyBag",
        "properties": [
            {
                "name": "type?",
                "type": "string"
            },
            {
                "name": "endings?",
                "type": "string"
            }
        ]
    },
    {
        "kind": "interface",
        "name": "FilePropertyBag",
        "extends": "BlobPropertyBag",
        "properties": [
            {
                "name": "lastModified?",
                "type": "number"
            }
        ]
    },
    {
        "kind": "interface",
        "name": "EventListenerObject",
        "methods": [
            {
                "name": "handleEvent",
                "signatures": ["handleEvent(evt: Event): void"]
            }
        ]
    },
    {
        "kind": "property",
        "interface": "MessageEventInit",
        "name": "channel?",
        "type": "string"
    },
    {
        "kind": "interface",
        "name": "ProgressEventInit",
        "extends": "EventInit",
        "properties": [
            {
                "name": "lengthComputable?",
                "type": "boolean"
            },
            {
                "name": "loaded?",
                "type": "number"
            },
            {
                "name": "total?",
                "type": "number"
            }
        ]
    },
    {
        "kind": "method",
        "interface": "Element",
        "signatures": ["getElementsByClassName(classNames: string): NodeListOf<Element>"]
    },
    {
        "kind": "method",
        "interface": "Element",
        "signatures": ["matches(selector: string): boolean"]
    },
    {
        "kind": "method",
        "interface": "Element",
        "signatures": [ "closest(selector: string): Element | null" ]
    },
    {
        "kind": "signatureoverload",
        "name": "createElementNS",
        "interface": "Document",
        "signatures": [
            "createElementNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", qualifiedName: string): HTMLElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"a\"): SVGAElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"circle\"): SVGCircleElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"clipPath\"): SVGClipPathElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"componentTransferFunction\"): SVGComponentTransferFunctionElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"defs\"): SVGDefsElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"desc\"): SVGDescElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"ellipse\"): SVGEllipseElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feBlend\"): SVGFEBlendElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feColorMatrix\"): SVGFEColorMatrixElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feComponentTransfer\"): SVGFEComponentTransferElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feComposite\"): SVGFECompositeElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feConvolveMatrix\"): SVGFEConvolveMatrixElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feDiffuseLighting\"): SVGFEDiffuseLightingElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feDisplacementMap\"): SVGFEDisplacementMapElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feDistantLight\"): SVGFEDistantLightElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFlood\"): SVGFEFloodElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncA\"): SVGFEFuncAElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncB\"): SVGFEFuncBElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncG\"): SVGFEFuncGElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feFuncR\"): SVGFEFuncRElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feGaussianBlur\"): SVGFEGaussianBlurElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feImage\"): SVGFEImageElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feMerge\"): SVGFEMergeElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feMergeNode\"): SVGFEMergeNodeElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feMorphology\"): SVGFEMorphologyElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feOffset\"): SVGFEOffsetElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"fePointLight\"): SVGFEPointLightElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feSpecularLighting\"): SVGFESpecularLightingElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feSpotLight\"): SVGFESpotLightElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feTile\"): SVGFETileElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"feTurbulence\"): SVGFETurbulenceElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"filter\"): SVGFilterElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"foreignObject\"): SVGForeignObjectElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"g\"): SVGGElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"image\"): SVGImageElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"gradient\"): SVGGradientElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"line\"): SVGLineElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"linearGradient\"): SVGLinearGradientElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"marker\"): SVGMarkerElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"mask\"): SVGMaskElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"path\"): SVGPathElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"metadata\"): SVGMetadataElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"pattern\"): SVGPatternElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"polygon\"): SVGPolygonElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"polyline\"): SVGPolylineElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"radialGradient\"): SVGRadialGradientElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"rect\"): SVGRectElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"svg\"): SVGSVGElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"script\"): SVGScriptElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"stop\"): SVGStopElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"style\"): SVGStyleElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"switch\"): SVGSwitchElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"symbol\"): SVGSymbolElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"tspan\"): SVGTSpanElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"textContent\"): SVGTextContentElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"text\"): SVGTextElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"textPath\"): SVGTextPathElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"textPositioning\"): SVGTextPositioningElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"title\"): SVGTitleElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"use\"): SVGUseElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: \"view\"): SVGViewElement",
            "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: string): SVGElement"
        ]
    },
    {
        "kind": "method",
        "interface": "Navigator",
        "signatures": [
            "vibrate(pattern: number | number[]): boolean"
        ]
    },
    {
        "kind": "property",
        "interface": "Navigator",
        "name": "hardwareConcurrency",
        "readonly": true,
        "type": "number"
    },
    {
        "kind": "property",
        "interface": "Navigator",
        "name": "languages",
        "readonly": true,
        "type": "string[]"
    },
    {
        "kind": "property",
        "interface": "WorkerNavigator",
        "name": "hardwareConcurrency",
        "readonly": true,
        "type": "number"
    },
    {
        "kind": "property",
        "interface": "HTMLLinkElement",
        "name": "import?",
        "type": "Document"
    },
    {
        "kind": "method",
        "interface": "HTMLCanvasElement",
        "name": "toBlob",
        "signatures": ["toBlob(callback: (result: Blob | null) => void, type?: string, ...arguments: any[]): void"]
    },
    {
        "kind": "property",
        "interface": "StorageEvent",
        "name": "key?",
        "type": "string"
    },
    {
        "kind": "property",
        "interface": "StorageEvent",
        "name": "oldValue?",
        "type": "string"
    },
    {
        "kind": "property",
        "interface": "StorageEvent",
        "name": "newValue?",
        "type": "string"
    },
    {
        "kind": "property",
        "interface": "StorageEvent",
        "name": "storageArea?",
        "type": "Storage"
    },
    {
        "kind": "interface",
        "flavor": "Web",
        "name": "ClipboardEventInit",
        "extends": "EventInit",
        "properties": [
            {
                "name": "data?",
                "type": "string"
            },
            {
                "name": "dataType?",
                "type": "string"
            }
        ]
    },
    {
        "kind": "typedef",
        "name": "IDBValidKey",
        "type": "number | string | Date | IDBArrayKey"
    },
    {
        "kind": "interface",
        "name": "IDBArrayKey",
        "extends": "Array<IDBValidKey>"
    },
    {
        "kind": "method",
        "interface": "IDBDatabase",
        "name": "addEventListener",
        "signatures": ["addEventListener(type: \"versionchange\", listener: (ev: IDBVersionChangeEvent) => any, useCapture?: boolean): void"]
    },
    {
        "kind": "property",
        "interface": "CanvasRenderingContext2D",
        "name": "mozImageSmoothingEnabled",
        "type": "boolean"
    },
    {
        "kind": "property",
        "interface": "CanvasRenderingContext2D",
        "name": "webkitImageSmoothingEnabled",
        "type": "boolean"
    },
    {
        "kind": "property",
        "interface": "CanvasRenderingContext2D",
        "name": "oImageSmoothingEnabled",
        "type": "boolean"
    },
    {
        "kind": "property",
        "name": "msCaching?",
        "interface": "XMLHttpRequest",
        "type": "string"
    },
    {
        "kind": "typedef",
        "name": "MouseWheelEvent",
        "flavor": "Web",
        "type": "WheelEvent"
    },
    {
        "kind": "method",
        "interface": "Element",
        "name": "insertAdjacentElement",
        "signatures": ["insertAdjacentElement(position: string, insertedElement: Element): Element | null"]
    },
    {
        "kind": "method",
        "interface": "Element",
        "name": "insertAdjacentHTML",
        "signatures": ["insertAdjacentHTML(where: string, html: string): void"]
    },
    {
        "kind": "method",
        "interface": "Element",
        "name": "insertAdjacentText",
        "signatures": ["insertAdjacentText(where: string, text: string): void"]
    },
    {
        "kind": "interface",
        "name": "ParentNode",
        "flavor": "DOM",
        "properties": [
            {
                "name": "children",
                "readonly": true,
                "type": "HTMLCollection"
            },
            {
                "name": "firstElementChild",
                "readonly": true,
                "type": "Element | null"
            },
            {
                "name": "lastElementChild",
                "readonly": true,
                "type": "Element | null"
            },
            {
                "name": "childElementCount",
                "readonly": true,
                "type": "number"
            }
        ]
    },
    {
        "kind": "extends",
        "baseInterface": "ParentNode",
        "interface": "Element"
    },
    {
        "kind": "extends",
        "baseInterface": "ParentNode",
        "interface": "Document"
    },
    {
        "kind": "extends",
        "baseInterface": "ParentNode",
        "interface": "DocumentFragment"
    },
    {
        "kind": "interface",
        "name": "DocumentOrShadowRoot",
        "flavor": "Web",
        "methods": [
            {
                "name": "getSelection",
                "signatures": ["getSelection(): Selection | null"]
            },
            {
                "name": "elementFromPoint",
                "signatures": ["elementFromPoint(x: number, y: number): Element | null"]
            },
            {
                "name": "elementsFromPoint",
                "signatures": ["elementsFromPoint(x: number, y: number): Element[]"]
            }
        ],
        "properties": [
            {
                "name": "activeElement",
                "type": "Element | null",
                "readonly": true
            },
            {
                "name": "stylesheets",
                "type": "StyleSheetList",
                "readonly": true
            }
        ]
    },
    {
        "kind": "interface",
        "name": "ShadowRoot",
        "extends": "DocumentOrShadowRoot, DocumentFragment",
        "flavor": "Web",
        "properties": [
            {
                "name": "host",
                "type": "Element",
                "readonly": true
            },
            {
                "name": "innerHTML",
                "type": "string"
            }
        ]
    },
    {
        "kind": "method",
        "interface": "Element",
        "name": "attachShadow",
        "signatures": ["attachShadow(shadowRootInitDict: ShadowRootInit): ShadowRoot"]
    },
    {
        "kind": "property",
        "interface": "Element",
        "name": "assignedSlot",
        "type": "HTMLSlotElement | null",
        "readonly": true
    },
    {
        "kind": "property",
        "interface": "Text",
        "name": "assignedSlot",
        "type": "HTMLSlotElement | null",
        "readonly": true
    },
    {
        "kind": "interface",
        "name": "HTMLSlotElement",
        "extends": "HTMLElement",
        "flavor": "Web",
        "properties": [
            {
                "name": "name",
                "type": "string"
            }
        ],
        "methods": [
            {
                "name": "assignedNodes",
                "signatures": ["assignedNodes(options?: AssignedNodesOptions): Node[]"]
            }
        ]
    },
    {
        "kind": "interface",
        "name": "AssignedNodesOptions",
        "flavor": "Web",
        "properties": [
            {
                "name": "flatten?",
                "type": "boolean"
            }
        ]
    },
    {
        "kind": "property",
        "interface": "EventInit",
        "name": "scoped?",
        "type": "boolean"
    },
    {
        "kind": "property",
        "interface": "Event",
        "name": "scoped",
        "type": "boolean",
        "readonly": true
    },
    {
        "kind": "method",
        "interface": "Event",
        "name": "deepPath",
        "signatures": ["deepPath(): EventTarget[]"]
    },
    {
        "kind": "method",
        "interface": "Body",
        "name": "formData",
        "flavor": "Web",
        "signatures": ["formData(): Promise<FormData>"]
    },
    
    {
        "kind": "interface",
        "name": "DOMException",
        "extends": "Error",
        "properties": [
            {
                "name": "name",
                "type": "string",
                "readonly": true
            },
            {
                "name": "code",
                "type": "number",
                "readonly": true
            }
        ],
        "constructorSignatures": [
            "new (message?: string, name?: string): DOMException"
        ],
        "constants": [
            {
                "name": "INDEX_SIZE_ERR",
                "type": "number"
            },
            {
                "name": "DOMSTRING_SIZE_ERR",
                "type": "number"
            },
            {
                "name": "HIERARCHY_REQUEST_ERR",
                "type": "number"
            },
            {
                "name": "WRONG_DOCUMENT_ERR",
                "type": "number"
            },
            {
                "name": "INVALID_CHARACTER_ERR",
                "type": "number"
            },
            {
                "name": "NO_DATA_ALLOWED_ERR",
                "type": "number"
            },
            {
                "name": "NO_MODIFICATION_ALLOWED_ERR",
                "type": "number"
            },
            {
                "name": "NOT_FOUND_ERR",
                "type": "number"
            },
            {
                "name": "NOT_SUPPORTED_ERR",
                "type": "number"
            },
            {
                "name": "INUSE_ATTRIBUTE_ERR",
                "type": "number"
            },
            {
                "name": "INVALID_STATE_ERR",
                "type": "number"
            },
            {
                "name": "SYNTAX_ERR",
                "type": "number"
            },
            {
                "name": "INVALID_MODIFICATION_ERR",
                "type": "number"
            },
            {
                "name": "NAMESPACE_ERR",
                "type": "number"
            },
            {
                "name": "INVALID_ACCESS_ERR",
                "type": "number"
            },
            {
                "name": "VALIDATION_ERR",
                "type": "number"
            },
            {
                "name": "TYPE_MISMATCH_ERR",
                "type": "number"
            },
            {
                "name": "SECURITY_ERR",
                "type": "number"
            },
            {
                "name": "NETWORK_ERR",
                "type": "number"
            },
            {
                "name": "ABORT_ERR",
                "type": "number"
            },
            {
                "name": "URL_MISMATCH_ERR",
                "type": "number"
            },
            {
                "name": "QUOTA_EXCEEDED_ERR",
                "type": "number"
            },
            {
                "name": "TIMEOUT_ERR",
                "type": "number"
            },
            {
                "name": "INVALID_NODE_TYPE_ERR",
                "type": "number"
            },
            {
                "name": "DATA_CLONE_ERR",
                "type": "number"
            }
        ]
    }
]
