<webidl-xml name="WHATWG/W3C Web Platform" original-file="null" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://schemas.microsoft.com/ie/webidl-xml webidl-xml-schema.xsd" xmlns:sn="http://saschanaz.github.io/ts/webidl-xml-ext/" xmlns="http://schemas.microsoft.com/ie/webidl-xml">
  <callback-functions>
    <callback-function name="BlobCallback" callback="1" type="void">
      <param name="blob" nullable="1" type="Blob"/>
    </callback-function>
    <callback-function name="DecodeErrorCallback" callback="1" type="void">
      <param name="error" type="DOMException"/>
    </callback-function>
    <callback-function name="DecodeSuccessCallback" callback="1" type="void">
      <param name="decodedData" type="AudioBuffer"/>
    </callback-function>
    <callback-function name="EventHandlerNonNull" callback="1" type="any">
      <param name="event" type="Event"/>
    </callback-function>
    <callback-function name="FrameRequestCallback" callback="1" type="void">
      <param name="time" type="DOMHighResTimeStamp"/>
    </callback-function>
    <callback-function name="Function" callback="1" type="any">
      <param name="arguments" type="any" variadic="1"/>
    </callback-function>
    <callback-function name="FunctionStringCallback" callback="1" type="void">
      <param name="data" type="DOMString"/>
    </callback-function>
    <callback-function name="GenerateAssertionCallback" callback="1" type="Promise&lt;RTCIdentityAssertionResult&gt;">
      <param name="contents" type="DOMString"/>
      <param name="origin" type="DOMString"/>
      <param name="options" type="RTCIdentityProviderOptions"/>
    </callback-function>
    <callback-function name="IntersectionObserverCallback" callback="1" type="void">
      <param name="entries" type="sequence&lt;IntersectionObserverEntry&gt;"/>
      <param name="observer" type="IntersectionObserver"/>
    </callback-function>
    <callback-function name="MutationCallback" callback="1" type="void">
      <param name="mutations" type="sequence&lt;MutationRecord&gt;"/>
      <param name="observer" type="MutationObserver"/>
    </callback-function>
    <callback-function name="NavigatorUserMediaErrorCallback" callback="1" type="void">
      <param name="error" type="MediaStreamError"/>
    </callback-function>
    <callback-function name="NavigatorUserMediaSuccessCallback" callback="1" type="void">
      <param name="stream" type="MediaStream"/>
    </callback-function>
    <callback-function name="NotificationPermissionCallback" callback="1" type="void">
      <param name="permission" type="NotificationPermission"/>
    </callback-function>
    <callback-function name="OnBeforeUnloadEventHandlerNonNull" callback="1" nullable="1" type="DOMString">
      <param name="event" type="Event"/>
    </callback-function>
    <callback-function name="OnErrorEventHandlerNonNull" callback="1" type="any">
      <param name="event" type="(Event or DOMString)"/>
      <param name="source" optional="1" type="DOMString"/>
      <param name="lineno" optional="1" type="unsigned long"/>
      <param name="colno" optional="1" type="unsigned long"/>
      <param name="error" optional="1" type="any"/>
    </callback-function>
    <callback-function name="PerformanceObserverCallback" callback="1" type="void">
      <param name="entries" type="PerformanceObserverEntryList"/>
      <param name="observer" type="PerformanceObserver"/>
    </callback-function>
    <callback-function name="PositionCallback" callback="1" type="void">
      <param name="position" type="Position"/>
    </callback-function>
    <callback-function name="PositionErrorCallback" callback="1" type="void">
      <param name="positionError" type="PositionError"/>
    </callback-function>
    <callback-function name="RTCPeerConnectionErrorCallback" callback="1" type="void">
      <param name="error" type="DOMException"/>
    </callback-function>
    <callback-function name="RTCSessionDescriptionCallback" callback="1" type="void">
      <param name="description" type="RTCSessionDescriptionInit"/>
    </callback-function>
    <callback-function name="ValidateAssertionCallback" callback="1" type="Promise&lt;RTCIdentityValidationResult&gt;">
      <param name="assertion" type="DOMString"/>
      <param name="origin" type="DOMString"/>
    </callback-function>
    <callback-function name="VoidFunction" callback="1" type="void"/>
  </callback-functions>
  <callback-interfaces>
    <interface name="EventListener" extends="Object">
      <methods>
        <method name="handleEvent" type="void">
          <param name="event" type="Event"/>
        </method>
      </methods>
    </interface>
    <interface name="NodeFilter" extends="Object" exposed="Window">
      <constants>
        <constant name="FILTER_ACCEPT" type="unsigned short" value="1"/>
        <constant name="FILTER_REJECT" type="unsigned short" value="2"/>
        <constant name="FILTER_SKIP" type="unsigned short" value="3"/>
        <constant name="SHOW_ALL" type="unsigned long" value="4294967295"/>
        <constant name="SHOW_ELEMENT" type="unsigned long" value="1"/>
        <constant name="SHOW_ATTRIBUTE" type="unsigned long" value="2"/>
        <constant name="SHOW_TEXT" type="unsigned long" value="4"/>
        <constant name="SHOW_CDATA_SECTION" type="unsigned long" value="8"/>
        <constant name="SHOW_ENTITY_REFERENCE" type="unsigned long" value="16"/>
        <constant name="SHOW_ENTITY" type="unsigned long" value="32"/>
        <constant name="SHOW_PROCESSING_INSTRUCTION" type="unsigned long" value="64"/>
        <constant name="SHOW_COMMENT" type="unsigned long" value="128"/>
        <constant name="SHOW_DOCUMENT" type="unsigned long" value="256"/>
        <constant name="SHOW_DOCUMENT_TYPE" type="unsigned long" value="512"/>
        <constant name="SHOW_DOCUMENT_FRAGMENT" type="unsigned long" value="1024"/>
        <constant name="SHOW_NOTATION" type="unsigned long" value="2048"/>
      </constants>
      <methods>
        <method name="acceptNode" type="unsigned short">
          <param name="node" type="Node"/>
        </method>
      </methods>
    </interface>
  </callback-interfaces>
  <dictionaries>
    <dictionary name="AddEventListenerOptions" extends="EventListenerOptions">
      <members>
        <member name="once" default="false" type="boolean"/>
        <member name="passive" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="AesCbcParams" extends="Algorithm">
      <members>
        <member name="iv" type="BufferSource" required="1"/>
      </members>
    </dictionary>
    <dictionary name="AesCtrParams" extends="Algorithm">
      <members>
        <member name="counter" type="BufferSource" required="1"/>
        <member name="length" type="octet" required="1"/>
      </members>
    </dictionary>
    <dictionary name="AesDerivedKeyParams" extends="Algorithm">
      <members>
        <member name="length" type="unsigned short" required="1"/>
      </members>
    </dictionary>
    <dictionary name="AesGcmParams" extends="Algorithm">
      <members>
        <member name="additionalData" type="BufferSource"/>
        <member name="iv" type="BufferSource" required="1"/>
        <member name="tagLength" type="octet"/>
      </members>
    </dictionary>
    <dictionary name="AesKeyAlgorithm" extends="KeyAlgorithm">
      <members>
        <member name="length" type="unsigned short" required="1"/>
      </members>
    </dictionary>
    <dictionary name="AesKeyGenParams" extends="Algorithm">
      <members>
        <member name="length" type="unsigned short" required="1"/>
      </members>
    </dictionary>
    <dictionary name="Algorithm" extends="Object">
      <members>
        <member name="name" type="DOMString" required="1"/>
      </members>
    </dictionary>
    <dictionary name="AnalyserOptions" extends="AudioNodeOptions">
      <members>
        <member name="fftSize" default="2048" type="unsigned long"/>
        <member name="maxDecibels" default="-30" type="double"/>
        <member name="minDecibels" default="-100" type="double"/>
        <member name="smoothingTimeConstant" default="0.8" type="double"/>
      </members>
    </dictionary>
    <dictionary name="AnimationEventInit" extends="EventInit">
      <members>
        <member name="animationName" default="&quot;&quot;" type="CSSOMString"/>
        <member name="elapsedTime" default="0" type="float"/>
        <member name="pseudoElement" default="&quot;&quot;" type="CSSOMString"/>
      </members>
    </dictionary>
    <dictionary name="AssignedNodesOptions" extends="Object">
      <members>
        <member name="flatten" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="AudioBufferOptions" extends="Object">
      <members>
        <member name="length" type="unsigned long" required="1"/>
        <member name="numberOfChannels" default="1" type="unsigned long"/>
        <member name="sampleRate" type="float" required="1"/>
      </members>
    </dictionary>
    <dictionary name="AudioBufferSourceOptions" extends="Object">
      <members>
        <member name="buffer" nullable="1" type="AudioBuffer"/>
        <member name="detune" default="0" type="float"/>
        <member name="loop" default="false" type="boolean"/>
        <member name="loopEnd" default="0" type="double"/>
        <member name="loopStart" default="0" type="double"/>
        <member name="playbackRate" default="1" type="float"/>
      </members>
    </dictionary>
    <dictionary name="AudioContextInfo" extends="Object">
      <members>
        <member name="currentTime" type="double"/>
        <member name="sampleRate" type="float"/>
      </members>
    </dictionary>
    <dictionary name="AudioContextOptions" extends="Object">
      <members>
        <member name="latencyHint" default="&quot;interactive&quot;" type="(AudioContextLatencyCategory or double)"/>
        <member name="sampleRate" type="float"/>
      </members>
    </dictionary>
    <dictionary name="AudioNodeOptions" extends="Object">
      <members>
        <member name="channelCount" type="unsigned long"/>
        <member name="channelCountMode" type="ChannelCountMode"/>
        <member name="channelInterpretation" type="ChannelInterpretation"/>
      </members>
    </dictionary>
    <dictionary name="AudioParamDescriptor" extends="Object">
      <members>
        <member name="defaultValue" default="0" type="float"/>
        <member name="maxValue" type="float"/>
        <member name="minValue" type="float"/>
        <member name="name" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="AudioProcessingEventInit" extends="EventInit">
      <members>
        <member name="inputBuffer" type="AudioBuffer" required="1"/>
        <member name="outputBuffer" type="AudioBuffer" required="1"/>
        <member name="playbackTime" type="double" required="1"/>
      </members>
    </dictionary>
    <dictionary name="AudioTimestamp" extends="Object">
      <members>
        <member name="contextTime" type="double"/>
        <member name="performanceTime" type="DOMHighResTimeStamp"/>
      </members>
    </dictionary>
    <dictionary name="AudioWorkletNodeOptions" extends="AudioNodeOptions">
      <members>
        <member name="numberOfInputs" type="unsigned long"/>
        <member name="numberOfOutputs" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="BiquadFilterOptions" extends="AudioNodeOptions">
      <members>
        <member name="detune" default="0" type="float"/>
        <member name="frequency" default="350" type="float"/>
        <member name="gain" default="0" type="float"/>
        <member name="Q" default="1" type="float"/>
        <member name="type" default="&quot;lowpass&quot;" type="BiquadFilterType"/>
      </members>
    </dictionary>
    <dictionary name="BlobPropertyBag" extends="Object">
      <members>
        <member name="type" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="BoxQuadOptions" extends="Object">
      <members>
        <member name="box" default="&quot;border&quot;" type="CSSBoxType"/>
        <member name="relativeTo" type="GeometryNode"/>
      </members>
    </dictionary>
    <dictionary name="CacheBatchOperation" extends="Object">
      <members>
        <member name="options" type="CacheQueryOptions"/>
        <member name="request" type="Request"/>
        <member name="response" type="Response"/>
        <member name="type" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="CacheQueryOptions" extends="Object">
      <members>
        <member name="cacheName" type="DOMString"/>
        <member name="ignoreMethod" default="false" type="boolean"/>
        <member name="ignoreSearch" default="false" type="boolean"/>
        <member name="ignoreVary" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="CanvasRenderingContext2DSettings" extends="Object">
      <members>
        <member name="alpha" default="true" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="Capabilities" extends="Object">
      <members/>
    </dictionary>
    <dictionary name="ChannelMergerOptions" extends="AudioNodeOptions">
      <members>
        <member name="numberOfInputs" default="6" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="ChannelSplitterOptions" extends="AudioNodeOptions">
      <members>
        <member name="numberOfOutputs" default="6" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="ClientQueryOptions" extends="Object">
      <members>
        <member name="includeReserved" default="false" type="boolean"/>
        <member name="includeUncontrolled" default="false" type="boolean"/>
        <member name="type" default="&quot;window&quot;" type="ClientType"/>
      </members>
    </dictionary>
    <dictionary name="ClipboardEventInit" extends="EventInit">
      <members>
        <member name="clipboardData" default="null" nullable="1" type="DataTransfer"/>
      </members>
    </dictionary>
    <dictionary name="CloseEventInit" extends="EventInit">
      <members>
        <member name="code" default="0" type="unsigned short"/>
        <member name="reason" default="&quot;&quot;" type="USVString"/>
        <member name="wasClean" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="CompositionEventInit" extends="UIEventInit">
      <members>
        <member name="data" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="ConstantSourceOptions" extends="Object">
      <members>
        <member name="offset" default="1" type="float"/>
      </members>
    </dictionary>
    <dictionary name="ConstrainBooleanParameters" extends="Object">
      <members>
        <member name="exact" type="boolean"/>
        <member name="ideal" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="ConstrainDOMStringParameters" extends="Object">
      <members>
        <member name="exact" type="(DOMString or sequence&lt;DOMString&gt;)"/>
        <member name="ideal" type="(DOMString or sequence&lt;DOMString&gt;)"/>
      </members>
    </dictionary>
    <dictionary name="ConstrainDoubleRange" extends="DoubleRange">
      <members>
        <member name="exact" type="double"/>
        <member name="ideal" type="double"/>
      </members>
    </dictionary>
    <dictionary name="ConstrainLongRange" extends="LongRange">
      <members>
        <member name="exact" type="long"/>
        <member name="ideal" type="long"/>
      </members>
    </dictionary>
    <dictionary name="Constraints" extends="ConstraintSet">
      <members>
        <member name="advanced" type="sequence&lt;ConstraintSet&gt;"/>
      </members>
    </dictionary>
    <dictionary name="ConstraintSet" extends="Object">
      <members/>
    </dictionary>
    <dictionary name="ConvertCoordinateOptions" extends="Object">
      <members>
        <member name="fromBox" default="&quot;border&quot;" type="CSSBoxType"/>
        <member name="toBox" default="&quot;border&quot;" type="CSSBoxType"/>
      </members>
    </dictionary>
    <dictionary name="ConvolverOptions" extends="AudioNodeOptions">
      <members>
        <member name="buffer" nullable="1" type="AudioBuffer"/>
        <member name="disableNormalization" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="CryptoKeyPair" extends="Object">
      <members>
        <member name="privateKey" type="CryptoKey"/>
        <member name="publicKey" type="CryptoKey"/>
      </members>
    </dictionary>
    <dictionary name="CustomEventInit" extends="EventInit">
      <members>
        <member name="detail" default="null" type="any"/>
      </members>
    </dictionary>
    <dictionary name="DelayOptions" extends="AudioNodeOptions">
      <members>
        <member name="delayTime" default="0" type="double"/>
        <member name="maxDelayTime" default="1" type="double"/>
      </members>
    </dictionary>
    <dictionary name="DeviceAccelerationInit" extends="Object">
      <members>
        <member name="x" default="null" nullable="1" type="double"/>
        <member name="y" default="null" nullable="1" type="double"/>
        <member name="z" default="null" nullable="1" type="double"/>
      </members>
    </dictionary>
    <dictionary name="DeviceMotionEventInit" extends="EventInit">
      <members>
        <member name="acceleration" nullable="1" type="DeviceAccelerationInit"/>
        <member name="accelerationIncludingGravity" nullable="1" type="DeviceAccelerationInit"/>
        <member name="interval" default="null" nullable="1" type="double"/>
        <member name="rotationRate" nullable="1" type="DeviceRotationRateInit"/>
      </members>
    </dictionary>
    <dictionary name="DeviceOrientationEventInit" extends="EventInit">
      <members>
        <member name="absolute" default="false" type="boolean"/>
        <member name="alpha" default="null" nullable="1" type="double"/>
        <member name="beta" default="null" nullable="1" type="double"/>
        <member name="gamma" default="null" nullable="1" type="double"/>
      </members>
    </dictionary>
    <dictionary name="DeviceRotationRateInit" extends="Object">
      <members>
        <member name="alpha" default="null" nullable="1" type="double"/>
        <member name="beta" default="null" nullable="1" type="double"/>
        <member name="gamma" default="null" nullable="1" type="double"/>
      </members>
    </dictionary>
    <dictionary name="DOMMatrixInit" extends="Object">
      <members>
        <member name="a" type="unrestricted double"/>
        <member name="b" type="unrestricted double"/>
        <member name="c" type="unrestricted double"/>
        <member name="d" type="unrestricted double"/>
        <member name="e" type="unrestricted double"/>
        <member name="f" type="unrestricted double"/>
        <member name="is2D" type="boolean"/>
        <member name="m11" type="unrestricted double"/>
        <member name="m12" type="unrestricted double"/>
        <member name="m13" default="0" type="unrestricted double"/>
        <member name="m14" default="0" type="unrestricted double"/>
        <member name="m21" type="unrestricted double"/>
        <member name="m22" type="unrestricted double"/>
        <member name="m23" default="0" type="unrestricted double"/>
        <member name="m24" default="0" type="unrestricted double"/>
        <member name="m31" default="0" type="unrestricted double"/>
        <member name="m32" default="0" type="unrestricted double"/>
        <member name="m33" default="1" type="unrestricted double"/>
        <member name="m34" default="0" type="unrestricted double"/>
        <member name="m41" type="unrestricted double"/>
        <member name="m42" type="unrestricted double"/>
        <member name="m43" default="0" type="unrestricted double"/>
        <member name="m44" default="1" type="unrestricted double"/>
      </members>
    </dictionary>
    <dictionary name="DOMPointInit" extends="Object">
      <members>
        <member name="w" default="1" type="unrestricted double"/>
        <member name="x" default="0" type="unrestricted double"/>
        <member name="y" default="0" type="unrestricted double"/>
        <member name="z" default="0" type="unrestricted double"/>
      </members>
    </dictionary>
    <dictionary name="DOMQuadInit" extends="Object">
      <members>
        <member name="p1" type="DOMPointInit"/>
        <member name="p2" type="DOMPointInit"/>
        <member name="p3" type="DOMPointInit"/>
        <member name="p4" type="DOMPointInit"/>
      </members>
    </dictionary>
    <dictionary name="DOMRectInit" extends="Object">
      <members>
        <member name="height" default="0" type="unrestricted double"/>
        <member name="width" default="0" type="unrestricted double"/>
        <member name="x" default="0" type="unrestricted double"/>
        <member name="y" default="0" type="unrestricted double"/>
      </members>
    </dictionary>
    <dictionary name="DoubleRange" extends="Object">
      <members>
        <member name="max" type="double"/>
        <member name="min" type="double"/>
      </members>
    </dictionary>
    <dictionary name="DragEventInit" extends="MouseEventInit">
      <members>
        <member name="dataTransfer" default="null" nullable="1" type="DataTransfer"/>
      </members>
    </dictionary>
    <dictionary name="DynamicsCompressorOptions" extends="AudioNodeOptions">
      <members>
        <member name="attack" default="0.003" type="float"/>
        <member name="knee" default="30" type="float"/>
        <member name="ratio" default="12" type="float"/>
        <member name="release" default="0.25" type="float"/>
        <member name="threshold" default="-24" type="float"/>
      </members>
    </dictionary>
    <dictionary name="EcdhKeyDeriveParams" extends="Algorithm">
      <members>
        <member name="public" type="CryptoKey" required="1"/>
      </members>
    </dictionary>
    <dictionary name="EcdsaParams" extends="Algorithm">
      <members>
        <member name="hash" type="HashAlgorithmIdentifier" required="1"/>
      </members>
    </dictionary>
    <dictionary name="EcKeyAlgorithm" extends="KeyAlgorithm">
      <members>
        <member name="namedCurve" type="NamedCurve" required="1"/>
      </members>
    </dictionary>
    <dictionary name="EcKeyGenParams" extends="Algorithm">
      <members>
        <member name="namedCurve" type="NamedCurve" required="1"/>
      </members>
    </dictionary>
    <dictionary name="EcKeyImportParams" extends="Algorithm">
      <members>
        <member name="namedCurve" type="NamedCurve" required="1"/>
      </members>
    </dictionary>
    <dictionary name="ElementCreationOptions" extends="Object">
      <members>
        <member name="is" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="ElementDefinitionOptions" extends="Object">
      <members>
        <member name="extends" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="ErrorEventInit" extends="EventInit">
      <members>
        <member name="colno" default="0" type="unsigned long"/>
        <member name="error" default="null" type="any"/>
        <member name="filename" default="&quot;&quot;" type="USVString"/>
        <member name="lineno" default="0" type="unsigned long"/>
        <member name="message" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="EventInit" extends="Object">
      <members>
        <member name="bubbles" default="false" type="boolean"/>
        <member name="cancelable" default="false" type="boolean"/>
        <member name="composed" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="EventListenerOptions" extends="Object">
      <members>
        <member name="capture" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="EventModifierInit" extends="UIEventInit">
      <members>
        <member name="altKey" default="false" type="boolean"/>
        <member name="ctrlKey" default="false" type="boolean"/>
        <member name="metaKey" default="false" type="boolean"/>
        <member name="modifierAltGraph" default="false" type="boolean"/>
        <member name="modifierCapsLock" default="false" type="boolean"/>
        <member name="modifierFn" default="false" type="boolean"/>
        <member name="modifierFnLock" default="false" type="boolean"/>
        <member name="modifierHyper" default="false" type="boolean"/>
        <member name="modifierNumLock" default="false" type="boolean"/>
        <member name="modifierScrollLock" default="false" type="boolean"/>
        <member name="modifierSuper" default="false" type="boolean"/>
        <member name="modifierSymbol" default="false" type="boolean"/>
        <member name="modifierSymbolLock" default="false" type="boolean"/>
        <member name="shiftKey" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="EventSourceInit" extends="Object">
      <members>
        <member name="withCredentials" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="ExtendableEventInit" extends="EventInit">
      <members/>
    </dictionary>
    <dictionary name="ExtendableMessageEventInit" extends="ExtendableEventInit">
      <members>
        <member name="data" default="null" type="any"/>
        <member name="lastEventId" default="&quot;&quot;" type="DOMString"/>
        <member name="origin" default="&quot;&quot;" type="USVString"/>
        <member name="ports" default="[]" type="sequence&lt;MessagePort&gt;"/>
        <member name="source" default="null" nullable="1" type="(Client or ServiceWorker or MessagePort)"/>
      </members>
    </dictionary>
    <dictionary name="FetchEventInit" extends="ExtendableEventInit">
      <members>
        <member name="clientId" default="&quot;&quot;" type="DOMString"/>
        <member name="preloadResponse" type="Promise&lt;any&gt;" required="1"/>
        <member name="request" type="Request" required="1"/>
        <member name="reservedClientId" default="&quot;&quot;" type="DOMString"/>
        <member name="targetClientId" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="FilePropertyBag" extends="BlobPropertyBag">
      <members>
        <member name="lastModified" type="long long"/>
      </members>
    </dictionary>
    <dictionary name="FocusEventInit" extends="UIEventInit">
      <members>
        <member name="relatedTarget" default="null" nullable="1" type="EventTarget"/>
      </members>
    </dictionary>
    <dictionary name="ForeignFetchEventInit" extends="ExtendableEventInit">
      <members>
        <member name="origin" default="&quot;null&quot;" type="USVString"/>
        <member name="request" type="Request" required="1"/>
      </members>
    </dictionary>
    <dictionary name="ForeignFetchOptions" extends="Object">
      <members>
        <member name="origins" type="sequence&lt;USVString&gt;" required="1"/>
        <member name="scopes" type="sequence&lt;USVString&gt;" required="1"/>
      </members>
    </dictionary>
    <dictionary name="ForeignFetchResponse" extends="Object">
      <members>
        <member name="headers" type="sequence&lt;ByteString&gt;"/>
        <member name="origin" type="USVString"/>
        <member name="response" type="Response" required="1"/>
      </members>
    </dictionary>
    <dictionary name="GainOptions" extends="AudioNodeOptions">
      <members>
        <member name="gain" default="1" type="float"/>
      </members>
    </dictionary>
    <dictionary name="GamepadEventInit" extends="EventInit">
      <members>
        <member name="gamepad" type="Gamepad" required="1"/>
      </members>
    </dictionary>
    <dictionary name="GetNotificationOptions" extends="Object">
      <members>
        <member name="tag" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="GetRootNodeOptions" extends="Object">
      <members>
        <member name="composed" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="HashChangeEventInit" extends="EventInit">
      <members>
        <member name="newURL" default="&quot;&quot;" type="USVString"/>
        <member name="oldURL" default="&quot;&quot;" type="USVString"/>
      </members>
    </dictionary>
    <dictionary name="HkdfParams" extends="Algorithm">
      <members>
        <member name="hash" type="HashAlgorithmIdentifier" required="1"/>
        <member name="info" type="BufferSource" required="1"/>
        <member name="salt" type="BufferSource" required="1"/>
      </members>
    </dictionary>
    <dictionary name="HmacImportParams" extends="Algorithm">
      <members>
        <member name="hash" type="HashAlgorithmIdentifier" required="1"/>
        <member name="length" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="HmacKeyAlgorithm" extends="KeyAlgorithm">
      <members>
        <member name="hash" type="KeyAlgorithm" required="1"/>
        <member name="length" type="unsigned long" required="1"/>
      </members>
    </dictionary>
    <dictionary name="HmacKeyGenParams" extends="Algorithm">
      <members>
        <member name="hash" type="HashAlgorithmIdentifier" required="1"/>
        <member name="length" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="IDBIndexParameters" extends="Object">
      <members>
        <member name="multiEntry" default="false" type="boolean"/>
        <member name="unique" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="IDBObjectStoreParameters" extends="Object">
      <members>
        <member name="autoIncrement" default="false" type="boolean"/>
        <member name="keyPath" default="null" nullable="1" type="(DOMString or sequence&lt;DOMString&gt;)"/>
      </members>
    </dictionary>
    <dictionary name="IDBVersionChangeEventInit" extends="EventInit">
      <members>
        <member name="newVersion" default="null" nullable="1" type="unsigned long long"/>
        <member name="oldVersion" default="0" type="unsigned long long"/>
      </members>
    </dictionary>
    <dictionary name="IIRFilterOptions" extends="AudioNodeOptions">
      <members>
        <member name="feedback" type="sequence&lt;double&gt;" required="1"/>
        <member name="feedforward" type="sequence&lt;double&gt;" required="1"/>
      </members>
    </dictionary>
    <dictionary name="ImageBitmapOptions" extends="Object">
      <members>
        <member name="colorSpaceConversion" default="&quot;default&quot;" type="ColorSpaceConversion"/>
        <member name="imageOrientation" default="&quot;none&quot;" type="ImageOrientation"/>
        <member name="premultiplyAlpha" default="&quot;default&quot;" type="PremultiplyAlpha"/>
        <member name="resizeHeight" type="unsigned long"/>
        <member name="resizeQuality" default="&quot;low&quot;" type="ResizeQuality"/>
        <member name="resizeWidth" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="ImageBitmapRenderingContextSettings" extends="Object">
      <members>
        <member name="alpha" default="true" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="ImageEncodeOptions" extends="Object">
      <members>
        <member name="quality" default="1" type="unrestricted double"/>
        <member name="type" default="&quot;image/png&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="InputEventInit" extends="UIEventInit">
      <members>
        <member name="data" default="&quot;&quot;" nullable="1" type="DOMString"/>
        <member name="isComposing" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="IntersectionObserverEntryInit" extends="Object">
      <members>
        <member name="boundingClientRect" type="DOMRectInit" required="1"/>
        <member name="intersectionRatio" type="double" required="1"/>
        <member name="intersectionRect" type="DOMRectInit" required="1"/>
        <member name="isIntersecting" type="boolean" required="1"/>
        <member name="rootBounds" type="DOMRectInit" required="1"/>
        <member name="target" type="Element" required="1"/>
        <member name="time" type="DOMHighResTimeStamp" required="1"/>
      </members>
    </dictionary>
    <dictionary name="IntersectionObserverInit" extends="Object">
      <members>
        <member name="root" default="null" nullable="1" type="Element"/>
        <member name="rootMargin" default="&quot;0px&quot;" type="DOMString"/>
        <member name="threshold" default="0" type="(double or sequence&lt;double&gt;)"/>
      </members>
    </dictionary>
    <dictionary name="JsonWebKey" extends="Object">
      <members>
        <member name="alg" type="DOMString"/>
        <member name="crv" type="DOMString"/>
        <member name="d" type="DOMString"/>
        <member name="dp" type="DOMString"/>
        <member name="dq" type="DOMString"/>
        <member name="e" type="DOMString"/>
        <member name="ext" type="boolean"/>
        <member name="k" type="DOMString"/>
        <member name="key_ops" type="sequence&lt;DOMString&gt;"/>
        <member name="kty" type="DOMString"/>
        <member name="n" type="DOMString"/>
        <member name="oth" type="sequence&lt;RsaOtherPrimesInfo&gt;"/>
        <member name="p" type="DOMString"/>
        <member name="q" type="DOMString"/>
        <member name="qi" type="DOMString"/>
        <member name="use" type="DOMString"/>
        <member name="x" type="DOMString"/>
        <member name="y" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="KeyAlgorithm" extends="Object">
      <members>
        <member name="name" type="DOMString" required="1"/>
      </members>
    </dictionary>
    <dictionary name="KeyboardEventInit" extends="EventModifierInit">
      <members>
        <member name="code" default="&quot;&quot;" type="DOMString"/>
        <member name="isComposing" default="false" type="boolean"/>
        <member name="key" default="&quot;&quot;" type="DOMString"/>
        <member name="location" default="0" type="unsigned long"/>
        <member name="repeat" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="LongRange" extends="Object">
      <members>
        <member name="max" type="long"/>
        <member name="min" type="long"/>
      </members>
    </dictionary>
    <dictionary name="MediaElementAudioSourceOptions" extends="Object">
      <members>
        <member name="mediaElement" type="HTMLMediaElement" required="1"/>
      </members>
    </dictionary>
    <dictionary name="MediaEncryptedEventInit" extends="EventInit">
      <members>
        <member name="initData" default="null" nullable="1" type="ArrayBuffer"/>
        <member name="initDataType" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="MediaKeyMessageEventInit" extends="EventInit">
      <members>
        <member name="message" type="ArrayBuffer" required="1"/>
        <member name="messageType" type="MediaKeyMessageType" required="1"/>
      </members>
    </dictionary>
    <dictionary name="MediaKeySystemConfiguration" extends="Object">
      <members>
        <member name="audioCapabilities" default="[]" type="sequence&lt;MediaKeySystemMediaCapability&gt;"/>
        <member name="distinctiveIdentifier" default="&quot;optional&quot;" type="MediaKeysRequirement"/>
        <member name="initDataTypes" default="[]" type="sequence&lt;DOMString&gt;"/>
        <member name="label" default="&quot;&quot;" type="DOMString"/>
        <member name="persistentState" default="&quot;optional&quot;" type="MediaKeysRequirement"/>
        <member name="sessionTypes" type="sequence&lt;DOMString&gt;"/>
        <member name="videoCapabilities" default="[]" type="sequence&lt;MediaKeySystemMediaCapability&gt;"/>
      </members>
    </dictionary>
    <dictionary name="MediaKeySystemMediaCapability" extends="Object">
      <members>
        <member name="contentType" default="&quot;&quot;" type="DOMString"/>
        <member name="robustness" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="MediaQueryListEventInit" extends="EventInit">
      <members>
        <member name="matches" default="false" type="boolean"/>
        <member name="media" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="MediaStreamAudioSourceOptions" extends="Object">
      <members>
        <member name="mediaStream" type="MediaStream" required="1"/>
      </members>
    </dictionary>
    <dictionary name="MediaStreamConstraints" extends="Object">
      <members>
        <member name="audio" default="false" type="(boolean or MediaTrackConstraints)"/>
        <member name="peerIdentity" type="DOMString"/>
        <member name="video" default="false" type="(boolean or MediaTrackConstraints)"/>
      </members>
    </dictionary>
    <dictionary name="MediaStreamTrackAudioSourceOptions" extends="Object">
      <members>
        <member name="mediaStreamTrack" type="AudioMediaStreamTrack" required="1"/>
      </members>
    </dictionary>
    <dictionary name="MediaStreamTrackEventInit" extends="EventInit">
      <members>
        <member name="track" type="MediaStreamTrack" required="1"/>
      </members>
    </dictionary>
    <dictionary name="MediaTrackCapabilities" extends="Object">
      <members>
        <member name="aspectRatio" type="DoubleRange"/>
        <member name="channelCount" type="LongRange"/>
        <member name="deviceId" type="DOMString"/>
        <member name="echoCancellation" type="sequence&lt;boolean&gt;"/>
        <member name="facingMode" type="sequence&lt;DOMString&gt;"/>
        <member name="frameRate" type="DoubleRange"/>
        <member name="groupId" type="DOMString"/>
        <member name="height" type="LongRange"/>
        <member name="latency" type="DoubleRange"/>
        <member name="sampleRate" type="LongRange"/>
        <member name="sampleSize" type="LongRange"/>
        <member name="volume" type="DoubleRange"/>
        <member name="width" type="LongRange"/>
      </members>
    </dictionary>
    <dictionary name="MediaTrackConstraints" extends="MediaTrackConstraintSet">
      <members>
        <member name="advanced" type="sequence&lt;MediaTrackConstraintSet&gt;"/>
      </members>
    </dictionary>
    <dictionary name="MediaTrackConstraintSet" extends="Object">
      <members>
        <member name="aspectRatio" type="ConstrainDouble"/>
        <member name="channelCount" type="ConstrainLong"/>
        <member name="deviceId" type="ConstrainDOMString"/>
        <member name="echoCancellation" type="ConstrainBoolean"/>
        <member name="facingMode" type="ConstrainDOMString"/>
        <member name="frameRate" type="ConstrainDouble"/>
        <member name="groupId" type="ConstrainDOMString"/>
        <member name="height" type="ConstrainLong"/>
        <member name="latency" type="ConstrainDouble"/>
        <member name="sampleRate" type="ConstrainLong"/>
        <member name="sampleSize" type="ConstrainLong"/>
        <member name="volume" type="ConstrainDouble"/>
        <member name="width" type="ConstrainLong"/>
      </members>
    </dictionary>
    <dictionary name="MediaTrackSettings" extends="Object">
      <members>
        <member name="aspectRatio" type="double"/>
        <member name="channelCount" type="long"/>
        <member name="deviceId" type="DOMString"/>
        <member name="echoCancellation" type="boolean"/>
        <member name="facingMode" type="DOMString"/>
        <member name="frameRate" type="double"/>
        <member name="groupId" type="DOMString"/>
        <member name="height" type="long"/>
        <member name="latency" type="double"/>
        <member name="sampleRate" type="long"/>
        <member name="sampleSize" type="long"/>
        <member name="volume" type="double"/>
        <member name="width" type="long"/>
      </members>
    </dictionary>
    <dictionary name="MediaTrackSupportedConstraints" extends="Object">
      <members>
        <member name="aspectRatio" default="true" type="boolean"/>
        <member name="channelCount" default="true" type="boolean"/>
        <member name="deviceId" default="true" type="boolean"/>
        <member name="echoCancellation" default="true" type="boolean"/>
        <member name="facingMode" default="true" type="boolean"/>
        <member name="frameRate" default="true" type="boolean"/>
        <member name="groupId" default="true" type="boolean"/>
        <member name="height" default="true" type="boolean"/>
        <member name="latency" default="true" type="boolean"/>
        <member name="sampleRate" default="true" type="boolean"/>
        <member name="sampleSize" default="true" type="boolean"/>
        <member name="volume" default="true" type="boolean"/>
        <member name="width" default="true" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="MessageEventInit" extends="EventInit">
      <members>
        <member name="data" default="null" type="any"/>
        <member name="lastEventId" default="&quot;&quot;" type="DOMString"/>
        <member name="origin" default="&quot;&quot;" type="USVString"/>
        <member name="ports" default="[]" type="sequence&lt;MessagePort&gt;"/>
        <member name="source" default="null" nullable="1" type="MessageEventSource"/>
      </members>
    </dictionary>
    <dictionary name="MouseEventInit" extends="EventModifierInit">
      <members>
        <member name="button" default="0" type="short"/>
        <member name="buttons" default="0" type="unsigned short"/>
        <member name="clientX" default="0" type="long"/>
        <member name="clientY" default="0" type="long"/>
        <member name="relatedTarget" default="null" nullable="1" type="EventTarget"/>
        <member name="screenX" default="0" type="long"/>
        <member name="screenY" default="0" type="long"/>
      </members>
    </dictionary>
    <dictionary name="MutationObserverInit" extends="Object">
      <members>
        <member name="attributeFilter" type="sequence&lt;DOMString&gt;"/>
        <member name="attributeOldValue" type="boolean"/>
        <member name="attributes" type="boolean"/>
        <member name="characterData" type="boolean"/>
        <member name="characterDataOldValue" type="boolean"/>
        <member name="childList" default="false" type="boolean"/>
        <member name="subtree" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="NavigationPreloadState" extends="Object">
      <members>
        <member name="enabled" default="false" type="boolean"/>
        <member name="headerValue" type="ByteString"/>
      </members>
    </dictionary>
    <dictionary name="NotificationAction" extends="Object">
      <members>
        <member name="action" type="DOMString" required="1"/>
        <member name="icon" type="USVString"/>
        <member name="title" type="DOMString" required="1"/>
      </members>
    </dictionary>
    <dictionary name="NotificationEventInit" extends="ExtendableEventInit">
      <members>
        <member name="action" default="&quot;&quot;" type="DOMString"/>
        <member name="notification" type="Notification" required="1"/>
      </members>
    </dictionary>
    <dictionary name="NotificationOptions" extends="Object">
      <members>
        <member name="actions" default="[]" type="sequence&lt;NotificationAction&gt;"/>
        <member name="badge" type="USVString"/>
        <member name="body" default="&quot;&quot;" type="DOMString"/>
        <member name="data" default="null" type="any"/>
        <member name="dir" default="&quot;auto&quot;" type="NotificationDirection"/>
        <member name="icon" type="USVString"/>
        <member name="image" type="USVString"/>
        <member name="lang" default="&quot;&quot;" type="DOMString"/>
        <member name="renotify" default="false" type="boolean"/>
        <member name="requireInteraction" default="false" type="boolean"/>
        <member name="silent" default="false" type="boolean"/>
        <member name="sound" type="USVString"/>
        <member name="tag" default="&quot;&quot;" type="DOMString"/>
        <member name="timestamp" type="DOMTimeStamp"/>
        <member name="vibrate" type="VibratePattern"/>
      </members>
    </dictionary>
    <dictionary name="OfflineAudioCompletionEventInit" extends="EventInit">
      <members>
        <member name="renderedBuffer" type="AudioBuffer" required="1"/>
      </members>
    </dictionary>
    <dictionary name="OscillatorOptions" extends="AudioNodeOptions">
      <members>
        <member name="detune" default="0" type="float"/>
        <member name="frequency" default="440" type="float"/>
        <member name="periodicWave" type="PeriodicWave"/>
        <member name="type" default="&quot;sine&quot;" type="OscillatorType"/>
      </members>
    </dictionary>
    <dictionary name="OverconstrainedErrorEventInit" extends="EventInit">
      <members>
        <member name="error" default="null" nullable="1" type="OverconstrainedError"/>
      </members>
    </dictionary>
    <dictionary name="PageTransitionEventInit" extends="EventInit">
      <members>
        <member name="persisted" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="PannerOptions" extends="AudioNodeOptions">
      <members>
        <member name="coneInnerAngle" default="360" type="double"/>
        <member name="coneOuterAngle" default="360" type="double"/>
        <member name="coneOuterGain" default="0" type="double"/>
        <member name="distanceModel" default="&quot;inverse&quot;" type="DistanceModelType"/>
        <member name="maxDistance" default="10000" type="double"/>
        <member name="orientationX" default="1" type="float"/>
        <member name="orientationY" default="0" type="float"/>
        <member name="orientationZ" default="0" type="float"/>
        <member name="panningModel" default="&quot;equalpower&quot;" type="PanningModelType"/>
        <member name="positionX" default="0" type="float"/>
        <member name="positionY" default="0" type="float"/>
        <member name="positionZ" default="0" type="float"/>
        <member name="refDistance" default="1" type="double"/>
        <member name="rolloffFactor" default="1" type="double"/>
      </members>
    </dictionary>
    <dictionary name="PaymentCurrencyAmount" extends="Object">
      <members>
        <member name="currency" type="DOMString" required="1"/>
        <member name="currencySystem" default="&quot;urn:iso:std:iso:4217&quot;" type="DOMString"/>
        <member name="value" type="DOMString" required="1"/>
      </members>
    </dictionary>
    <dictionary name="PaymentDetailsBase" extends="Object">
      <members>
        <member name="displayItems" type="sequence&lt;PaymentItem&gt;"/>
        <member name="modifiers" type="sequence&lt;PaymentDetailsModifier&gt;"/>
        <member name="shippingOptions" type="sequence&lt;PaymentShippingOption&gt;"/>
      </members>
    </dictionary>
    <dictionary name="PaymentDetailsInit" extends="PaymentDetailsBase">
      <members>
        <member name="id" type="DOMString"/>
        <member name="total" type="PaymentItem" required="1"/>
      </members>
    </dictionary>
    <dictionary name="PaymentDetailsModifier" extends="Object">
      <members>
        <member name="additionalDisplayItems" type="sequence&lt;PaymentItem&gt;"/>
        <member name="data" type="object"/>
        <member name="supportedMethods" type="sequence&lt;DOMString&gt;" required="1"/>
        <member name="total" type="PaymentItem"/>
      </members>
    </dictionary>
    <dictionary name="PaymentDetailsUpdate" extends="PaymentDetailsBase">
      <members>
        <member name="error" type="DOMString"/>
        <member name="total" type="PaymentItem"/>
      </members>
    </dictionary>
    <dictionary name="PaymentItem" extends="Object">
      <members>
        <member name="amount" type="PaymentCurrencyAmount" required="1"/>
        <member name="label" type="DOMString" required="1"/>
        <member name="pending" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="PaymentMethodData" extends="Object">
      <members>
        <member name="data" type="object"/>
        <member name="supportedMethods" type="sequence&lt;DOMString&gt;" required="1"/>
      </members>
    </dictionary>
    <dictionary name="PaymentOptions" extends="Object">
      <members>
        <member name="requestPayerEmail" default="false" type="boolean"/>
        <member name="requestPayerName" default="false" type="boolean"/>
        <member name="requestPayerPhone" default="false" type="boolean"/>
        <member name="requestShipping" default="false" type="boolean"/>
        <member name="shippingType" default="&quot;shipping&quot;" type="PaymentShippingType"/>
      </members>
    </dictionary>
    <dictionary name="PaymentRequestUpdateEventInit" extends="EventInit">
      <members/>
    </dictionary>
    <dictionary name="PaymentShippingOption" extends="Object">
      <members>
        <member name="amount" type="PaymentCurrencyAmount" required="1"/>
        <member name="id" type="DOMString" required="1"/>
        <member name="label" type="DOMString" required="1"/>
        <member name="selected" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="Pbkdf2Params" extends="Algorithm">
      <members>
        <member name="hash" type="HashAlgorithmIdentifier" required="1"/>
        <member name="iterations" type="unsigned long" required="1"/>
        <member name="salt" type="BufferSource" required="1"/>
      </members>
    </dictionary>
    <dictionary name="PerformanceObserverInit" extends="Object">
      <members>
        <member name="entryTypes" type="sequence&lt;DOMString&gt;" required="1"/>
      </members>
    </dictionary>
    <dictionary name="PeriodicWaveConstraints" extends="Object">
      <members>
        <member name="disableNormalization" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="PeriodicWaveOptions" extends="PeriodicWaveConstraints">
      <members>
        <member name="imag" type="sequence&lt;float&gt;"/>
        <member name="real" type="sequence&lt;float&gt;"/>
      </members>
    </dictionary>
    <dictionary name="PointerEventInit" extends="MouseEventInit">
      <members>
        <member name="height" default="0" type="double"/>
        <member name="isPrimary" default="false" type="boolean"/>
        <member name="pointerId" default="0" type="long"/>
        <member name="pointerType" default="&quot;&quot;" type="DOMString"/>
        <member name="pressure" default="0" type="float"/>
        <member name="tiltX" default="0" type="long"/>
        <member name="tiltY" default="0" type="long"/>
        <member name="width" default="0" type="double"/>
      </members>
    </dictionary>
    <dictionary name="PopStateEventInit" extends="EventInit">
      <members>
        <member name="state" default="null" type="any"/>
      </members>
    </dictionary>
    <dictionary name="PositionOptions" extends="Object">
      <members>
        <member name="enableHighAccuracy" default="false" type="boolean"/>
        <member name="maximumAge" default="0" type="unsigned long"/>
        <member name="timeout" default="4294967295" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="ProgressEventInit" extends="EventInit">
      <members>
        <member name="lengthComputable" default="false" type="boolean"/>
        <member name="loaded" default="0" type="unsigned long long"/>
        <member name="total" default="0" type="unsigned long long"/>
      </members>
    </dictionary>
    <dictionary name="PromiseRejectionEventInit" extends="EventInit">
      <members>
        <member name="promise" type="Promise&lt;any&gt;" required="1"/>
        <member name="reason" type="any"/>
      </members>
    </dictionary>
    <dictionary name="PushEventInit" extends="ExtendableEventInit">
      <members>
        <member name="data" type="PushMessageDataInit"/>
      </members>
    </dictionary>
    <dictionary name="PushSubscriptionChangeInit" extends="ExtendableEventInit">
      <members>
        <member name="newSubscription" default="null" type="PushSubscription"/>
        <member name="oldSubscription" default="null" type="PushSubscription"/>
      </members>
    </dictionary>
    <dictionary name="PushSubscriptionOptionsInit" extends="Object">
      <members>
        <member name="applicationServerKey" default="null" nullable="1" type="(BufferSource or DOMString)"/>
        <member name="userVisibleOnly" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="RegistrationOptions" extends="Object">
      <members>
        <member name="scope" type="USVString"/>
        <member name="type" default="&quot;classic&quot;" type="WorkerType"/>
        <member name="useCache" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="RelatedEventInit" extends="EventInit">
      <members>
        <member name="relatedTarget" default="null" nullable="1" type="EventTarget"/>
      </members>
    </dictionary>
    <dictionary name="RequestInit" extends="Object">
      <members>
        <member name="body" nullable="1" type="BodyInit"/>
        <member name="cache" type="RequestCache"/>
        <member name="credentials" type="RequestCredentials"/>
        <member name="headers" type="HeadersInit"/>
        <member name="integrity" type="DOMString"/>
        <member name="keepalive" type="boolean"/>
        <member name="method" type="ByteString"/>
        <member name="mode" type="RequestMode"/>
        <member name="redirect" type="RequestRedirect"/>
        <member name="referrer" type="USVString"/>
        <member name="referrerPolicy" type="ReferrerPolicy"/>
        <member name="window" type="any"/>
      </members>
    </dictionary>
    <dictionary name="ResponseInit" extends="Object">
      <members>
        <member name="headers" type="HeadersInit"/>
        <member name="status" default="200" type="unsigned short"/>
        <member name="statusText" default="&quot;OK&quot;" type="ByteString"/>
      </members>
    </dictionary>
    <dictionary name="RsaHashedImportParams" extends="Algorithm">
      <members>
        <member name="hash" type="HashAlgorithmIdentifier" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RsaHashedKeyAlgorithm" extends="RsaKeyAlgorithm">
      <members>
        <member name="hash" type="KeyAlgorithm" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RsaHashedKeyGenParams" extends="RsaKeyGenParams">
      <members>
        <member name="hash" type="HashAlgorithmIdentifier" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RsaKeyAlgorithm" extends="KeyAlgorithm">
      <members>
        <member name="modulusLength" type="unsigned long" required="1"/>
        <member name="publicExponent" type="BigInteger" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RsaKeyGenParams" extends="Algorithm">
      <members>
        <member name="modulusLength" type="unsigned long" required="1"/>
        <member name="publicExponent" type="BigInteger" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RsaOaepParams" extends="Algorithm">
      <members>
        <member name="label" type="BufferSource"/>
      </members>
    </dictionary>
    <dictionary name="RsaOtherPrimesInfo" extends="Object">
      <members>
        <member name="d" type="DOMString"/>
        <member name="r" type="DOMString"/>
        <member name="t" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RsaPssParams" extends="Algorithm">
      <members>
        <member name="saltLength" type="unsigned long" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RTCAnswerOptions" extends="RTCOfferAnswerOptions">
      <members/>
    </dictionary>
    <dictionary name="RTCCertificateExpiration" extends="Object">
      <members>
        <member name="expires" type="DOMTimeStamp"/>
      </members>
    </dictionary>
    <dictionary name="RTCCertificateStats" extends="RTCStats">
      <members>
        <member name="base64Certificate" type="DOMString"/>
        <member name="fingerprint" type="DOMString"/>
        <member name="fingerprintAlgorithm" type="DOMString"/>
        <member name="issuerCertificateId" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCCodecStats" extends="RTCStats">
      <members>
        <member name="channels" type="unsigned long"/>
        <member name="clockRate" type="unsigned long"/>
        <member name="codec" type="DOMString"/>
        <member name="implementation" type="DOMString"/>
        <member name="parameters" type="DOMString"/>
        <member name="payloadType" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCConfiguration" extends="Object">
      <members>
        <member name="bundlePolicy" default="&quot;balanced&quot;" type="RTCBundlePolicy"/>
        <member name="certificates" type="sequence&lt;RTCCertificate&gt;"/>
        <member name="iceCandidatePoolSize" default="0" type="octet"/>
        <member name="iceServers" type="sequence&lt;RTCIceServer&gt;"/>
        <member name="iceTransportPolicy" default="&quot;all&quot;" type="RTCIceTransportPolicy"/>
        <member name="peerIdentity" type="DOMString"/>
        <member name="rtcpMuxPolicy" default="&quot;require&quot;" type="RTCRtcpMuxPolicy"/>
      </members>
    </dictionary>
    <dictionary name="RTCDataChannelEventInit" extends="EventInit">
      <members>
        <member name="channel" type="RTCDataChannel" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RTCDataChannelInit" extends="Object">
      <members>
        <member name="id" type="unsigned short"/>
        <member name="maxPacketLifeTime" type="unsigned short"/>
        <member name="maxRetransmits" type="unsigned short"/>
        <member name="negotiated" default="false" type="boolean"/>
        <member name="ordered" default="true" type="boolean"/>
        <member name="priority" default="&quot;low&quot;" type="RTCPriorityType"/>
        <member name="protocol" default="&quot;&quot;" type="USVString"/>
      </members>
    </dictionary>
    <dictionary name="RTCDataChannelStats" extends="RTCStats">
      <members>
        <member name="bytesReceived" type="unsigned long long"/>
        <member name="bytesSent" type="unsigned long long"/>
        <member name="datachannelid" type="long"/>
        <member name="label" type="DOMString"/>
        <member name="messagesReceived" type="unsigned long"/>
        <member name="messagesSent" type="unsigned long"/>
        <member name="protocol" type="DOMString"/>
        <member name="state" type="RTCDataChannelState"/>
      </members>
    </dictionary>
    <dictionary name="RTCDtlsFingerprint" extends="Object">
      <members>
        <member name="algorithm" type="DOMString"/>
        <member name="value" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCDTMFToneChangeEventInit" extends="EventInit">
      <members>
        <member name="tone" type="DOMString" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RTCErrorEventInit" extends="EventInit">
      <members>
        <member name="error" default="null" nullable="1" type="RTCError"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceCandidateInit" extends="Object">
      <members>
        <member name="candidate" default="&quot;&quot;" type="DOMString"/>
        <member name="sdpMid" default="null" nullable="1" type="DOMString"/>
        <member name="sdpMLineIndex" default="null" nullable="1" type="unsigned short"/>
        <member name="ufrag" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceCandidatePair" extends="Object">
      <members>
        <member name="local" type="RTCIceCandidate"/>
        <member name="remote" type="RTCIceCandidate"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceCandidatePairStats" extends="RTCStats">
      <members>
        <member name="availableIncomingBitrate" type="double"/>
        <member name="availableOutgoingBitrate" type="double"/>
        <member name="bytesReceived" type="unsigned long long"/>
        <member name="bytesSent" type="unsigned long long"/>
        <member name="consentRequestsReceived" type="unsigned long long"/>
        <member name="consentRequestsSent" type="unsigned long long"/>
        <member name="consentResponsesReceived" type="unsigned long long"/>
        <member name="consentResponsesSent" type="unsigned long long"/>
        <member name="currentRoundTripTime" type="double"/>
        <member name="localCandidateId" type="DOMString"/>
        <member name="nominated" type="boolean"/>
        <member name="priority" type="unsigned long long"/>
        <member name="readable" type="boolean"/>
        <member name="remoteCandidateId" type="DOMString"/>
        <member name="requestsReceived" type="unsigned long long"/>
        <member name="requestsSent" type="unsigned long long"/>
        <member name="responsesReceived" type="unsigned long long"/>
        <member name="responsesSent" type="unsigned long long"/>
        <member name="retransmissionsReceived" type="unsigned long long"/>
        <member name="retransmissionsSent" type="unsigned long long"/>
        <member name="state" type="RTCStatsIceCandidatePairState"/>
        <member name="totalRoundTripTime" type="double"/>
        <member name="transportId" type="DOMString"/>
        <member name="writable" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceCandidateStats" extends="RTCStats">
      <members>
        <member name="candidateType" type="RTCIceCandidateType"/>
        <member name="deleted" default="false" type="boolean"/>
        <member name="ip" type="DOMString"/>
        <member name="isRemote" type="boolean"/>
        <member name="port" type="long"/>
        <member name="priority" type="long"/>
        <member name="protocol" type="DOMString"/>
        <member name="transportId" type="DOMString"/>
        <member name="url" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceParameters" extends="Object">
      <members>
        <member name="password" type="DOMString"/>
        <member name="usernameFragment" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCIceServer" extends="Object">
      <members>
        <member name="credential" type="(DOMString or RTCOAuthCredential)"/>
        <member name="credentialType" default="&quot;password&quot;" type="RTCIceCredentialType"/>
        <member name="urls" type="(DOMString or sequence&lt;DOMString&gt;)" required="1"/>
        <member name="username" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCIdentityAssertionResult" extends="Object">
      <members>
        <member name="assertion" type="DOMString" required="1"/>
        <member name="idp" type="RTCIdentityProviderDetails" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RTCIdentityProvider" extends="Object">
      <members>
        <member name="generateAssertion" type="GenerateAssertionCallback" required="1"/>
        <member name="validateAssertion" type="ValidateAssertionCallback" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RTCIdentityProviderDetails" extends="Object">
      <members>
        <member name="domain" type="DOMString" required="1"/>
        <member name="protocol" default="&quot;default&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCIdentityProviderOptions" extends="Object">
      <members>
        <member name="peerIdentity" type="DOMString"/>
        <member name="protocol" default="&quot;default&quot;" type="DOMString"/>
        <member name="usernameHint" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCIdentityValidationResult" extends="Object">
      <members>
        <member name="contents" type="DOMString" required="1"/>
        <member name="identity" type="DOMString" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RTCInboundRTPStreamStats" extends="RTCRTPStreamStats">
      <members>
        <member name="burstDiscardCount" type="unsigned long"/>
        <member name="burstDiscardRate" type="double"/>
        <member name="burstLossCount" type="unsigned long"/>
        <member name="burstLossRate" type="double"/>
        <member name="burstPacketsDiscarded" type="unsigned long"/>
        <member name="burstPacketsLost" type="unsigned long"/>
        <member name="bytesReceived" type="unsigned long long"/>
        <member name="fractionLost" type="double"/>
        <member name="framesDecoded" type="unsigned long"/>
        <member name="gapDiscardRate" type="double"/>
        <member name="gapLossRate" type="double"/>
        <member name="jitter" type="double"/>
        <member name="packetsDiscarded" type="unsigned long"/>
        <member name="packetsLost" type="unsigned long"/>
        <member name="packetsReceived" type="unsigned long"/>
        <member name="packetsRepaired" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCMediaStreamStats" extends="RTCStats">
      <members>
        <member name="streamIdentifier" type="DOMString"/>
        <member name="trackIds" type="sequence&lt;DOMString&gt;"/>
      </members>
    </dictionary>
    <dictionary name="RTCMediaStreamTrackStats" extends="RTCStats">
      <members>
        <member name="audioLevel" type="double"/>
        <member name="detached" type="boolean"/>
        <member name="echoReturnLoss" type="double"/>
        <member name="echoReturnLossEnhancement" type="double"/>
        <member name="ended" type="boolean"/>
        <member name="frameHeight" type="unsigned long"/>
        <member name="framesCorrupted" type="unsigned long"/>
        <member name="framesDecoded" type="unsigned long"/>
        <member name="framesDropped" type="unsigned long"/>
        <member name="framesPerSecond" type="double"/>
        <member name="framesReceived" type="unsigned long"/>
        <member name="framesSent" type="unsigned long"/>
        <member name="frameWidth" type="unsigned long"/>
        <member name="fullFramesLost" type="unsigned long"/>
        <member name="partialFramesLost" type="unsigned long"/>
        <member name="remoteSource" type="boolean"/>
        <member name="ssrcIds" type="sequence&lt;DOMString&gt;"/>
        <member name="trackIdentifier" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCOAuthCredential" extends="Object">
      <members>
        <member name="accessToken" type="DOMString" required="1"/>
        <member name="macKey" type="DOMString" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RTCOfferAnswerOptions" extends="Object">
      <members>
        <member name="voiceActivityDetection" default="true" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="RTCOfferOptions" extends="RTCOfferAnswerOptions">
      <members>
        <member name="iceRestart" default="false" type="boolean"/>
        <member name="offerToReceiveAudio" type="boolean"/>
        <member name="offerToReceiveVideo" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="RTCOutboundRTPStreamStats" extends="RTCRTPStreamStats">
      <members>
        <member name="bytesSent" type="unsigned long long"/>
        <member name="framesEncoded" type="unsigned long"/>
        <member name="packetsSent" type="unsigned long"/>
        <member name="roundTripTime" type="double"/>
        <member name="targetBitrate" type="double"/>
      </members>
    </dictionary>
    <dictionary name="RTCPeerConnectionIceErrorEventInit" extends="EventInit">
      <members>
        <member name="errorCode" type="unsigned short" required="1"/>
        <member name="hostCandidate" type="DOMString"/>
        <member name="statusText" type="USVString"/>
        <member name="url" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCPeerConnectionIceEventInit" extends="EventInit">
      <members>
        <member name="candidate" nullable="1" type="RTCIceCandidate"/>
        <member name="url" nullable="1" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCPeerConnectionStats" extends="RTCStats">
      <members>
        <member name="dataChannelsClosed" type="unsigned long"/>
        <member name="dataChannelsOpened" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtcpParameters" extends="Object">
      <members>
        <member name="cname" type="DOMString"/>
        <member name="reducedSize" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpCapabilities" extends="Object">
      <members>
        <member name="codecs" type="sequence&lt;RTCRtpCodecCapability&gt;"/>
        <member name="headerExtensions" type="sequence&lt;RTCRtpHeaderExtensionCapability&gt;"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpCodecCapability" extends="Object">
      <members>
        <member name="channels" default="1" type="unsigned short"/>
        <member name="clockRate" type="unsigned long"/>
        <member name="mimeType" type="DOMString"/>
        <member name="sdpFmtpLine" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpCodecParameters" extends="Object">
      <members>
        <member name="channels" default="1" type="unsigned short"/>
        <member name="clockRate" type="unsigned long"/>
        <member name="mimeType" type="DOMString"/>
        <member name="payloadType" type="unsigned short"/>
        <member name="sdpFmtpLine" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpEncodingParameters" extends="Object">
      <members>
        <member name="active" type="boolean"/>
        <member name="dtx" type="RTCDtxStatus"/>
        <member name="fec" type="RTCRtpFecParameters"/>
        <member name="maxBitrate" type="unsigned long"/>
        <member name="maxFramerate" type="double"/>
        <member name="priority" type="RTCPriorityType"/>
        <member name="ptime" type="unsigned long"/>
        <member name="rid" type="DOMString"/>
        <member name="rtx" type="RTCRtpRtxParameters"/>
        <member name="scaleResolutionDownBy" default="1" type="double"/>
        <member name="ssrc" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpFecParameters" extends="Object">
      <members>
        <member name="ssrc" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpHeaderExtensionCapability" extends="Object">
      <members>
        <member name="uri" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpHeaderExtensionParameters" extends="Object">
      <members>
        <member name="encrypted" type="boolean"/>
        <member name="id" type="unsigned short"/>
        <member name="uri" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpParameters" extends="Object">
      <members>
        <member name="codecs" type="sequence&lt;RTCRtpCodecParameters&gt;"/>
        <member name="degradationPreference" default="&quot;balanced&quot;" type="RTCDegradationPreference"/>
        <member name="encodings" type="sequence&lt;RTCRtpEncodingParameters&gt;"/>
        <member name="headerExtensions" type="sequence&lt;RTCRtpHeaderExtensionParameters&gt;"/>
        <member name="rtcp" type="RTCRtcpParameters"/>
        <member name="transactionId" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpRtxParameters" extends="Object">
      <members>
        <member name="ssrc" type="unsigned long"/>
      </members>
    </dictionary>
    <dictionary name="RTCRTPStreamStats" extends="RTCStats">
      <members>
        <member name="associateStatsId" type="DOMString"/>
        <member name="codecId" type="DOMString"/>
        <member name="firCount" type="unsigned long"/>
        <member name="isRemote" default="false" type="boolean"/>
        <member name="mediaTrackId" type="DOMString"/>
        <member name="mediaType" type="DOMString"/>
        <member name="nackCount" type="unsigned long"/>
        <member name="pliCount" type="unsigned long"/>
        <member name="qpSum" type="unsigned long long"/>
        <member name="sliCount" type="unsigned long"/>
        <member name="ssrc" type="DOMString"/>
        <member name="transportId" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="RTCRtpTransceiverInit" extends="Object">
      <members>
        <member name="direction" default="&quot;sendrecv&quot;" type="RTCRtpTransceiverDirection"/>
        <member name="sendEncodings" type="sequence&lt;RTCRtpEncodingParameters&gt;"/>
        <member name="streams" type="sequence&lt;MediaStream&gt;"/>
      </members>
    </dictionary>
    <dictionary name="RTCSessionDescriptionInit" extends="Object">
      <members>
        <member name="sdp" default="&quot;&quot;" type="DOMString"/>
        <member name="type" type="RTCSdpType" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RTCStats" extends="Object">
      <members>
        <member name="id" type="DOMString"/>
        <member name="timestamp" type="DOMHighResTimeStamp"/>
        <member name="type" type="RTCStatsType"/>
      </members>
    </dictionary>
    <dictionary name="RTCStats" extends="Object">
      <members>
        <member name="id" type="DOMString"/>
        <member name="timestamp" type="DOMHighResTimeStamp"/>
        <member name="type" type="RTCStatsType"/>
      </members>
    </dictionary>
    <dictionary name="RTCTrackEventInit" extends="EventInit">
      <members>
        <member name="receiver" type="RTCRtpReceiver" required="1"/>
        <member name="streams" default="[]" type="sequence&lt;MediaStream&gt;"/>
        <member name="track" type="MediaStreamTrack" required="1"/>
        <member name="transceiver" type="RTCRtpTransceiver" required="1"/>
      </members>
    </dictionary>
    <dictionary name="RTCTransportStats" extends="RTCStats">
      <members>
        <member name="activeConnection" type="boolean"/>
        <member name="bytesReceived" type="unsigned long long"/>
        <member name="bytesSent" type="unsigned long long"/>
        <member name="localCertificateId" type="DOMString"/>
        <member name="remoteCertificateId" type="DOMString"/>
        <member name="rtcpTransportStatsId" type="DOMString"/>
        <member name="selectedCandidatePairId" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="ScrollIntoViewOptions" extends="ScrollOptions">
      <members>
        <member name="block" default="&quot;center&quot;" type="ScrollLogicalPosition"/>
        <member name="inline" default="&quot;center&quot;" type="ScrollLogicalPosition"/>
      </members>
    </dictionary>
    <dictionary name="ScrollOptions" extends="Object">
      <members>
        <member name="behavior" default="&quot;auto&quot;" type="ScrollBehavior"/>
      </members>
    </dictionary>
    <dictionary name="ScrollToOptions" extends="ScrollOptions">
      <members>
        <member name="left" type="unrestricted double"/>
        <member name="top" type="unrestricted double"/>
      </members>
    </dictionary>
    <dictionary name="Settings" extends="Object">
      <members/>
    </dictionary>
    <dictionary name="ShadowRootInit" extends="Object">
      <members>
        <member name="mode" type="ShadowRootMode" required="1"/>
      </members>
    </dictionary>
    <dictionary name="StereoPannerOptions" extends="AudioNodeOptions">
      <members>
        <member name="pan" default="0" type="float"/>
      </members>
    </dictionary>
    <dictionary name="StorageEventInit" extends="EventInit">
      <members>
        <member name="key" default="null" nullable="1" type="DOMString"/>
        <member name="newValue" default="null" nullable="1" type="DOMString"/>
        <member name="oldValue" default="null" nullable="1" type="DOMString"/>
        <member name="storageArea" default="null" nullable="1" type="Storage"/>
        <member name="url" default="&quot;&quot;" type="USVString"/>
      </members>
    </dictionary>
    <dictionary name="SVGBoundingBoxOptions" extends="Object">
      <members>
        <member name="clipped" default="false" type="boolean"/>
        <member name="fill" default="true" type="boolean"/>
        <member name="markers" default="false" type="boolean"/>
        <member name="stroke" default="false" type="boolean"/>
      </members>
    </dictionary>
    <dictionary name="SyncEventInit" extends="ExtendableEventInit">
      <members>
        <member name="lastChance" default="false" type="boolean"/>
        <member name="tag" type="DOMString" required="1"/>
      </members>
    </dictionary>
    <dictionary name="TouchEventInit" extends="EventModifierInit">
      <members>
        <member name="changedTouches" default="[]" type="sequence&lt;Touch&gt;"/>
        <member name="targetTouches" default="[]" type="sequence&lt;Touch&gt;"/>
        <member name="touches" default="[]" type="sequence&lt;Touch&gt;"/>
      </members>
    </dictionary>
    <dictionary name="TouchInit" extends="Object">
      <members>
        <member name="altitudeAngle" default="0" type="double"/>
        <member name="azimuthAngle" default="0" type="double"/>
        <member name="clientX" default="0" type="double"/>
        <member name="clientY" default="0" type="double"/>
        <member name="force" default="0" type="float"/>
        <member name="identifier" type="long" required="1"/>
        <member name="pageX" default="0" type="double"/>
        <member name="pageY" default="0" type="double"/>
        <member name="radiusX" default="0" type="float"/>
        <member name="radiusY" default="0" type="float"/>
        <member name="rotationAngle" default="0" type="float"/>
        <member name="screenX" default="0" type="double"/>
        <member name="screenY" default="0" type="double"/>
        <member name="target" type="EventTarget" required="1"/>
        <member name="touchType" default="&quot;direct&quot;" type="TouchType"/>
      </members>
    </dictionary>
    <dictionary name="TrackEventInit" extends="EventInit">
      <members>
        <member name="track" default="null" nullable="1" type="(VideoTrack or AudioTrack or TextTrack)"/>
      </members>
    </dictionary>
    <dictionary name="TransitionEventInit" extends="EventInit">
      <members>
        <member name="elapsedTime" default="0" type="float"/>
        <member name="propertyName" default="&quot;&quot;" type="CSSOMString"/>
        <member name="pseudoElement" default="&quot;&quot;" type="CSSOMString"/>
      </members>
    </dictionary>
    <dictionary name="UIEventInit" extends="EventInit">
      <members>
        <member name="detail" default="0" type="long"/>
        <member name="view" default="null" nullable="1" type="Window"/>
      </members>
    </dictionary>
    <dictionary name="WaveShaperOptions" extends="AudioNodeOptions">
      <members>
        <member name="curve" type="sequence&lt;float&gt;"/>
        <member name="oversample" default="&quot;none&quot;" type="OverSampleType"/>
      </members>
    </dictionary>
    <dictionary name="WebGLContextAttributes" extends="Object">
      <members>
        <member name="alpha" default="true" type="GLboolean"/>
        <member name="antialias" default="true" type="GLboolean"/>
        <member name="depth" default="true" type="GLboolean"/>
        <member name="failIfMajorPerformanceCaveat" default="false" type="GLboolean"/>
        <member name="powerPreference" default="&quot;default&quot;" type="WebGLPowerPreference"/>
        <member name="premultipliedAlpha" default="true" type="GLboolean"/>
        <member name="preserveDrawingBuffer" default="false" type="GLboolean"/>
        <member name="stencil" default="false" type="GLboolean"/>
      </members>
    </dictionary>
    <dictionary name="WebGLContextEventInit" extends="EventInit">
      <members>
        <member name="statusMessage" default="&quot;&quot;" type="DOMString"/>
      </members>
    </dictionary>
    <dictionary name="WheelEventInit" extends="MouseEventInit">
      <members>
        <member name="deltaMode" default="0" type="unsigned long"/>
        <member name="deltaX" default="0" type="double"/>
        <member name="deltaY" default="0" type="double"/>
        <member name="deltaZ" default="0" type="double"/>
      </members>
    </dictionary>
    <dictionary name="WorkerOptions" extends="Object">
      <members>
        <member name="credentials" default="&quot;omit&quot;" type="RequestCredentials"/>
        <member name="name" default="&quot;&quot;" type="DOMString"/>
        <member name="type" default="&quot;classic&quot;" type="WorkerType"/>
      </members>
    </dictionary>
    <dictionary name="WorkletOptions" extends="Object">
      <members>
        <member name="credentials" default="&quot;omit&quot;" type="RequestCredentials"/>
      </members>
    </dictionary>
  </dictionaries>
  <enums>
    <enum name="AppendMode">
      <value>segments</value>
      <value>sequence</value>
    </enum>
    <enum name="AudioContextLatencyCategory">
      <value>balanced</value>
      <value>interactive</value>
      <value>playback</value>
    </enum>
    <enum name="AudioContextState">
      <value>suspended</value>
      <value>running</value>
      <value>closed</value>
    </enum>
    <enum name="BinaryType">
      <value>blob</value>
      <value>arraybuffer</value>
    </enum>
    <enum name="BiquadFilterType">
      <value>lowpass</value>
      <value>highpass</value>
      <value>bandpass</value>
      <value>lowshelf</value>
      <value>highshelf</value>
      <value>peaking</value>
      <value>notch</value>
      <value>allpass</value>
    </enum>
    <enum name="CanPlayTypeResult">
      <value/>
      <value>maybe</value>
      <value>probably</value>
    </enum>
    <enum name="CanvasDirection">
      <value>ltr</value>
      <value>rtl</value>
      <value>inherit</value>
    </enum>
    <enum name="CanvasFillRule">
      <value>nonzero</value>
      <value>evenodd</value>
    </enum>
    <enum name="CanvasLineCap">
      <value>butt</value>
      <value>round</value>
      <value>square</value>
    </enum>
    <enum name="CanvasLineJoin">
      <value>round</value>
      <value>bevel</value>
      <value>miter</value>
    </enum>
    <enum name="CanvasTextAlign">
      <value>start</value>
      <value>end</value>
      <value>left</value>
      <value>right</value>
      <value>center</value>
    </enum>
    <enum name="CanvasTextBaseline">
      <value>top</value>
      <value>hanging</value>
      <value>middle</value>
      <value>alphabetic</value>
      <value>ideographic</value>
      <value>bottom</value>
    </enum>
    <enum name="ChannelCountMode">
      <value>max</value>
      <value>clamped-max</value>
      <value>explicit</value>
    </enum>
    <enum name="ChannelInterpretation">
      <value>speakers</value>
      <value>discrete</value>
    </enum>
    <enum name="ClientType">
      <value>window</value>
      <value>worker</value>
      <value>sharedworker</value>
      <value>all</value>
    </enum>
    <enum name="ColorSpaceConversion">
      <value>none</value>
      <value>default</value>
    </enum>
    <enum name="CSSBoxType">
      <value>margin</value>
      <value>border</value>
      <value>padding</value>
      <value>content</value>
    </enum>
    <enum name="DistanceModelType">
      <value>linear</value>
      <value>inverse</value>
      <value>exponential</value>
    </enum>
    <enum name="DocumentReadyState">
      <value>loading</value>
      <value>interactive</value>
      <value>complete</value>
    </enum>
    <enum name="EndOfStreamError">
      <value>network</value>
      <value>decode</value>
    </enum>
    <enum name="GamepadMappingType">
      <value/>
      <value>standard</value>
    </enum>
    <enum name="IDBCursorDirection">
      <value>next</value>
      <value>nextunique</value>
      <value>prev</value>
      <value>prevunique</value>
    </enum>
    <enum name="IDBRequestReadyState">
      <value>pending</value>
      <value>done</value>
    </enum>
    <enum name="IDBTransactionMode">
      <value>readonly</value>
      <value>readwrite</value>
      <value>versionchange</value>
    </enum>
    <enum name="ImageOrientation">
      <value>none</value>
      <value>flipY</value>
    </enum>
    <enum name="ImageSmoothingQuality">
      <value>low</value>
      <value>medium</value>
      <value>high</value>
    </enum>
    <enum name="KeyFormat">
      <value>raw</value>
      <value>spki</value>
      <value>pkcs8</value>
      <value>jwk</value>
    </enum>
    <enum name="KeyType">
      <value>public</value>
      <value>private</value>
      <value>secret</value>
    </enum>
    <enum name="KeyUsage">
      <value>encrypt</value>
      <value>decrypt</value>
      <value>sign</value>
      <value>verify</value>
      <value>deriveKey</value>
      <value>deriveBits</value>
      <value>wrapKey</value>
      <value>unwrapKey</value>
    </enum>
    <enum name="MediaDeviceKind">
      <value>audioinput</value>
      <value>audiooutput</value>
      <value>videoinput</value>
    </enum>
    <enum name="MediaKeyMessageType">
      <value>license-request</value>
      <value>license-renewal</value>
      <value>license-release</value>
      <value>individualization-request</value>
    </enum>
    <enum name="MediaKeySessionType">
      <value>temporary</value>
      <value>persistent-license</value>
    </enum>
    <enum name="MediaKeysRequirement">
      <value>required</value>
      <value>optional</value>
      <value>not-allowed</value>
    </enum>
    <enum name="MediaKeyStatus">
      <value>usable</value>
      <value>expired</value>
      <value>released</value>
      <value>output-restricted</value>
      <value>output-downscaled</value>
      <value>status-pending</value>
      <value>internal-error</value>
    </enum>
    <enum name="MediaStreamTrackState">
      <value>live</value>
      <value>ended</value>
    </enum>
    <enum name="NavigationType">
      <value>navigate</value>
      <value>reload</value>
      <value>back_forward</value>
      <value>prerender</value>
    </enum>
    <enum name="NotificationDirection">
      <value>auto</value>
      <value>ltr</value>
      <value>rtl</value>
    </enum>
    <enum name="NotificationPermission">
      <value>default</value>
      <value>denied</value>
      <value>granted</value>
    </enum>
    <enum name="OffscreenRenderingContextType">
      <value>2d</value>
      <value>webgl</value>
    </enum>
    <enum name="OscillatorType">
      <value>sine</value>
      <value>square</value>
      <value>sawtooth</value>
      <value>triangle</value>
      <value>custom</value>
    </enum>
    <enum name="OverSampleType">
      <value>none</value>
      <value>2x</value>
      <value>4x</value>
    </enum>
    <enum name="PanningModelType">
      <value>equalpower</value>
      <value>HRTF</value>
    </enum>
    <enum name="PaymentComplete">
      <value>fail</value>
      <value>success</value>
      <value>unknown</value>
    </enum>
    <enum name="PaymentShippingType">
      <value>shipping</value>
      <value>delivery</value>
      <value>pickup</value>
    </enum>
    <enum name="PremultiplyAlpha">
      <value>none</value>
      <value>premultiply</value>
      <value>default</value>
    </enum>
    <enum name="PushEncryptionKeyName">
      <value>p256dh</value>
      <value>auth</value>
    </enum>
    <enum name="PushPermissionState">
      <value>denied</value>
      <value>granted</value>
      <value>prompt</value>
    </enum>
    <enum name="ReadyState">
      <value>closed</value>
      <value>open</value>
      <value>ended</value>
    </enum>
    <enum name="ReferrerPolicy">
      <value/>
      <value>no-referrer</value>
      <value>no-referrer-when-downgrade</value>
      <value>same-origin</value>
      <value>origin</value>
      <value>strict-origin</value>
      <value>origin-when-cross-origin</value>
      <value>strict-origin-when-cross-origin</value>
      <value>unsafe-url</value>
    </enum>
    <enum name="RequestCache">
      <value>default</value>
      <value>no-store</value>
      <value>reload</value>
      <value>no-cache</value>
      <value>force-cache</value>
      <value>only-if-cached</value>
    </enum>
    <enum name="RequestCredentials">
      <value>omit</value>
      <value>same-origin</value>
      <value>include</value>
    </enum>
    <enum name="RequestDestination">
      <value/>
      <value>audio</value>
      <value>document</value>
      <value>embed</value>
      <value>font</value>
      <value>image</value>
      <value>manifest</value>
      <value>object</value>
      <value>report</value>
      <value>script</value>
      <value>serviceworker</value>
      <value>sharedworker</value>
      <value>style</value>
      <value>track</value>
      <value>video</value>
      <value>worker</value>
      <value>xslt</value>
    </enum>
    <enum name="RequestMode">
      <value>navigate</value>
      <value>same-origin</value>
      <value>no-cors</value>
      <value>cors</value>
    </enum>
    <enum name="RequestRedirect">
      <value>follow</value>
      <value>error</value>
      <value>manual</value>
    </enum>
    <enum name="RequestType">
      <value/>
      <value>audio</value>
      <value>font</value>
      <value>image</value>
      <value>script</value>
      <value>style</value>
      <value>track</value>
      <value>video</value>
    </enum>
    <enum name="ResizeQuality">
      <value>pixelated</value>
      <value>low</value>
      <value>medium</value>
      <value>high</value>
    </enum>
    <enum name="ResponseType">
      <value>basic</value>
      <value>cors</value>
      <value>default</value>
      <value>error</value>
      <value>opaque</value>
      <value>opaqueredirect</value>
    </enum>
    <enum name="RTCBundlePolicy">
      <value>balanced</value>
      <value>max-compat</value>
      <value>max-bundle</value>
    </enum>
    <enum name="RTCDataChannelState">
      <value>connecting</value>
      <value>open</value>
      <value>closing</value>
      <value>closed</value>
    </enum>
    <enum name="RTCDegradationPreference">
      <value>maintain-framerate</value>
      <value>maintain-resolution</value>
      <value>balanced</value>
    </enum>
    <enum name="RTCDtlsTransportState">
      <value>new</value>
      <value>connecting</value>
      <value>connected</value>
      <value>closed</value>
      <value>failed</value>
    </enum>
    <enum name="RTCDtxStatus">
      <value>disabled</value>
      <value>enabled</value>
    </enum>
    <enum name="RTCErrorDetailType">
      <value>data-channel-failure</value>
      <value>idp-bad-script-failure</value>
      <value>idp-execution-failure</value>
      <value>idp-load-failure</value>
      <value>idp-need-login</value>
      <value>idp-timeout</value>
      <value>idp-tls-failure</value>
      <value>idp-token-expired</value>
      <value>idp-token-invalid</value>
      <value>sctp-failure</value>
      <value>sdp-syntax-error</value>
    </enum>
    <enum name="RTCIceCandidateType">
      <value>host</value>
      <value>srflx</value>
      <value>prflx</value>
      <value>relay</value>
    </enum>
    <enum name="RTCIceComponent">
      <value>rtp</value>
      <value>rtcp</value>
    </enum>
    <enum name="RTCIceConnectionState">
      <value>new</value>
      <value>checking</value>
      <value>connected</value>
      <value>completed</value>
      <value>failed</value>
      <value>disconnected</value>
      <value>closed</value>
    </enum>
    <enum name="RTCIceCredentialType">
      <value>password</value>
      <value>oauth</value>
    </enum>
    <enum name="RTCIceGathererState">
      <value>new</value>
      <value>gathering</value>
      <value>complete</value>
    </enum>
    <enum name="RTCIceGatheringState">
      <value>new</value>
      <value>gathering</value>
      <value>complete</value>
    </enum>
    <enum name="RTCIceProtocol">
      <value>udp</value>
      <value>tcp</value>
    </enum>
    <enum name="RTCIceRole">
      <value>controlling</value>
      <value>controlled</value>
    </enum>
    <enum name="RTCIceTcpCandidateType">
      <value>active</value>
      <value>passive</value>
      <value>so</value>
    </enum>
    <enum name="RTCIceTransportPolicy">
      <value>relay</value>
      <value>all</value>
    </enum>
    <enum name="RTCIceTransportState">
      <value>new</value>
      <value>checking</value>
      <value>connected</value>
      <value>completed</value>
      <value>failed</value>
      <value>disconnected</value>
      <value>closed</value>
    </enum>
    <enum name="RTCPeerConnectionState">
      <value>new</value>
      <value>connecting</value>
      <value>connected</value>
      <value>disconnected</value>
      <value>failed</value>
      <value>closed</value>
    </enum>
    <enum name="RTCPriorityType">
      <value>very-low</value>
      <value>low</value>
      <value>medium</value>
      <value>high</value>
    </enum>
    <enum name="RTCRtcpMuxPolicy">
      <value>negotiate</value>
      <value>require</value>
    </enum>
    <enum name="RTCRtpTransceiverDirection">
      <value>sendrecv</value>
      <value>sendonly</value>
      <value>recvonly</value>
      <value>inactive</value>
    </enum>
    <enum name="RTCSdpType">
      <value>offer</value>
      <value>pranswer</value>
      <value>answer</value>
      <value>rollback</value>
    </enum>
    <enum name="RTCSignalingState">
      <value>stable</value>
      <value>have-local-offer</value>
      <value>have-remote-offer</value>
      <value>have-local-pranswer</value>
      <value>have-remote-pranswer</value>
      <value>closed</value>
    </enum>
    <enum name="RTCStatsIceCandidatePairState">
      <value>frozen</value>
      <value>waiting</value>
      <value>inprogress</value>
      <value>failed</value>
      <value>succeeded</value>
      <value>cancelled</value>
    </enum>
    <enum name="RTCStatsType"/>
    <enum name="RTCStatsType">
      <value>codec</value>
      <value>inbound-rtp</value>
      <value>outbound-rtp</value>
      <value>peer-connection</value>
      <value>data-channel</value>
      <value>track</value>
      <value>transport</value>
      <value>candidate-pair</value>
      <value>local-candidate</value>
      <value>remote-candidate</value>
      <value>certificate</value>
    </enum>
    <enum name="ScrollBehavior">
      <value>auto</value>
      <value>instant</value>
      <value>smooth</value>
    </enum>
    <enum name="ScrollLogicalPosition">
      <value>start</value>
      <value>center</value>
      <value>end</value>
      <value>nearest</value>
    </enum>
    <enum name="ScrollRestoration">
      <value>auto</value>
      <value>manual</value>
    </enum>
    <enum name="SelectionMode">
      <value>select</value>
      <value>start</value>
      <value>end</value>
      <value>preserve</value>
    </enum>
    <enum name="ServiceWorkerState">
      <value>installing</value>
      <value>installed</value>
      <value>activating</value>
      <value>activated</value>
      <value>redundant</value>
    </enum>
    <enum name="ShadowRootMode">
      <value>open</value>
      <value>closed</value>
    </enum>
    <enum name="SpeechRecognitionErrorCode">
      <value>no-speech</value>
      <value>aborted</value>
      <value>audio-capture</value>
      <value>network</value>
      <value>not-allowed</value>
      <value>service-not-allowed</value>
      <value>bad-grammar</value>
      <value>language-not-supported</value>
    </enum>
    <enum name="SpeechSynthesisErrorCode">
      <value>canceled</value>
      <value>interrupted</value>
      <value>audio-busy</value>
      <value>audio-hardware</value>
      <value>network</value>
      <value>synthesis-unavailable</value>
      <value>synthesis-failed</value>
      <value>language-unavailable</value>
      <value>voice-unavailable</value>
      <value>text-too-long</value>
      <value>invalid-argument</value>
    </enum>
    <enum name="TextTrackKind">
      <value>subtitles</value>
      <value>captions</value>
      <value>descriptions</value>
      <value>chapters</value>
      <value>metadata</value>
    </enum>
    <enum name="TextTrackMode">
      <value>disabled</value>
      <value>hidden</value>
      <value>showing</value>
    </enum>
    <enum name="TouchType">
      <value>direct</value>
      <value>stylus</value>
    </enum>
    <enum name="VideoFacingModeEnum">
      <value>user</value>
      <value>environment</value>
      <value>left</value>
      <value>right</value>
    </enum>
    <enum name="VisibilityState">
      <value>hidden</value>
      <value>visible</value>
      <value>prerender</value>
      <value>unloaded</value>
    </enum>
    <enum name="WebGLPowerPreference">
      <value>default</value>
      <value>low-power</value>
      <value>high-performance</value>
    </enum>
    <enum name="WorkerType">
      <value>classic</value>
      <value>module</value>
    </enum>
    <enum name="XMLHttpRequestResponseType">
      <value/>
      <value>arraybuffer</value>
      <value>blob</value>
      <value>document</value>
      <value>json</value>
      <value>text</value>
    </enum>
  </enums>
  <interfaces>
    <interface name="AnalyserNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="AnalyserOptions"/>
      </constructor>
      <methods>
        <method name="getByteFrequencyData" type="void">
          <param name="array" type="Uint8Array"/>
        </method>
        <method name="getByteTimeDomainData" type="void">
          <param name="array" type="Uint8Array"/>
        </method>
        <method name="getFloatFrequencyData" type="void">
          <param name="array" type="Float32Array"/>
        </method>
        <method name="getFloatTimeDomainData" type="void">
          <param name="array" type="Float32Array"/>
        </method>
      </methods>
      <properties>
        <property name="fftSize" type="unsigned long"/>
        <property name="frequencyBinCount" read-only="1" type="unsigned long"/>
        <property name="maxDecibels" type="double"/>
        <property name="minDecibels" type="double"/>
        <property name="smoothingTimeConstant" type="double"/>
      </properties>
    </interface>
    <interface name="AnimationEvent" extends="Event">
      <constructor>
        <param name="type" type="CSSOMString"/>
        <param name="animationEventInitDict" optional="1" type="AnimationEventInit"/>
      </constructor>
      <properties>
        <property name="animationName" read-only="1" type="CSSOMString"/>
        <property name="elapsedTime" read-only="1" type="float"/>
        <property name="pseudoElement" read-only="1" type="CSSOMString"/>
      </properties>
    </interface>
    <interface name="ApplicationCache" extends="EventTarget">
      <constants>
        <constant name="CHECKING" type="unsigned short" value="2"/>
        <constant name="DOWNLOADING" type="unsigned short" value="3"/>
        <constant name="IDLE" type="unsigned short" value="1"/>
        <constant name="OBSOLETE" type="unsigned short" value="5"/>
        <constant name="UNCACHED" type="unsigned short" value="0"/>
        <constant name="UPDATEREADY" type="unsigned short" value="4"/>
      </constants>
      <methods>
        <method name="abort" type="void"/>
        <method name="swapCache" type="void"/>
        <method name="update" type="void"/>
      </methods>
      <properties>
        <property name="oncached" type="EventHandler" event-handler="cached"/>
        <property name="onchecking" type="EventHandler" event-handler="checking"/>
        <property name="ondownloading" type="EventHandler" event-handler="downloading"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="onnoupdate" type="EventHandler" event-handler="noupdate"/>
        <property name="onobsolete" type="EventHandler" event-handler="obsolete"/>
        <property name="onprogress" type="EventHandler" event-handler="progress"/>
        <property name="onupdateready" type="EventHandler" event-handler="updateready"/>
        <property name="status" read-only="1" type="unsigned short"/>
      </properties>
      <events>
        <event name="progress" dispatch="sync" follows="downloading" precedes="updateready" skips-window="1" type="ProgressEvent"/>
        <event name="obsolete" dispatch="sync" follows="downloading" skips-window="1" type="Event"/>
        <event name="error" dispatch="sync" follows="downloading" skips-window="1" type="Event"/>
        <event name="cached" dispatch="sync" follows="downloading" skips-window="1" type="Event"/>
        <event name="updateready" dispatch="sync" follows="progress" skips-window="1" type="Event"/>
        <event name="downloading" dispatch="sync" follows="checking" precedes="noupdate progress obsolete cached" skips-window="1" type="Event"/>
        <event name="noupdate" dispatch="sync" follows="downloading" skips-window="1" type="Event"/>
        <event name="checking" dispatch="sync" precedes="downloading" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="Attr" extends="Node" exposed="Window">
      <properties>
        <property name="localName" read-only="1" type="DOMString"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="namespaceURI" read-only="1" nullable="1" type="DOMString"/>
        <property name="ownerElement" read-only="1" nullable="1" type="Element"/>
        <property name="prefix" read-only="1" nullable="1" type="DOMString"/>
        <property name="specified" read-only="1" type="boolean"/>
        <property name="value" type="DOMString"/>
      </properties>
    </interface>
    <interface name="AudioBuffer" extends="Object">
      <constructor>
        <param name="options" type="AudioBufferOptions"/>
      </constructor>
      <methods>
        <method name="copyFromChannel" type="void">
          <param name="destination" type="Float32Array"/>
          <param name="channelNumber" type="unsigned long"/>
          <param name="startInChannel" default="0" optional="1" type="unsigned long"/>
        </method>
        <method name="copyToChannel" type="void">
          <param name="source" type="Float32Array"/>
          <param name="channelNumber" type="unsigned long"/>
          <param name="startInChannel" default="0" optional="1" type="unsigned long"/>
        </method>
        <method name="getChannelData" type="Float32Array">
          <param name="channel" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="duration" read-only="1" type="double"/>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="numberOfChannels" read-only="1" type="unsigned long"/>
        <property name="sampleRate" read-only="1" type="float"/>
      </properties>
    </interface>
    <interface name="AudioBufferSourceNode" extends="AudioScheduledSourceNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="AudioBufferSourceOptions"/>
      </constructor>
      <methods>
        <method name="start" type="void">
          <param name="when" default="0" optional="1" type="double"/>
          <param name="offset" optional="1" type="double"/>
          <param name="duration" optional="1" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="buffer" nullable="1" type="AudioBuffer"/>
        <property name="detune" read-only="1" type="AudioParam"/>
        <property name="loop" type="boolean"/>
        <property name="loopEnd" type="double"/>
        <property name="loopStart" type="double"/>
        <property name="playbackRate" read-only="1" type="AudioParam"/>
      </properties>
      <events>
        <event name="end" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="AudioContext" extends="BaseAudioContext">
      <constructor>
        <param name="contextOptions" optional="1" type="AudioContextOptions"/>
      </constructor>
      <constructor/>
      <methods>
        <method name="close" type="Promise&lt;void&gt;"/>
        <method name="createMediaElementSource" type="MediaElementAudioSourceNode">
          <param name="mediaElement" type="HTMLMediaElement"/>
        </method>
        <method name="createMediaStreamDestination" type="MediaStreamAudioDestinationNode"/>
        <method name="createMediaStreamSource" type="MediaStreamAudioSourceNode">
          <param name="mediaStream" type="MediaStream"/>
        </method>
        <method name="createMediaStreamTrackSource" type="MediaStreamTrackAudioSourceNode">
          <param name="mediaStreamTrack" type="AudioMediaStreamTrack"/>
        </method>
        <method name="getOutputTimestamp" type="AudioTimestamp"/>
        <method name="suspend" type="Promise&lt;void&gt;"/>
      </methods>
      <properties>
        <property name="baseLatency" read-only="1" type="double"/>
        <property name="outputLatency" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="AudioDestinationNode" extends="AudioNode">
      <properties>
        <property name="maxChannelCount" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="AudioListener" extends="Object">
      <methods>
        <method name="setOrientation" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="z" type="float"/>
          <param name="xUp" type="float"/>
          <param name="yUp" type="float"/>
          <param name="zUp" type="float"/>
        </method>
        <method name="setPosition" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="z" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="forwardX" read-only="1" type="AudioParam"/>
        <property name="forwardY" read-only="1" type="AudioParam"/>
        <property name="forwardZ" read-only="1" type="AudioParam"/>
        <property name="positionX" read-only="1" type="AudioParam"/>
        <property name="positionY" read-only="1" type="AudioParam"/>
        <property name="positionZ" read-only="1" type="AudioParam"/>
        <property name="upX" read-only="1" type="AudioParam"/>
        <property name="upY" read-only="1" type="AudioParam"/>
        <property name="upZ" read-only="1" type="AudioParam"/>
      </properties>
    </interface>
    <interface name="AudioNode" extends="EventTarget">
      <methods>
        <method name="connect" type="AudioNode">
          <param name="destination" type="AudioNode"/>
          <param name="output" default="0" optional="1" type="unsigned long"/>
          <param name="input" default="0" optional="1" type="unsigned long"/>
        </method>
        <method name="connect" type="void">
          <param name="destination" type="AudioParam"/>
          <param name="output" default="0" optional="1" type="unsigned long"/>
        </method>
        <method name="disconnect" type="void"/>
        <method name="disconnect" type="void">
          <param name="output" type="unsigned long"/>
        </method>
        <method name="disconnect" type="void">
          <param name="destination" type="AudioNode"/>
        </method>
        <method name="disconnect" type="void">
          <param name="destination" type="AudioNode"/>
          <param name="output" type="unsigned long"/>
        </method>
        <method name="disconnect" type="void">
          <param name="destination" type="AudioNode"/>
          <param name="output" type="unsigned long"/>
          <param name="input" type="unsigned long"/>
        </method>
        <method name="disconnect" type="void">
          <param name="destination" type="AudioParam"/>
        </method>
        <method name="disconnect" type="void">
          <param name="destination" type="AudioParam"/>
          <param name="output" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="channelCount" type="unsigned long"/>
        <property name="channelCountMode" type="ChannelCountMode"/>
        <property name="channelInterpretation" type="ChannelInterpretation"/>
        <property name="context" read-only="1" type="BaseAudioContext"/>
        <property name="numberOfInputs" read-only="1" type="unsigned long"/>
        <property name="numberOfOutputs" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="AudioParam" extends="Object">
      <methods>
        <method name="cancelAndHoldAtTime" type="AudioParam">
          <param name="cancelTime" type="double"/>
        </method>
        <method name="cancelScheduledValues" type="AudioParam">
          <param name="cancelTime" type="double"/>
        </method>
        <method name="exponentialRampToValueAtTime" type="AudioParam">
          <param name="value" type="float"/>
          <param name="endTime" type="double"/>
        </method>
        <method name="linearRampToValueAtTime" type="AudioParam">
          <param name="value" type="float"/>
          <param name="endTime" type="double"/>
        </method>
        <method name="setTargetAtTime" type="AudioParam">
          <param name="target" type="float"/>
          <param name="startTime" type="double"/>
          <param name="timeConstant" type="float"/>
        </method>
        <method name="setValueAtTime" type="AudioParam">
          <param name="value" type="float"/>
          <param name="startTime" type="double"/>
        </method>
        <method name="setValueCurveAtTime" type="AudioParam">
          <param name="values" type="Float32Array"/>
          <param name="startTime" type="double"/>
          <param name="duration" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="defaultValue" read-only="1" type="float"/>
        <property name="maxValue" read-only="1" type="float"/>
        <property name="minValue" read-only="1" type="float"/>
        <property name="value" type="float"/>
      </properties>
    </interface>
    <interface name="AudioParamMap" extends="Object"/>
    <interface name="AudioProcessingEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="AudioProcessingEventInit"/>
      </constructor>
      <properties>
        <property name="inputBuffer" read-only="1" type="AudioBuffer"/>
        <property name="outputBuffer" read-only="1" type="AudioBuffer"/>
        <property name="playbackTime" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="AudioScheduledSourceNode" extends="AudioNode">
      <methods>
        <method name="start" type="void">
          <param name="when" default="0" optional="1" type="double"/>
        </method>
        <method name="stop" type="void">
          <param name="when" default="0" optional="1" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="onended" type="EventHandler" event-handler="ended"/>
      </properties>
      <events>
        <event name="ended" type="Event"/>
      </events>
    </interface>
    <interface name="AudioTrack" extends="Object">
      <properties>
        <property name="enabled" type="boolean"/>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="kind" read-only="1" type="DOMString"/>
        <property name="label" read-only="1" type="DOMString"/>
        <property name="language" read-only="1" type="DOMString"/>
        <property name="sourceBuffer" read-only="1" nullable="1" type="SourceBuffer"/>
      </properties>
    </interface>
    <interface name="AudioTrackList" extends="EventTarget">
      <anonymous-methods>
        <method getter="1" type="AudioTrack">
          <param name="index" type="unsigned long"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="getTrackById" nullable="1" type="AudioTrack">
          <param name="id" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="onaddtrack" type="EventHandler" event-handler="addtrack"/>
        <property name="onchange" type="EventHandler" event-handler="change"/>
        <property name="onremovetrack" type="EventHandler" event-handler="removetrack"/>
      </properties>
      <events>
        <event name="addtrack" dispatch="async" skips-window="1" type="TrackEvent"/>
        <event name="removetrack" dispatch="async" skips-window="1" type="TrackEvent"/>
        <event name="change" dispatch="async" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="AudioWorkletGlobalScope" extends="WorkletGlobalScope" global="Worklet AudioWorklet" exposed="AudioWorklet">
      <methods>
        <method name="registerProcessor" type="void">
          <param name="name" type="DOMString"/>
          <param name="processorCtor" type="VoidFunction"/>
        </method>
      </methods>
    </interface>
    <interface name="AudioWorkletNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="AudioWorkletOptions"/>
      </constructor>
      <methods>
        <method name="sendData" type="void">
          <param name="data" type="any"/>
        </method>
      </methods>
      <properties>
        <property name="ondata" type="EventHandler" event-handler="data"/>
        <property name="parameters" read-only="1" type="AudioParamMap"/>
      </properties>
      <events>
        <event name="data" type="Event"/>
      </events>
    </interface>
    <interface name="AudioWorkletProcessor" extends="EventTarget">
      <methods>
        <method name="sendData" type="void">
          <param name="data" type="any"/>
        </method>
      </methods>
      <properties>
        <property name="contextInfo" read-only="1" type="AudioContextInfo"/>
        <property name="ondata" type="EventHandler" event-handler="data"/>
      </properties>
      <events>
        <event name="data" type="Event"/>
      </events>
    </interface>
    <interface name="BarProp" extends="Object">
      <properties>
        <property name="visible" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="BaseAudioContext" extends="EventTarget">
      <methods>
        <method name="createAnalyser" type="AnalyserNode"/>
        <method name="createBiquadFilter" type="BiquadFilterNode"/>
        <method name="createBuffer" type="AudioBuffer">
          <param name="numberOfChannels" type="unsigned long"/>
          <param name="length" type="unsigned long"/>
          <param name="sampleRate" type="float"/>
        </method>
        <method name="createBufferSource" type="AudioBufferSourceNode"/>
        <method name="createChannelMerger" type="ChannelMergerNode">
          <param name="numberOfInputs" default="6" optional="1" type="unsigned long"/>
        </method>
        <method name="createChannelSplitter" type="ChannelSplitterNode">
          <param name="numberOfOutputs" default="6" optional="1" type="unsigned long"/>
        </method>
        <method name="createConstantSource" type="ConstantSourceNode"/>
        <method name="createConvolver" type="ConvolverNode"/>
        <method name="createDelay" type="DelayNode">
          <param name="maxDelayTime" default="1" optional="1" type="double"/>
        </method>
        <method name="createDynamicsCompressor" type="DynamicsCompressorNode"/>
        <method name="createGain" type="GainNode"/>
        <method name="createIIRFilter" type="IIRFilterNode">
          <param name="feedforward" type="sequence&lt;double&gt;"/>
          <param name="feedback" type="sequence&lt;double&gt;"/>
        </method>
        <method name="createOscillator" type="OscillatorNode"/>
        <method name="createPanner" type="PannerNode"/>
        <method name="createPeriodicWave" type="PeriodicWave">
          <param name="real" type="Float32Array"/>
          <param name="imag" type="Float32Array"/>
          <param name="constraints" optional="1" type="PeriodicWaveConstraints"/>
        </method>
        <method name="createScriptProcessor" type="ScriptProcessorNode">
          <param name="bufferSize" default="0" optional="1" type="unsigned long"/>
          <param name="numberOfInputChannels" default="2" optional="1" type="unsigned long"/>
          <param name="numberOfOutputChannels" default="2" optional="1" type="unsigned long"/>
        </method>
        <method name="createStereoPanner" type="StereoPannerNode"/>
        <method name="createWaveShaper" type="WaveShaperNode"/>
        <method name="decodeAudioData" type="Promise&lt;AudioBuffer&gt;">
          <param name="audioData" type="ArrayBuffer"/>
          <param name="successCallback" optional="1" type="DecodeSuccessCallback"/>
          <param name="errorCallback" optional="1" type="DecodeErrorCallback"/>
        </method>
        <method name="resume" type="Promise&lt;void&gt;"/>
      </methods>
      <properties>
        <property name="currentTime" read-only="1" type="double"/>
        <property name="destination" read-only="1" type="AudioDestinationNode"/>
        <property name="listener" read-only="1" type="AudioListener"/>
        <property name="onstatechange" type="EventHandler" event-handler="statechange"/>
        <property name="sampleRate" read-only="1" type="float"/>
        <property name="state" read-only="1" type="AudioContextState"/>
      </properties>
      <events>
        <event name="statechange" type="Event"/>
      </events>
    </interface>
    <interface name="BeforeUnloadEvent" extends="Event">
      <properties>
        <property name="returnValue" type="DOMString"/>
      </properties>
    </interface>
    <interface name="BiquadFilterNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="BiquadFilterOptions"/>
      </constructor>
      <methods>
        <method name="getFrequencyResponse" type="void">
          <param name="frequencyHz" type="Float32Array"/>
          <param name="magResponse" type="Float32Array"/>
          <param name="phaseResponse" type="Float32Array"/>
        </method>
      </methods>
      <properties>
        <property name="detune" read-only="1" type="AudioParam"/>
        <property name="frequency" read-only="1" type="AudioParam"/>
        <property name="gain" read-only="1" type="AudioParam"/>
        <property name="Q" read-only="1" type="AudioParam"/>
        <property name="type" type="BiquadFilterType"/>
      </properties>
    </interface>
    <interface name="Blob" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="blobParts" optional="1" type="sequence&lt;BlobPart&gt;"/>
        <param name="options" optional="1" type="BlobPropertyBag"/>
      </constructor>
      <methods>
        <method name="slice" type="Blob">
          <param name="start" optional="1" type="long long"/>
          <param name="end" optional="1" type="long long"/>
          <param name="contentType" optional="1" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="size" read-only="1" type="unsigned long long"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="BroadcastChannel" extends="EventTarget" exposed="Window Worker">
      <constructor>
        <param name="name" type="DOMString"/>
      </constructor>
      <methods>
        <method name="close" type="void"/>
        <method name="postMessage" type="void">
          <param name="message" type="any"/>
        </method>
      </methods>
      <properties>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="onmessage" type="EventHandler" event-handler="message"/>
        <property name="onmessageerror" type="EventHandler" event-handler="messageerror"/>
      </properties>
      <events>
        <event name="message" type="MessageEvent"/>
        <event name="messageerror" type="MessageEvent"/>
      </events>
    </interface>
    <interface name="Cache" extends="Object" exposed="Window Worker">
      <methods>
        <method name="add" type="Promise&lt;void&gt;">
          <param name="request" type="RequestInfo"/>
        </method>
        <method name="addAll" type="Promise&lt;void&gt;">
          <param name="requests" type="sequence&lt;RequestInfo&gt;"/>
        </method>
        <method name="delete" type="Promise&lt;boolean&gt;">
          <param name="request" type="RequestInfo"/>
          <param name="options" optional="1" type="CacheQueryOptions"/>
        </method>
        <method name="keys" type="Promise&lt;sequence&lt;Request&gt;&gt;">
          <param name="request" optional="1" type="RequestInfo"/>
          <param name="options" optional="1" type="CacheQueryOptions"/>
        </method>
        <method name="match" type="Promise&lt;any&gt;">
          <param name="request" type="RequestInfo"/>
          <param name="options" optional="1" type="CacheQueryOptions"/>
        </method>
        <method name="matchAll" type="Promise&lt;sequence&lt;Response&gt;&gt;">
          <param name="request" optional="1" type="RequestInfo"/>
          <param name="options" optional="1" type="CacheQueryOptions"/>
        </method>
        <method name="put" type="Promise&lt;void&gt;">
          <param name="request" type="RequestInfo"/>
          <param name="response" type="Response"/>
        </method>
      </methods>
    </interface>
    <interface name="CacheStorage" extends="Object" exposed="Window Worker">
      <methods>
        <method name="delete" type="Promise&lt;boolean&gt;">
          <param name="cacheName" type="DOMString"/>
        </method>
        <method name="has" type="Promise&lt;boolean&gt;">
          <param name="cacheName" type="DOMString"/>
        </method>
        <method name="keys" type="Promise&lt;sequence&lt;DOMString&gt;&gt;"/>
        <method name="match" type="Promise&lt;any&gt;">
          <param name="request" type="RequestInfo"/>
          <param name="options" optional="1" type="CacheQueryOptions"/>
        </method>
        <method name="open" type="Promise&lt;Cache&gt;">
          <param name="cacheName" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasGradient" extends="Object" exposed="Window Worker">
      <methods>
        <method name="addColorStop" type="void">
          <param name="offset" type="double"/>
          <param name="color" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasPattern" extends="Object" exposed="Window Worker">
      <methods>
        <method name="setTransform" type="void">
          <param name="transform" optional="1" type="DOMMatrixInit"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasRenderingContext2D" extends="Object">
      <properties>
        <property name="canvas" read-only="1" type="HTMLCanvasElement"/>
      </properties>
      <implements>CanvasState</implements>
      <implements>CanvasTransform</implements>
      <implements>CanvasCompositing</implements>
      <implements>CanvasImageSmoothing</implements>
      <implements>CanvasFillStrokeStyles</implements>
      <implements>CanvasShadowStyles</implements>
      <implements>CanvasFilters</implements>
      <implements>CanvasRect</implements>
      <implements>CanvasDrawPath</implements>
      <implements>CanvasUserInterface</implements>
      <implements>CanvasText</implements>
      <implements>CanvasDrawImage</implements>
      <implements>CanvasImageData</implements>
      <implements>CanvasPathDrawingStyles</implements>
      <implements>CanvasTextDrawingStyles</implements>
      <implements>CanvasPath</implements>
    </interface>
    <interface name="CaretPosition" extends="Object">
      <methods>
        <method name="getClientRect" nullable="1" type="DOMRect"/>
      </methods>
      <properties>
        <property name="offset" read-only="1" type="unsigned long"/>
        <property name="offsetNode" read-only="1" type="Node"/>
      </properties>
    </interface>
    <interface name="CDATASection" extends="Text" exposed="Window"/>
    <interface name="ChannelMergerNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="ChannelMergerOptions"/>
      </constructor>
    </interface>
    <interface name="ChannelSplitterNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="ChannelSplitterNode"/>
      </constructor>
    </interface>
    <interface name="CharacterData" extends="Node" exposed="Window">
      <methods>
        <method name="appendData" type="void">
          <param name="data" type="DOMString"/>
        </method>
        <method name="deleteData" type="void">
          <param name="offset" type="unsigned long"/>
          <param name="count" type="unsigned long"/>
        </method>
        <method name="insertData" type="void">
          <param name="offset" type="unsigned long"/>
          <param name="data" type="DOMString"/>
        </method>
        <method name="replaceData" type="void">
          <param name="offset" type="unsigned long"/>
          <param name="count" type="unsigned long"/>
          <param name="data" type="DOMString"/>
        </method>
        <method name="substringData" type="DOMString">
          <param name="offset" type="unsigned long"/>
          <param name="count" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="data" type="DOMString"/>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
      <implements>NonDocumentTypeChildNode</implements>
      <implements>ChildNode</implements>
    </interface>
    <interface name="Client" extends="Object" exposed="ServiceWorker">
      <methods>
        <method name="postMessage" type="void">
          <param name="message" type="any"/>
          <param name="transfer" default="[]" optional="1" type="sequence&lt;object&gt;"/>
        </method>
      </methods>
      <properties>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="reserved" read-only="1" type="boolean"/>
        <property name="type" read-only="1" type="ClientType"/>
        <property name="url" read-only="1" type="USVString"/>
      </properties>
    </interface>
    <interface name="Clients" extends="Object" exposed="ServiceWorker">
      <methods>
        <method name="claim" type="Promise&lt;void&gt;"/>
        <method name="get" type="Promise&lt;any&gt;">
          <param name="id" type="DOMString"/>
        </method>
        <method name="matchAll" type="Promise&lt;sequence&lt;Client&gt;&gt;">
          <param name="options" optional="1" type="ClientQueryOptions"/>
        </method>
        <method name="openWindow" type="Promise&lt;WindowClient?&gt;">
          <param name="url" type="USVString"/>
        </method>
      </methods>
    </interface>
    <interface name="ClipboardEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="ClipboardEventInit"/>
      </constructor>
      <properties>
        <property name="clipboardData" read-only="1" nullable="1" type="DataTransfer"/>
      </properties>
    </interface>
    <interface name="CloseEvent" extends="Event" exposed="Window Worker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="CloseEventInit"/>
      </constructor>
      <properties>
        <property name="code" read-only="1" type="unsigned short"/>
        <property name="reason" read-only="1" type="USVString"/>
        <property name="wasClean" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="Comment" extends="CharacterData" exposed="Window">
      <constructor>
        <param name="data" default="&quot;&quot;" optional="1" type="DOMString"/>
      </constructor>
    </interface>
    <interface name="CompositionEvent" extends="UIEvent">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="CompositionEventInit"/>
      </constructor>
      <properties>
        <property name="data" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="ConstantSourceNode" extends="AudioScheduledSourceNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="ConstantSourceOptions"/>
      </constructor>
      <properties>
        <property name="offset" read-only="1" type="AudioParam"/>
      </properties>
    </interface>
    <interface name="ConvolverNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="ConvolverOptions"/>
      </constructor>
      <properties>
        <property name="buffer" nullable="1" type="AudioBuffer"/>
        <property name="normalize" type="boolean"/>
      </properties>
    </interface>
    <interface name="Crypto" extends="Object" exposed="Window Worker">
      <methods>
        <method name="getRandomValues" type="ArrayBufferView">
          <param name="array" type="ArrayBufferView"/>
        </method>
      </methods>
      <properties>
        <property name="subtle" read-only="1" type="SubtleCrypto"/>
      </properties>
    </interface>
    <interface name="CryptoKey" extends="Object" exposed="Window Worker">
      <properties>
        <property name="algorithm" read-only="1" type="object"/>
        <property name="extractable" read-only="1" type="boolean"/>
        <property name="type" read-only="1" type="KeyType"/>
        <property name="usages" read-only="1" type="object"/>
      </properties>
    </interface>
    <interface name="CSS" extends="Object">
      <methods>
        <method name="escape" static="1" type="CSSOMString">
          <param name="ident" type="CSSOMString"/>
        </method>
        <method name="supports" static="1" type="boolean">
          <param name="property" type="CSSOMString"/>
          <param name="value" type="CSSOMString"/>
        </method>
        <method name="supports" static="1" type="boolean">
          <param name="conditionText" type="CSSOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="CSSConditionRule" extends="CSSGroupingRule">
      <properties>
        <property name="conditionText" type="CSSOMString"/>
      </properties>
    </interface>
    <interface name="CSSGroupingRule" extends="CSSRule">
      <methods>
        <method name="deleteRule" type="void">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="insertRule" type="unsigned long">
          <param name="rule" type="CSSOMString"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="cssRules" read-only="1" type="CSSRuleList"/>
      </properties>
    </interface>
    <interface name="CSSGroupingRule" extends="CSSRule">
      <methods>
        <method name="deleteRule" type="void">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="insertRule" type="unsigned long">
          <param name="rule" type="CSSOMString"/>
          <param name="index" default="0" optional="1" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="cssRules" read-only="1" type="CSSRuleList"/>
      </properties>
    </interface>
    <interface name="CSSImportRule" extends="CSSRule">
      <properties>
        <property name="href" read-only="1" type="USVString"/>
        <property name="media" read-only="1" type="MediaList"/>
        <property name="styleSheet" read-only="1" type="CSSStyleSheet"/>
      </properties>
    </interface>
    <interface name="CSSKeyframeRule" extends="CSSRule">
      <properties>
        <property name="keyText" type="CSSOMString"/>
        <property name="style" read-only="1" type="CSSStyleDeclaration"/>
      </properties>
    </interface>
    <interface name="CSSKeyframesRule" extends="CSSRule">
      <methods>
        <method name="appendRule" type="void">
          <param name="rule" type="CSSOMString"/>
        </method>
        <method name="deleteRule" type="void">
          <param name="select" type="CSSOMString"/>
        </method>
        <method name="findRule" nullable="1" type="CSSKeyframeRule">
          <param name="select" type="CSSOMString"/>
        </method>
      </methods>
      <properties>
        <property name="cssRules" read-only="1" type="CSSRuleList"/>
        <property name="name" type="CSSOMString"/>
      </properties>
    </interface>
    <interface name="CSSMarginRule" extends="CSSRule">
      <properties>
        <property name="name" read-only="1" type="CSSOMString"/>
        <property name="style" read-only="1" type="CSSStyleDeclaration"/>
      </properties>
    </interface>
    <interface name="CSSMediaRule" extends="CSSConditionRule">
      <properties>
        <property name="media" read-only="1" type="MediaList"/>
      </properties>
    </interface>
    <interface name="CSSNamespaceRule" extends="CSSRule">
      <properties>
        <property name="namespaceURI" read-only="1" type="CSSOMString"/>
        <property name="prefix" read-only="1" type="CSSOMString"/>
      </properties>
    </interface>
    <interface name="CSSPageRule" extends="CSSGroupingRule">
      <properties>
        <property name="selectorText" type="CSSOMString"/>
        <property name="style" read-only="1" type="CSSStyleDeclaration"/>
      </properties>
    </interface>
    <interface name="CSSRule" extends="Object">
      <constants>
        <constant name="CHARSET_RULE" type="unsigned short" value="2"/>
        <constant name="FONT_FACE_RULE" type="unsigned short" value="5"/>
        <constant name="IMPORT_RULE" type="unsigned short" value="3"/>
        <constant name="KEYFRAME_RULE" type="unsigned short" value="8"/>
        <constant name="KEYFRAMES_RULE" type="unsigned short" value="7"/>
        <constant name="MARGIN_RULE" type="unsigned short" value="9"/>
        <constant name="MEDIA_RULE" type="unsigned short" value="4"/>
        <constant name="NAMESPACE_RULE" type="unsigned short" value="10"/>
        <constant name="PAGE_RULE" type="unsigned short" value="6"/>
        <constant name="STYLE_RULE" type="unsigned short" value="1"/>
        <constant name="SUPPORTS_RULE" type="unsigned short" value="12"/>
      </constants>
      <properties>
        <property name="cssText" type="CSSOMString"/>
        <property name="parentRule" read-only="1" nullable="1" type="CSSRule"/>
        <property name="parentStyleSheet" read-only="1" nullable="1" type="CSSStyleSheet"/>
        <property name="type" read-only="1" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="CSSRuleList" extends="Object">
      <methods>
        <method name="item" getter="1" nullable="1" type="CSSRule">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="CSSStyleDeclaration" extends="Object">
      <methods>
        <method name="getPropertyPriority" type="CSSOMString">
          <param name="property" type="CSSOMString"/>
        </method>
        <method name="getPropertyValue" type="CSSOMString">
          <param name="property" type="CSSOMString"/>
        </method>
        <method name="item" getter="1" type="CSSOMString">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeProperty" type="CSSOMString">
          <param name="property" type="CSSOMString"/>
        </method>
        <method name="setProperty" type="void">
          <param name="property" type="CSSOMString"/>
          <param name="value" type="CSSOMString"/>
          <param name="priority" default="&quot;&quot;" optional="1" type="CSSOMString"/>
        </method>
        <method name="setPropertyPriority" type="void">
          <param name="property" type="CSSOMString"/>
          <param name="priority" type="CSSOMString"/>
        </method>
        <method name="setPropertyValue" type="void">
          <param name="property" type="CSSOMString"/>
          <param name="value" type="CSSOMString"/>
        </method>
      </methods>
      <properties>
        <property name="alignContent" css-property="align-content" type="CSSOMString"/>
        <property name="alignItems" css-property="align-items" type="CSSOMString"/>
        <property name="alignmentBaseline" css-property="alignment-baseline" type="CSSOMString"/>
        <property name="alignSelf" css-property="align-self" type="CSSOMString"/>
        <property name="animation" css-property="animation" type="CSSOMString"/>
        <property name="animationDelay" css-property="animation-delay" type="CSSOMString"/>
        <property name="animationDirection" css-property="animation-direction" type="CSSOMString"/>
        <property name="animationDuration" css-property="animation-duration" type="CSSOMString"/>
        <property name="animationFillMode" css-property="animation-fill-mode" type="CSSOMString"/>
        <property name="animationIterationCount" css-property="animation-iteration-count" type="CSSOMString"/>
        <property name="animationName" css-property="animation-name" type="CSSOMString"/>
        <property name="animationPlayState" css-property="animation-play-state" type="CSSOMString"/>
        <property name="animationTimingFunction" css-property="animation-timing-function" type="CSSOMString"/>
        <property name="backfaceVisibility" css-property="backface-visibility" type="CSSOMString"/>
        <property name="background" css-property="background" type="CSSOMString"/>
        <property name="backgroundAttachment" css-property="background-attachment" type="CSSOMString"/>
        <property name="backgroundClip" css-property="background-clip" type="CSSOMString"/>
        <property name="backgroundColor" css-property="background-color" type="CSSOMString"/>
        <property name="backgroundImage" css-property="background-image" type="CSSOMString"/>
        <property name="backgroundOrigin" css-property="background-origin" type="CSSOMString"/>
        <property name="backgroundPosition" css-property="background-position" type="CSSOMString"/>
        <property name="backgroundPositionX" css-property="background-position-x" type="CSSOMString"/>
        <property name="backgroundPositionY" css-property="background-position-y" type="CSSOMString"/>
        <property name="backgroundRepeat" css-property="background-repeat" type="CSSOMString"/>
        <property name="backgroundSize" css-property="background-size" type="CSSOMString"/>
        <property name="baselineShift" css-property="baseline-shift" type="CSSOMString"/>
        <property name="border" css-property="border" type="CSSOMString"/>
        <property name="borderBottom" css-property="border-bottom" type="CSSOMString"/>
        <property name="borderBottomColor" css-property="border-bottom-color" type="CSSOMString"/>
        <property name="borderBottomLeftRadius" css-property="border-bottom-left-radius" type="CSSOMString"/>
        <property name="borderBottomRightRadius" css-property="border-bottom-right-radius" type="CSSOMString"/>
        <property name="borderBottomStyle" css-property="border-bottom-style" type="CSSOMString"/>
        <property name="borderBottomWidth" css-property="border-bottom-width" type="CSSOMString"/>
        <property name="borderCollapse" css-property="border-collapse" type="CSSOMString"/>
        <property name="borderColor" css-property="border-color" type="CSSOMString"/>
        <property name="borderImage" css-property="border-image" type="CSSOMString"/>
        <property name="borderImageOutset" css-property="border-image-outset" type="CSSOMString"/>
        <property name="borderImageRepeat" css-property="border-image-repeat" type="CSSOMString"/>
        <property name="borderImageSlice" css-property="border-image-slice" type="CSSOMString"/>
        <property name="borderImageSource" css-property="border-image-source" type="CSSOMString"/>
        <property name="borderImageWidth" css-property="border-image-width" type="CSSOMString"/>
        <property name="borderLeft" css-property="border-left" type="CSSOMString"/>
        <property name="borderLeftColor" css-property="border-left-color" type="CSSOMString"/>
        <property name="borderLeftStyle" css-property="border-left-style" type="CSSOMString"/>
        <property name="borderLeftWidth" css-property="border-left-width" type="CSSOMString"/>
        <property name="borderRadius" css-property="border-radius" type="CSSOMString"/>
        <property name="borderRight" css-property="border-right" type="CSSOMString"/>
        <property name="borderRightColor" css-property="border-right-color" type="CSSOMString"/>
        <property name="borderRightStyle" css-property="border-right-style" type="CSSOMString"/>
        <property name="borderRightWidth" css-property="border-right-width" type="CSSOMString"/>
        <property name="borderSpacing" css-property="border-spacing" type="CSSOMString"/>
        <property name="borderStyle" css-property="border-style" type="CSSOMString"/>
        <property name="borderTop" css-property="border-top" type="CSSOMString"/>
        <property name="borderTopColor" css-property="border-top-color" type="CSSOMString"/>
        <property name="borderTopLeftRadius" css-property="border-top-left-radius" type="CSSOMString"/>
        <property name="borderTopRightRadius" css-property="border-top-right-radius" type="CSSOMString"/>
        <property name="borderTopStyle" css-property="border-top-style" type="CSSOMString"/>
        <property name="borderTopWidth" css-property="border-top-width" type="CSSOMString"/>
        <property name="borderWidth" css-property="border-width" type="CSSOMString"/>
        <property name="bottom" css-property="bottom" type="CSSOMString"/>
        <property name="boxShadow" css-property="box-shadow" type="CSSOMString"/>
        <property name="boxSizing" css-property="box-sizing" type="CSSOMString"/>
        <property name="breakAfter" css-property="break-after" type="CSSOMString"/>
        <property name="breakBefore" css-property="break-before" type="CSSOMString"/>
        <property name="breakInside" css-property="break-inside" type="CSSOMString"/>
        <property name="captionSide" css-property="caption-side" type="CSSOMString"/>
        <property name="clear" css-property="clear" type="CSSOMString"/>
        <property name="clip" css-property="clip" type="CSSOMString"/>
        <property name="clipPath" css-property="clip-path" type="CSSOMString"/>
        <property name="clipRule" css-property="clip-rule" type="CSSOMString"/>
        <property name="color" css-property="color" type="CSSOMString"/>
        <property name="colorInterpolationFilters" css-property="color-interpolation-filters" type="CSSOMString"/>
        <property name="columnCount" css-property="column-count" type="CSSOMString"/>
        <property name="columnFill" css-property="column-fill" type="CSSOMString"/>
        <property name="columnGap" css-property="column-gap" type="CSSOMString"/>
        <property name="columnRule" css-property="column-rule" type="CSSOMString"/>
        <property name="columnRuleColor" css-property="column-rule-color" type="CSSOMString"/>
        <property name="columnRuleStyle" css-property="column-rule-style" type="CSSOMString"/>
        <property name="columnRuleWidth" css-property="column-rule-width" type="CSSOMString"/>
        <property name="columns" css-property="columns" type="CSSOMString"/>
        <property name="columnSpan" css-property="column-span" type="CSSOMString"/>
        <property name="columnWidth" css-property="column-width" type="CSSOMString"/>
        <property name="content" css-property="content" type="CSSOMString"/>
        <property name="counterIncrement" css-property="counter-increment" type="CSSOMString"/>
        <property name="counterReset" css-property="counter-reset" type="CSSOMString"/>
        <property name="cssFloat" type="CSSOMString"/>
        <property name="cssText" type="CSSOMString"/>
        <property name="cursor" css-property="cursor" type="CSSOMString"/>
        <property name="direction" css-property="direction" type="CSSOMString"/>
        <property name="display" css-property="display" type="CSSOMString"/>
        <property name="dominantBaseline" css-property="dominant-baseline" type="CSSOMString"/>
        <property name="emptyCells" css-property="empty-cells" type="CSSOMString"/>
        <property name="enableBackground" css-property="enable-background" type="CSSOMString"/>
        <property name="fill" css-property="fill" type="CSSOMString"/>
        <property name="fillOpacity" css-property="fill-opacity" type="CSSOMString"/>
        <property name="fillRule" css-property="fill-rule" type="CSSOMString"/>
        <property name="filter" css-property="filter" type="CSSOMString"/>
        <property name="flex" css-property="flex" type="CSSOMString"/>
        <property name="flexBasis" css-property="flex-basis" type="CSSOMString"/>
        <property name="flexDirection" css-property="flex-direction" type="CSSOMString"/>
        <property name="flexFlow" css-property="flex-flow" type="CSSOMString"/>
        <property name="flexGrow" css-property="flex-grow" type="CSSOMString"/>
        <property name="flexShrink" css-property="flex-shrink" type="CSSOMString"/>
        <property name="flexWrap" css-property="flex-wrap" type="CSSOMString"/>
        <property name="floodColor" css-property="flood-color" type="CSSOMString"/>
        <property name="floodOpacity" css-property="flood-opacity" type="CSSOMString"/>
        <property name="font" css-property="font" type="CSSOMString"/>
        <property name="fontFamily" css-property="font-family" type="CSSOMString"/>
        <property name="fontFeatureSettings" css-property="font-feature-settings" type="CSSOMString"/>
        <property name="fontSize" css-property="font-size" type="CSSOMString"/>
        <property name="fontSizeAdjust" css-property="font-size-adjust" type="CSSOMString"/>
        <property name="fontStretch" css-property="font-stretch" type="CSSOMString"/>
        <property name="fontStyle" css-property="font-style" type="CSSOMString"/>
        <property name="fontVariant" css-property="font-variant" type="CSSOMString"/>
        <property name="fontWeight" css-property="font-weight" type="CSSOMString"/>
        <property name="glyphOrientationHorizontal" css-property="glyph-orientation-horizontal" type="CSSOMString"/>
        <property name="glyphOrientationVertical" css-property="glyph-orientation-vertical" type="CSSOMString"/>
        <property name="height" css-property="height" type="CSSOMString"/>
        <property name="imeMode" css-property="ime-mode" type="CSSOMString"/>
        <property name="justifyContent" css-property="justify-content" type="CSSOMString"/>
        <property name="kerning" css-property="kerning" type="CSSOMString"/>
        <property name="layoutGrid" css-property="layout-grid" type="CSSOMString"/>
        <property name="layoutGridChar" css-property="layout-grid-char" type="CSSOMString"/>
        <property name="layoutGridLine" css-property="layout-grid-line" type="CSSOMString"/>
        <property name="layoutGridMode" css-property="layout-grid-mode" type="CSSOMString"/>
        <property name="layoutGridType" css-property="layout-grid-type" type="CSSOMString"/>
        <property name="left" css-property="left" type="CSSOMString"/>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="letterSpacing" css-property="letter-spacing" type="CSSOMString"/>
        <property name="lightingColor" css-property="lighting-color" type="CSSOMString"/>
        <property name="lineBreak" css-property="line-break" type="CSSOMString"/>
        <property name="lineHeight" css-property="line-height" type="CSSOMString"/>
        <property name="listStyle" css-property="list-style" type="CSSOMString"/>
        <property name="listStyleImage" css-property="list-style-image" type="CSSOMString"/>
        <property name="listStylePosition" css-property="list-style-position" type="CSSOMString"/>
        <property name="listStyleType" css-property="list-style-type" type="CSSOMString"/>
        <property name="margin" css-property="margin" type="CSSOMString"/>
        <property name="marginBottom" css-property="margin-bottom" type="CSSOMString"/>
        <property name="marginLeft" css-property="margin-left" type="CSSOMString"/>
        <property name="marginRight" css-property="margin-right" type="CSSOMString"/>
        <property name="marginTop" css-property="margin-top" type="CSSOMString"/>
        <property name="marker" css-property="marker" type="CSSOMString"/>
        <property name="markerEnd" css-property="marker-end" type="CSSOMString"/>
        <property name="markerMid" css-property="marker-mid" type="CSSOMString"/>
        <property name="markerStart" css-property="marker-start" type="CSSOMString"/>
        <property name="mask" css-property="mask" type="CSSOMString"/>
        <property name="maxHeight" css-property="max-height" type="CSSOMString"/>
        <property name="maxWidth" css-property="max-width" type="CSSOMString"/>
        <property name="minHeight" css-property="min-height" type="CSSOMString"/>
        <property name="minWidth" css-property="min-width" type="CSSOMString"/>
        <property name="msContentZoomChaining" css-property="-ms-content-zoom-chaining" type="CSSOMString"/>
        <property name="msContentZooming" css-property="-ms-content-zooming" type="CSSOMString"/>
        <property name="msContentZoomLimit" css-property="-ms-content-zoom-limit" type="CSSOMString"/>
        <property name="msContentZoomLimitMax" css-property="-ms-content-zoom-limit-max" type="CSSOMString"/>
        <property name="msContentZoomLimitMin" css-property="-ms-content-zoom-limit-min" type="CSSOMString"/>
        <property name="msContentZoomSnap" css-property="-ms-content-zoom-snap" type="CSSOMString"/>
        <property name="msContentZoomSnapPoints" css-property="-ms-content-zoom-snap-points" type="CSSOMString"/>
        <property name="msContentZoomSnapType" css-property="-ms-content-zoom-snap-type" type="CSSOMString"/>
        <property name="msFlowFrom" css-property="-ms-flow-from" type="CSSOMString"/>
        <property name="msFlowInto" css-property="-ms-flow-into" type="CSSOMString"/>
        <property name="msFontFeatureSettings" css-property="-ms-font-feature-settings" type="CSSOMString"/>
        <property name="msGridColumn" css-property="-ms-grid-column" type="CSSOMString"/>
        <property name="msGridColumnAlign" css-property="-ms-grid-column-align" type="CSSOMString"/>
        <property name="msGridColumns" css-property="-ms-grid-columns" type="CSSOMString"/>
        <property name="msGridColumnSpan" css-property="-ms-grid-column-span" type="CSSOMString"/>
        <property name="msGridRow" css-property="-ms-grid-row" type="CSSOMString"/>
        <property name="msGridRowAlign" css-property="-ms-grid-row-align" type="CSSOMString"/>
        <property name="msGridRows" css-property="-ms-grid-rows" type="CSSOMString"/>
        <property name="msGridRowSpan" css-property="-ms-grid-row-span" type="CSSOMString"/>
        <property name="msHighContrastAdjust" css-property="-ms-high-contrast-adjust" type="CSSOMString"/>
        <property name="msHyphenateLimitChars" css-property="-ms-hyphenate-limit-chars" type="CSSOMString"/>
        <property name="msHyphenateLimitLines" css-property="-ms-hyphenate-limit-lines" type="CSSOMString"/>
        <property name="msHyphenateLimitZone" css-property="-ms-hyphenate-limit-zone" type="CSSOMString"/>
        <property name="msHyphens" css-property="-ms-hyphens" type="CSSOMString"/>
        <property name="msImeAlign" css-property="-ms-ime-align" type="CSSOMString"/>
        <property name="msOverflowStyle" css-property="-ms-overflow-style" type="CSSOMString"/>
        <property name="msScrollChaining" css-property="-ms-scroll-chaining" type="CSSOMString"/>
        <property name="msScrollLimit" css-property="-ms-scroll-limit" type="CSSOMString"/>
        <property name="msScrollLimitXMax" css-property="-ms-scroll-limit-x-max" type="CSSOMString"/>
        <property name="msScrollLimitXMin" css-property="-ms-scroll-limit-x-min" type="CSSOMString"/>
        <property name="msScrollLimitYMax" css-property="-ms-scroll-limit-y-max" type="CSSOMString"/>
        <property name="msScrollLimitYMin" css-property="-ms-scroll-limit-y-min" type="CSSOMString"/>
        <property name="msScrollRails" css-property="-ms-scroll-rails" type="CSSOMString"/>
        <property name="msScrollSnapPointsX" css-property="-ms-scroll-snap-points-x" type="CSSOMString"/>
        <property name="msScrollSnapPointsY" css-property="-ms-scroll-snap-points-y" type="CSSOMString"/>
        <property name="msScrollSnapType" css-property="-ms-scroll-snap-type" type="CSSOMString"/>
        <property name="msScrollSnapX" css-property="-ms-scroll-snap-x" type="CSSOMString"/>
        <property name="msScrollSnapY" css-property="-ms-scroll-snap-y" type="CSSOMString"/>
        <property name="msScrollTranslation" css-property="-ms-scroll-translation" type="CSSOMString"/>
        <property name="msTextCombineHorizontal" css-property="-ms-text-combine-horizontal" type="CSSOMString"/>
        <property name="msTextSizeAdjust" css-property="-ms-text-size-adjust" type="CSSOMString"/>
        <property name="msTouchAction" css-property="-ms-touch-action" type="CSSOMString"/>
        <property name="msTouchSelect" css-property="-ms-touch-select" type="CSSOMString"/>
        <property name="msUserSelect" css-property="-ms-user-select" type="CSSOMString"/>
        <property name="msWrapFlow" css-property="-ms-wrap-flow" type="CSSOMString"/>
        <property name="msWrapMargin" css-property="-ms-wrap-margin" type="CSSOMString"/>
        <property name="msWrapThrough" css-property="-ms-wrap-through" type="CSSOMString"/>
        <property name="opacity" css-property="opacity" type="CSSOMString"/>
        <property name="order" css-property="order" type="CSSOMString"/>
        <property name="orphans" css-property="orphans" type="CSSOMString"/>
        <property name="outline" css-property="outline" type="CSSOMString"/>
        <property name="outlineColor" css-property="outline-color" type="CSSOMString"/>
        <property name="outlineOffset" css-property="outline-offset" type="CSSOMString"/>
        <property name="outlineStyle" css-property="outline-style" type="CSSOMString"/>
        <property name="outlineWidth" css-property="outline-width" type="CSSOMString"/>
        <property name="overflow" css-property="overflow" type="CSSOMString"/>
        <property name="overflowX" css-property="overflow-x" type="CSSOMString"/>
        <property name="overflowY" css-property="overflow-y" type="CSSOMString"/>
        <property name="padding" css-property="padding" type="CSSOMString"/>
        <property name="paddingBottom" css-property="padding-bottom" type="CSSOMString"/>
        <property name="paddingLeft" css-property="padding-left" type="CSSOMString"/>
        <property name="paddingRight" css-property="padding-right" type="CSSOMString"/>
        <property name="paddingTop" css-property="padding-top" type="CSSOMString"/>
        <property name="pageBreakAfter" css-property="page-break-after" type="CSSOMString"/>
        <property name="pageBreakBefore" css-property="page-break-before" type="CSSOMString"/>
        <property name="pageBreakInside" css-property="page-break-inside" type="CSSOMString"/>
        <property name="parentRule" read-only="1" nullable="1" type="CSSRule"/>
        <property name="perspective" css-property="perspective" type="CSSOMString"/>
        <property name="perspectiveOrigin" css-property="perspective-origin" type="CSSOMString"/>
        <property name="pointerEvents" css-property="pointer-events" type="CSSOMString"/>
        <property name="position" css-property="position" type="CSSOMString"/>
        <property name="quotes" css-property="quotes" type="CSSOMString"/>
        <property name="resize" css-property="resize" type="CSSOMString"/>
        <property name="right" css-property="right" type="CSSOMString"/>
        <property name="rotate" css-property="rotate" type="CSSOMString"/>
        <property name="rubyAlign" css-property="ruby-align" type="CSSOMString"/>
        <property name="rubyOverhang" css-property="ruby-overhang" type="CSSOMString"/>
        <property name="rubyPosition" css-property="ruby-position" type="CSSOMString"/>
        <property name="scale" css-property="scale" type="CSSOMString"/>
        <property name="scrollPadding" css-property="scroll-padding" type="CSSOMString"/>
        <property name="scrollPaddingBlock" css-property="scroll-padding-block" type="CSSOMString"/>
        <property name="scrollPaddingBlockEnd" css-property="scroll-padding-block-end" type="CSSOMString"/>
        <property name="scrollPaddingBlockStart" css-property="scroll-padding-block-start" type="CSSOMString"/>
        <property name="scrollPaddingBottom" css-property="scroll-padding-bottom" type="CSSOMString"/>
        <property name="scrollPaddingInline" css-property="scroll-padding-inline" type="CSSOMString"/>
        <property name="scrollPaddingInlineEnd" css-property="scroll-padding-inline-end" type="CSSOMString"/>
        <property name="scrollPaddingInlineStart" css-property="scroll-padding-inline-start" type="CSSOMString"/>
        <property name="scrollPaddingLeft" css-property="scroll-padding-left" type="CSSOMString"/>
        <property name="scrollPaddingRight" css-property="scroll-padding-right" type="CSSOMString"/>
        <property name="scrollPaddingTop" css-property="scroll-padding-top" type="CSSOMString"/>
        <property name="scrollSnapAlign" css-property="scroll-snap-align" type="CSSOMString"/>
        <property name="scrollSnapMargin" css-property="scroll-snap-margin" type="CSSOMString"/>
        <property name="scrollSnapMarginBlock" css-property="scroll-snap-margin-block" type="CSSOMString"/>
        <property name="scrollSnapMarginBlockEnd" css-property="scroll-snap-margin-block-end" type="CSSOMString"/>
        <property name="scrollSnapMarginBlockStart" css-property="scroll-snap-margin-block-start" type="CSSOMString"/>
        <property name="scrollSnapMarginBottom" css-property="scroll-snap-margin-bottom" type="CSSOMString"/>
        <property name="scrollSnapMarginInline" css-property="scroll-snap-margin-inline" type="CSSOMString"/>
        <property name="scrollSnapMarginInlineEnd" css-property="scroll-snap-margin-inline-end" type="CSSOMString"/>
        <property name="scrollSnapMarginInlineStart" css-property="scroll-snap-margin-inline-start" type="CSSOMString"/>
        <property name="scrollSnapMarginLeft" css-property="scroll-snap-margin-left" type="CSSOMString"/>
        <property name="scrollSnapMarginRight" css-property="scroll-snap-margin-right" type="CSSOMString"/>
        <property name="scrollSnapMarginTop" css-property="scroll-snap-margin-top" type="CSSOMString"/>
        <property name="scrollSnapStop" css-property="scroll-snap-stop" type="CSSOMString"/>
        <property name="scrollSnapType" css-property="scroll-snap-type" type="CSSOMString"/>
        <property name="stopColor" css-property="stop-color" type="CSSOMString"/>
        <property name="stopOpacity" css-property="stop-opacity" type="CSSOMString"/>
        <property name="stroke" css-property="stroke" type="CSSOMString"/>
        <property name="strokeDasharray" css-property="stroke-dasharray" type="CSSOMString"/>
        <property name="strokeDashoffset" css-property="stroke-dashoffset" type="CSSOMString"/>
        <property name="strokeLinecap" css-property="stroke-linecap" type="CSSOMString"/>
        <property name="strokeLinejoin" css-property="stroke-linejoin" type="CSSOMString"/>
        <property name="strokeMiterlimit" css-property="stroke-miterlimit" type="CSSOMString"/>
        <property name="strokeOpacity" css-property="stroke-opacity" type="CSSOMString"/>
        <property name="strokeWidth" css-property="stroke-width" type="CSSOMString"/>
        <property name="tableLayout" css-property="table-layout" type="CSSOMString"/>
        <property name="textAlign" css-property="text-align" type="CSSOMString"/>
        <property name="textAlignLast" css-property="text-align-last" type="CSSOMString"/>
        <property name="textAnchor" css-property="text-anchor" type="CSSOMString"/>
        <property name="textDecoration" css-property="text-decoration" type="CSSOMString"/>
        <property name="textIndent" css-property="text-indent" type="CSSOMString"/>
        <property name="textJustify" css-property="text-justify" type="CSSOMString"/>
        <property name="textKashida" css-property="text-kashida" type="CSSOMString"/>
        <property name="textKashidaSpace" css-property="text-kashida-space" type="CSSOMString"/>
        <property name="textOverflow" css-property="text-overflow" type="CSSOMString"/>
        <property name="textShadow" css-property="text-shadow" type="CSSOMString"/>
        <property name="textTransform" css-property="text-transform" type="CSSOMString"/>
        <property name="textUnderlinePosition" css-property="text-underline-position" type="CSSOMString"/>
        <property name="top" css-property="top" type="CSSOMString"/>
        <property name="touchAction" css-property="touch-action" type="CSSOMString"/>
        <property name="transform" css-property="transform" type="CSSOMString"/>
        <property name="transformOrigin" css-property="transform-origin" type="CSSOMString"/>
        <property name="transformStyle" css-property="transform-style" type="CSSOMString"/>
        <property name="transition" css-property="transition" type="CSSOMString"/>
        <property name="transitionDelay" css-property="transition-delay" type="CSSOMString"/>
        <property name="transitionDuration" css-property="transition-duration" type="CSSOMString"/>
        <property name="transitionProperty" css-property="transition-property" type="CSSOMString"/>
        <property name="transitionTimingFunction" css-property="transition-timing-function" type="CSSOMString"/>
        <property name="translate" css-property="translate" type="CSSOMString"/>
        <property name="unicodeBidi" css-property="unicode-bidi" type="CSSOMString"/>
        <property name="userSelect" css-property="user-select" type="CSSOMString"/>
        <property name="verticalAlign" css-property="vertical-align" type="CSSOMString"/>
        <property name="visibility" css-property="visibility" type="CSSOMString"/>
        <property name="webkitAlignContent" css-property="-webkit-align-content" type="CSSOMString"/>
        <property name="webkitAlignItems" css-property="-webkit-align-items" type="CSSOMString"/>
        <property name="webkitAlignSelf" css-property="-webkit-align-self" type="CSSOMString"/>
        <property name="webkitAnimation" css-property="-webkit-animation" type="CSSOMString"/>
        <property name="webkitAnimationDelay" css-property="-webkit-animation-delay" type="CSSOMString"/>
        <property name="webkitAnimationDirection" css-property="-webkit-animation-direction" type="CSSOMString"/>
        <property name="webkitAnimationDuration" css-property="-webkit-animation-duration" type="CSSOMString"/>
        <property name="webkitAnimationFillMode" css-property="-webkit-animation-fill-mode" type="CSSOMString"/>
        <property name="webkitAnimationIterationCount" css-property="-webkit-animation-iteration-count" type="CSSOMString"/>
        <property name="webkitAnimationName" css-property="-webkit-animation-name" type="CSSOMString"/>
        <property name="webkitAnimationPlayState" css-property="-webkit-animation-play-state" type="CSSOMString"/>
        <property name="webkitAnimationTimingFunction" css-property="-webkit-animation-timing-function" type="CSSOMString"/>
        <property name="webkitAppearance" css-property="-webkit-appearance" type="CSSOMString"/>
        <property name="webkitBackfaceVisibility" css-property="-webkit-backface-visibility" type="CSSOMString"/>
        <property name="webkitBackgroundClip" css-property="-webkit-background-clip" type="CSSOMString"/>
        <property name="webkitBackgroundOrigin" css-property="-webkit-background-origin" type="CSSOMString"/>
        <property name="webkitBackgroundSize" css-property="-webkit-background-size" type="CSSOMString"/>
        <property name="webkitBorderBottomLeftRadius" css-property="-webkit-border-bottom-left-radius" type="CSSOMString"/>
        <property name="webkitBorderBottomRightRadius" css-property="-webkit-border-bottom-right-radius" type="CSSOMString"/>
        <property name="webkitBorderImage" css-property="-webkit-border-image" type="CSSOMString"/>
        <property name="webkitBorderRadius" css-property="-webkit-border-radius" type="CSSOMString"/>
        <property name="webkitBorderTopLeftRadius" css-property="-webkit-border-top-left-radius" type="CSSOMString"/>
        <property name="webkitBorderTopRightRadius" css-property="-webkit-border-top-right-radius" type="CSSOMString"/>
        <property name="webkitBoxAlign" css-property="-webkit-box-align" type="CSSOMString"/>
        <property name="webkitBoxDirection" css-property="-webkit-box-direction" type="CSSOMString"/>
        <property name="webkitBoxFlex" css-property="-webkit-box-flex" type="CSSOMString"/>
        <property name="webkitBoxOrdinalGroup" css-property="-webkit-box-ordinal-group" type="CSSOMString"/>
        <property name="webkitBoxOrient" css-property="-webkit-box-orient" type="CSSOMString"/>
        <property name="webkitBoxPack" css-property="-webkit-box-pack" type="CSSOMString"/>
        <property name="webkitBoxSizing" css-property="-webkit-box-sizing" type="CSSOMString"/>
        <property name="webkitColumnBreakAfter" css-property="-webkit-column-break-after" type="CSSOMString"/>
        <property name="webkitColumnBreakBefore" css-property="-webkit-column-break-before" type="CSSOMString"/>
        <property name="webkitColumnBreakInside" css-property="-webkit-column-break-inside" type="CSSOMString"/>
        <property name="webkitColumnCount" css-property="-webkit-column-count" type="CSSOMString"/>
        <property name="webkitColumnGap" css-property="-webkit-column-gap" type="CSSOMString"/>
        <property name="webkitColumnRule" css-property="-webkit-column-rule" type="CSSOMString"/>
        <property name="webkitColumnRuleColor" css-property="-webkit-column-rule-color" type="CSSOMString"/>
        <property name="webkitColumnRuleStyle" css-property="-webkit-column-rule-style" type="CSSOMString"/>
        <property name="webkitColumnRuleWidth" css-property="-webkit-column-rule-width" type="CSSOMString"/>
        <property name="webkitColumns" css-property="-webkit-columns" type="CSSOMString"/>
        <property name="webkitColumnSpan" css-property="-webkit-column-span" type="CSSOMString"/>
        <property name="webkitColumnWidth" css-property="-webkit-column-width" type="CSSOMString"/>
        <property name="webkitFilter" css-property="-webkit-filter" type="CSSOMString"/>
        <property name="webkitFlex" css-property="-webkit-flex" type="CSSOMString"/>
        <property name="webkitFlexBasis" css-property="-webkit-flex-basis" type="CSSOMString"/>
        <property name="webkitFlexDirection" css-property="-webkit-flex-direction" type="CSSOMString"/>
        <property name="webkitFlexFlow" css-property="-webkit-flex-flow" type="CSSOMString"/>
        <property name="webkitFlexGrow" css-property="-webkit-flex-grow" type="CSSOMString"/>
        <property name="webkitFlexShrink" css-property="-webkit-flex-shrink" type="CSSOMString"/>
        <property name="webkitFlexWrap" css-property="-webkit-flex-wrap" type="CSSOMString"/>
        <property name="webkitJustifyContent" css-property="-webkit-justify-content" type="CSSOMString"/>
        <property name="webkitOrder" css-property="-webkit-order" type="CSSOMString"/>
        <property name="webkitPerspective" css-property="-webkit-perspective" type="CSSOMString"/>
        <property name="webkitPerspectiveOrigin" css-property="-webkit-perspective-origin" type="CSSOMString"/>
        <property name="webkitTapHighlightColor" css-property="-webkit-tap-highlight-color" type="CSSOMString"/>
        <property name="webkitTextFillColor" css-property="-webkit-text-fill-color" type="CSSOMString"/>
        <property name="webkitTextSizeAdjust" css-property="-webkit-text-size-adjust" type="CSSOMString"/>
        <property name="webkitTextStroke" css-property="-webkit-text-stroke" type="CSSOMString"/>
        <property name="webkitTextStrokeColor" css-property="-webkit-text-stroke-color" type="CSSOMString"/>
        <property name="webkitTextStrokeWidth" css-property="-webkit-text-stroke-width" type="CSSOMString"/>
        <property name="webkitTransform" css-property="-webkit-transform" type="CSSOMString"/>
        <property name="webkitTransformOrigin" css-property="-webkit-transform-origin" type="CSSOMString"/>
        <property name="webkitTransformStyle" css-property="-webkit-transform-style" type="CSSOMString"/>
        <property name="webkitTransition" css-property="-webkit-transition" type="CSSOMString"/>
        <property name="webkitTransitionDelay" css-property="-webkit-transition-delay" type="CSSOMString"/>
        <property name="webkitTransitionDuration" css-property="-webkit-transition-duration" type="CSSOMString"/>
        <property name="webkitTransitionProperty" css-property="-webkit-transition-property" type="CSSOMString"/>
        <property name="webkitTransitionTimingFunction" css-property="-webkit-transition-timing-function" type="CSSOMString"/>
        <property name="webkitUserModify" css-property="-webkit-user-modify" type="CSSOMString"/>
        <property name="webkitUserSelect" css-property="-webkit-user-select" type="CSSOMString"/>
        <property name="webkitWritingMode" css-property="-webkit-writing-mode" type="CSSOMString"/>
        <property name="whiteSpace" css-property="white-space" type="CSSOMString"/>
        <property name="widows" css-property="widows" type="CSSOMString"/>
        <property name="width" css-property="width" type="CSSOMString"/>
        <property name="wordBreak" css-property="word-break" type="CSSOMString"/>
        <property name="wordSpacing" css-property="word-spacing" type="CSSOMString"/>
        <property name="wordWrap" css-property="word-wrap" type="CSSOMString"/>
        <property name="writingMode" css-property="writing-mode" type="CSSOMString"/>
        <property name="zIndex" css-property="z-index" type="CSSOMString"/>
        <property name="zoom" css-property="zoom" type="CSSOMString"/>
      </properties>
    </interface>
    <interface name="CSSStyleRule" extends="CSSRule">
      <properties>
        <property name="selectorText" type="CSSOMString"/>
        <property name="style" read-only="1" type="CSSStyleDeclaration"/>
      </properties>
    </interface>
    <interface name="CSSStyleSheet" extends="StyleSheet">
      <methods>
        <method name="deleteRule" type="void">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="insertRule" type="unsigned long">
          <param name="rule" type="CSSOMString"/>
          <param name="index" default="0" optional="1" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="cssRules" read-only="1" type="CSSRuleList"/>
        <property name="ownerRule" read-only="1" nullable="1" type="CSSRule"/>
      </properties>
    </interface>
    <interface name="CSSSupportsRule" extends="CSSConditionRule"/>
    <interface name="CustomElementRegistry" extends="Object">
      <methods>
        <method name="define" type="void">
          <param name="name" type="DOMString"/>
          <param name="constructor" type="Function"/>
          <param name="options" optional="1" type="ElementDefinitionOptions"/>
        </method>
        <method name="get" type="any">
          <param name="name" type="DOMString"/>
        </method>
        <method name="whenDefined" type="Promise&lt;void&gt;">
          <param name="name" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="CustomEvent" extends="Event" exposed="Window Worker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="CustomEventInit"/>
      </constructor>
      <methods>
        <method name="initCustomEvent" type="void">
          <param name="type" type="DOMString"/>
          <param name="bubbles" default="false" optional="1" type="boolean"/>
          <param name="cancelable" default="false" optional="1" type="boolean"/>
          <param name="detail" default="null" optional="1" type="any"/>
        </method>
      </methods>
      <properties>
        <property name="detail" read-only="1" type="any"/>
      </properties>
    </interface>
    <interface name="DataTransfer" extends="Object" exposed="Window">
      <constructor/>
      <methods>
        <method name="clearData" type="void">
          <param name="format" optional="1" type="DOMString"/>
        </method>
        <method name="getData" type="DOMString">
          <param name="format" type="DOMString"/>
        </method>
        <method name="setData" type="void">
          <param name="format" type="DOMString"/>
          <param name="data" type="DOMString"/>
        </method>
        <method name="setDragImage" type="void">
          <param name="image" type="Element"/>
          <param name="x" type="long"/>
          <param name="y" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="dropEffect" type="DOMString"/>
        <property name="effectAllowed" type="DOMString"/>
        <property name="files" read-only="1" type="FileList"/>
        <property name="items" read-only="1" type="DataTransferItemList"/>
        <property name="types" read-only="1" type="FrozenArray&lt;DOMString&gt;"/>
      </properties>
    </interface>
    <interface name="DataTransferItem" extends="Object">
      <methods>
        <method name="getAsFile" nullable="1" type="File"/>
        <method name="getAsString" type="void">
          <param name="callback" nullable="1" type="FunctionStringCallback"/>
        </method>
      </methods>
      <properties>
        <property name="kind" read-only="1" type="DOMString"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="DataTransferItemList" extends="Object">
      <anonymous-methods>
        <method getter="1" type="DataTransferItem">
          <param name="index" type="unsigned long"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="add" nullable="1" type="DataTransferItem">
          <param name="data" type="DOMString"/>
          <param name="type" type="DOMString"/>
        </method>
        <method name="add" nullable="1" type="DataTransferItem">
          <param name="data" type="File"/>
        </method>
        <method name="clear" type="void"/>
        <method name="remove" type="void">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="DedicatedWorkerGlobalScope" extends="WorkerGlobalScope" global="Worker DedicatedWorker" exposed="DedicatedWorker">
      <methods>
        <method name="close" type="void"/>
        <method name="postMessage" type="void">
          <param name="message" type="any"/>
          <param name="transfer" default="[]" optional="1" type="sequence&lt;object&gt;"/>
        </method>
      </methods>
      <properties>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="onmessage" type="EventHandler" event-handler="message"/>
        <property name="onmessageerror" type="EventHandler" event-handler="messageerror"/>
      </properties>
      <events>
        <event name="message" type="MessageEvent"/>
        <event name="messageerror" type="MessageEvent"/>
      </events>
    </interface>
    <interface name="DelayNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="DelayOptions"/>
      </constructor>
      <properties>
        <property name="delayTime" read-only="1" type="AudioParam"/>
      </properties>
    </interface>
    <interface name="DeviceMotionEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="DeviceMotionEventInit"/>
      </constructor>
      <properties>
        <property name="acceleration" read-only="1" nullable="1" type="DeviceAcceleration"/>
        <property name="accelerationIncludingGravity" read-only="1" nullable="1" type="DeviceAcceleration"/>
        <property name="interval" read-only="1" nullable="1" type="double"/>
        <property name="rotationRate" read-only="1" nullable="1" type="DeviceRotationRate"/>
      </properties>
    </interface>
    <interface name="DeviceOrientationEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="DeviceOrientationEventInit"/>
      </constructor>
      <properties>
        <property name="absolute" read-only="1" type="boolean"/>
        <property name="alpha" read-only="1" nullable="1" type="double"/>
        <property name="beta" read-only="1" nullable="1" type="double"/>
        <property name="gamma" read-only="1" nullable="1" type="double"/>
      </properties>
    </interface>
    <interface name="Document" extends="Node" exposed="Window">
      <constructor/>
      <methods>
        <method name="adoptNode" type="Node">
          <param name="node" type="Node"/>
        </method>
        <method name="captureEvents" type="void"/>
        <method name="caretPositionFromPoint" nullable="1" type="CaretPosition">
          <param name="x" type="double"/>
          <param name="y" type="double"/>
        </method>
        <method name="clear" type="void"/>
        <method name="close" type="void"/>
        <method name="createAttribute" type="Attr">
          <param name="localName" type="DOMString"/>
        </method>
        <method name="createAttributeNS" type="Attr">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="createCDATASection" type="CDATASection">
          <param name="data" type="DOMString"/>
        </method>
        <method name="createComment" type="Comment">
          <param name="data" type="DOMString"/>
        </method>
        <method name="createDocumentFragment" type="DocumentFragment"/>
        <method name="createElement" type="Element">
          <param name="localName" type="DOMString"/>
          <param name="options" optional="1" type="ElementCreationOptions"/>
        </method>
        <method name="createElementNS" type="Element">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="qualifiedName" type="DOMString"/>
          <param name="options" optional="1" type="ElementCreationOptions"/>
        </method>
        <method name="createEvent" type="Event">
          <param name="interface" type="DOMString"/>
        </method>
        <method name="createNodeIterator" type="NodeIterator">
          <param name="root" type="Node"/>
          <param name="whatToShow" default="4294967295" optional="1" type="unsigned long"/>
          <param name="filter" default="null" optional="1" nullable="1" type="NodeFilter"/>
        </method>
        <method name="createProcessingInstruction" type="ProcessingInstruction">
          <param name="target" type="DOMString"/>
          <param name="data" type="DOMString"/>
        </method>
        <method name="createRange" type="Range"/>
        <method name="createTextNode" type="Text">
          <param name="data" type="DOMString"/>
        </method>
        <method name="createTouch" type="Touch">
          <param name="view" type="WindowProxy"/>
          <param name="target" type="EventTarget"/>
          <param name="identifier" type="long"/>
          <param name="pageX" type="double"/>
          <param name="pageY" type="double"/>
          <param name="screenX" type="double"/>
          <param name="screenY" type="double"/>
        </method>
        <method name="createTouchList" type="TouchList">
          <param name="touches" type="Touch" variadic="1"/>
        </method>
        <method name="createTreeWalker" type="TreeWalker">
          <param name="root" type="Node"/>
          <param name="whatToShow" default="4294967295" optional="1" type="unsigned long"/>
          <param name="filter" default="null" optional="1" nullable="1" type="NodeFilter"/>
        </method>
        <method name="elementFromPoint" nullable="1" type="Element">
          <param name="x" type="double"/>
          <param name="y" type="double"/>
        </method>
        <method name="elementsFromPoint" type="sequence&lt;Element&gt;">
          <param name="x" type="double"/>
          <param name="y" type="double"/>
        </method>
        <method name="execCommand" type="boolean">
          <param name="commandId" type="DOMString"/>
          <param name="showUI" default="false" optional="1" type="boolean"/>
          <param name="value" default="&quot;&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="exitFullscreen" type="Promise&lt;void&gt;"/>
        <method name="getElementsByClassName" type="HTMLCollection">
          <param name="classNames" type="DOMString"/>
        </method>
        <method name="getElementsByName" type="NodeList">
          <param name="elementName" type="DOMString"/>
        </method>
        <method name="getElementsByTagName" type="HTMLCollection">
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="getElementsByTagNameNS" type="HTMLCollection">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="getSelection" nullable="1" type="Selection"/>
        <method name="hasFocus" type="boolean"/>
        <method name="importNode" type="Node">
          <param name="node" type="Node"/>
          <param name="deep" default="false" optional="1" type="boolean"/>
        </method>
        <method name="open" type="Document">
          <param name="type" default="&quot;text/html&quot;" optional="1" type="DOMString"/>
          <param name="replace" default="&quot;&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="open" type="WindowProxy">
          <param name="url" type="USVString"/>
          <param name="name" type="DOMString"/>
          <param name="features" type="DOMString"/>
        </method>
        <method name="queryCommandEnabled" type="boolean">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="queryCommandIndeterm" type="boolean">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="queryCommandState" type="boolean">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="queryCommandSupported" type="boolean">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="queryCommandValue" type="DOMString">
          <param name="commandId" type="DOMString"/>
        </method>
        <method name="releaseEvents" type="void"/>
        <method name="write" type="void">
          <param name="text" type="DOMString" variadic="1"/>
        </method>
        <method name="writeln" type="void">
          <param name="text" type="DOMString" variadic="1"/>
        </method>
      </methods>
      <properties>
        <property name="activeElement" read-only="1" nullable="1" type="Element"/>
        <property name="alinkColor" type="DOMString"/>
        <property name="all" read-only="1" type="HTMLAllCollection"/>
        <property name="anchors" read-only="1" type="HTMLCollection"/>
        <property name="applets" read-only="1" type="HTMLCollection"/>
        <property name="bgColor" type="DOMString"/>
        <property name="body" nullable="1" type="HTMLElement"/>
        <property name="characterSet" read-only="1" type="DOMString"/>
        <property name="charset" read-only="1" type="DOMString"/>
        <property name="compatMode" read-only="1" type="DOMString"/>
        <property name="contentType" read-only="1" type="DOMString"/>
        <property name="cookie" type="USVString"/>
        <property name="currentScript" read-only="1" nullable="1" type="HTMLOrSVGScriptElement"/>
        <property name="defaultView" read-only="1" nullable="1" type="WindowProxy"/>
        <property name="designMode" type="DOMString"/>
        <property name="dir" type="DOMString"/>
        <property name="doctype" read-only="1" nullable="1" type="DocumentType"/>
        <property name="documentElement" read-only="1" nullable="1" type="Element"/>
        <property name="documentURI" read-only="1" type="USVString"/>
        <property name="domain" type="USVString"/>
        <property name="embeds" read-only="1" type="HTMLCollection"/>
        <property name="fgColor" type="DOMString"/>
        <property name="forms" read-only="1" type="HTMLCollection"/>
        <property name="fullscreen" read-only="1" type="boolean"/>
        <property name="fullscreenEnabled" read-only="1" type="boolean"/>
        <property name="head" read-only="1" nullable="1" type="HTMLHeadElement"/>
        <property name="hidden" read-only="1" type="boolean"/>
        <property name="images" read-only="1" type="HTMLCollection"/>
        <property name="implementation" read-only="1" type="DOMImplementation"/>
        <property name="inputEncoding" read-only="1" type="DOMString"/>
        <property name="lastModified" read-only="1" type="DOMString"/>
        <property name="linkColor" type="DOMString"/>
        <property name="links" read-only="1" type="HTMLCollection"/>
        <property name="location" read-only="1" nullable="1" type="Location"/>
        <property name="onfullscreenchange" type="EventHandler" event-handler="fullscreenchange"/>
        <property name="onfullscreenerror" type="EventHandler" event-handler="fullscreenerror"/>
        <property name="onreadystatechange" type="EventHandler" event-handler="readystatechange"/>
        <property name="origin" read-only="1" type="USVString"/>
        <property name="plugins" read-only="1" type="HTMLCollection"/>
        <property name="readyState" read-only="1" type="DocumentReadyState"/>
        <property name="referrer" read-only="1" type="USVString"/>
        <property name="rootElement" read-only="1" nullable="1" type="SVGSVGElement"/>
        <property name="scripts" read-only="1" type="HTMLCollection"/>
        <property name="scrollingElement" read-only="1" nullable="1" type="Element"/>
        <property name="styleSheets" read-only="1" type="StyleSheetList"/>
        <property name="title" type="DOMString"/>
        <property name="URL" read-only="1" type="USVString"/>
        <property name="visibilityState" read-only="1" type="VisibilityState"/>
        <property name="vlinkColor" type="DOMString"/>
      </properties>
      <implements>NonElementParentNode</implements>
      <implements>DocumentOrShadowRoot</implements>
      <implements>ParentNode</implements>
      <implements>GeometryUtils</implements>
      <anonymous-methods>
        <method getter="1" type="object">
          <param name="name" type="DOMString"/>
        </method>
      </anonymous-methods>
      <implements>GlobalEventHandlers</implements>
      <implements>DocumentAndElementEventHandlers</implements>
      <events>
        <event name="DOMContentLoaded" bubbles="1" dispatch="sync" follows="readystatechange" precedes="load" type="Event"/>
        <event name="readystatechange" dispatch="sync" precedes="load DOMContentLoaded" type="Event"/>
        <event name="stop" dispatch="sync" type="Event"/>
        <event name="visibilitychanged" dispatch="async" type="Event"/>
        <event name="selectionchange" dispatch="async" follows="selectstart" precedes="select" tags="IEOnly" type="Event"/>
        <event name="fullscreenchange" aliases="webkitfullscreenchange" bubbles="1" dispatch="async" tags="IEOnly" type="Event"/>
        <event name="fullscreenerror" aliases="webkitfullscreenerror" bubbles="1" dispatch="async" tags="IEOnly" type="Event"/>
      </events>
    </interface>
    <interface name="DocumentFragment" extends="Node" exposed="Window">
      <constructor/>
      <implements>NonElementParentNode</implements>
      <implements>ParentNode</implements>
    </interface>
    <interface name="DocumentType" extends="Node" exposed="Window">
      <properties>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="publicId" read-only="1" type="DOMString"/>
        <property name="systemId" read-only="1" type="DOMString"/>
      </properties>
      <implements>ChildNode</implements>
    </interface>
    <interface name="DOMImplementation" extends="Object" exposed="Window">
      <methods>
        <method name="createDocument" type="XMLDocument">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="qualifiedName" type="DOMString"/>
          <param name="doctype" default="null" optional="1" nullable="1" type="DocumentType"/>
        </method>
        <method name="createDocumentType" type="DocumentType">
          <param name="qualifiedName" type="DOMString"/>
          <param name="publicId" type="DOMString"/>
          <param name="systemId" type="DOMString"/>
        </method>
        <method name="createHTMLDocument" type="Document">
          <param name="title" optional="1" type="DOMString"/>
        </method>
        <method name="hasFeature" type="boolean"/>
      </methods>
    </interface>
    <interface name="DOMMatrix" extends="DOMMatrixReadOnly" exposed="Window Worker">
      <constructor>
        <param name="init" optional="1" type="(DOMString or sequence&lt;unrestricted double&gt;)"/>
      </constructor>
      <methods>
        <method name="fromFloat32Array" static="1" type="DOMMatrix">
          <param name="array32" type="Float32Array"/>
        </method>
        <method name="fromFloat64Array" static="1" type="DOMMatrix">
          <param name="array64" type="Float64Array"/>
        </method>
        <method name="fromMatrix" static="1" type="DOMMatrix">
          <param name="other" optional="1" type="DOMMatrixInit"/>
        </method>
        <method name="invertSelf" type="DOMMatrix"/>
        <method name="multiplySelf" type="DOMMatrix">
          <param name="other" optional="1" type="DOMMatrixInit"/>
        </method>
        <method name="preMultiplySelf" type="DOMMatrix">
          <param name="other" optional="1" type="DOMMatrixInit"/>
        </method>
        <method name="rotateAxisAngleSelf" type="DOMMatrix">
          <param name="x" default="0" optional="1" type="unrestricted double"/>
          <param name="y" default="0" optional="1" type="unrestricted double"/>
          <param name="z" default="0" optional="1" type="unrestricted double"/>
          <param name="angle" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="rotateFromVectorSelf" type="DOMMatrix">
          <param name="x" default="0" optional="1" type="unrestricted double"/>
          <param name="y" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="rotateSelf" type="DOMMatrix">
          <param name="rotX" default="0" optional="1" type="unrestricted double"/>
          <param name="rotY" optional="1" type="unrestricted double"/>
          <param name="rotZ" optional="1" type="unrestricted double"/>
        </method>
        <method name="scale3dSelf" type="DOMMatrix">
          <param name="scale" default="1" optional="1" type="unrestricted double"/>
          <param name="originX" default="0" optional="1" type="unrestricted double"/>
          <param name="originY" default="0" optional="1" type="unrestricted double"/>
          <param name="originZ" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="scaleSelf" type="DOMMatrix">
          <param name="scaleX" default="1" optional="1" type="unrestricted double"/>
          <param name="scaleY" optional="1" type="unrestricted double"/>
          <param name="scaleZ" default="1" optional="1" type="unrestricted double"/>
          <param name="originX" default="0" optional="1" type="unrestricted double"/>
          <param name="originY" default="0" optional="1" type="unrestricted double"/>
          <param name="originZ" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="setMatrixValue" type="DOMMatrix" exposed="Window">
          <param name="transformList" type="DOMString"/>
        </method>
        <method name="skewXSelf" type="DOMMatrix">
          <param name="sx" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="skewYSelf" type="DOMMatrix">
          <param name="sy" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="translateSelf" type="DOMMatrix">
          <param name="tx" default="0" optional="1" type="unrestricted double"/>
          <param name="ty" default="0" optional="1" type="unrestricted double"/>
          <param name="tz" default="0" optional="1" type="unrestricted double"/>
        </method>
      </methods>
      <properties>
        <property name="a" type="unrestricted double"/>
        <property name="b" type="unrestricted double"/>
        <property name="c" type="unrestricted double"/>
        <property name="d" type="unrestricted double"/>
        <property name="e" type="unrestricted double"/>
        <property name="f" type="unrestricted double"/>
        <property name="m11" type="unrestricted double"/>
        <property name="m12" type="unrestricted double"/>
        <property name="m13" type="unrestricted double"/>
        <property name="m14" type="unrestricted double"/>
        <property name="m21" type="unrestricted double"/>
        <property name="m22" type="unrestricted double"/>
        <property name="m23" type="unrestricted double"/>
        <property name="m24" type="unrestricted double"/>
        <property name="m31" type="unrestricted double"/>
        <property name="m32" type="unrestricted double"/>
        <property name="m33" type="unrestricted double"/>
        <property name="m34" type="unrestricted double"/>
        <property name="m41" type="unrestricted double"/>
        <property name="m42" type="unrestricted double"/>
        <property name="m43" type="unrestricted double"/>
        <property name="m44" type="unrestricted double"/>
      </properties>
    </interface>
    <interface name="DOMMatrixReadOnly" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="init" optional="1" type="(DOMString or sequence&lt;unrestricted double&gt;)"/>
      </constructor>
      <anonymous-methods>
        <method stringifier="1" type="DOMString" exposed="Window"/>
      </anonymous-methods>
      <methods>
        <method name="flipX" type="DOMMatrix"/>
        <method name="flipY" type="DOMMatrix"/>
        <method name="fromFloat32Array" static="1" type="DOMMatrixReadOnly">
          <param name="array32" type="Float32Array"/>
        </method>
        <method name="fromFloat64Array" static="1" type="DOMMatrixReadOnly">
          <param name="array64" type="Float64Array"/>
        </method>
        <method name="fromMatrix" static="1" type="DOMMatrixReadOnly">
          <param name="other" optional="1" type="DOMMatrixInit"/>
        </method>
        <method name="inverse" type="DOMMatrix"/>
        <method name="multiply" type="DOMMatrix">
          <param name="other" optional="1" type="DOMMatrixInit"/>
        </method>
        <method name="rotate" type="DOMMatrix">
          <param name="rotX" default="0" optional="1" type="unrestricted double"/>
          <param name="rotY" optional="1" type="unrestricted double"/>
          <param name="rotZ" optional="1" type="unrestricted double"/>
        </method>
        <method name="rotateAxisAngle" type="DOMMatrix">
          <param name="x" default="0" optional="1" type="unrestricted double"/>
          <param name="y" default="0" optional="1" type="unrestricted double"/>
          <param name="z" default="0" optional="1" type="unrestricted double"/>
          <param name="angle" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="rotateFromVector" type="DOMMatrix">
          <param name="x" default="0" optional="1" type="unrestricted double"/>
          <param name="y" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="scale" type="DOMMatrix">
          <param name="scaleX" default="1" optional="1" type="unrestricted double"/>
          <param name="scaleY" optional="1" type="unrestricted double"/>
          <param name="scaleZ" default="1" optional="1" type="unrestricted double"/>
          <param name="originX" default="0" optional="1" type="unrestricted double"/>
          <param name="originY" default="0" optional="1" type="unrestricted double"/>
          <param name="originZ" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="scale3d" type="DOMMatrix">
          <param name="scale" default="1" optional="1" type="unrestricted double"/>
          <param name="originX" default="0" optional="1" type="unrestricted double"/>
          <param name="originY" default="0" optional="1" type="unrestricted double"/>
          <param name="originZ" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="skewX" type="DOMMatrix">
          <param name="sx" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="skewY" type="DOMMatrix">
          <param name="sy" default="0" optional="1" type="unrestricted double"/>
        </method>
        <method name="toFloat32Array" type="Float32Array"/>
        <method name="toFloat64Array" type="Float64Array"/>
        <method name="transformPoint" type="DOMPoint">
          <param name="point" optional="1" type="DOMPointInit"/>
        </method>
        <method name="translate" type="DOMMatrix">
          <param name="tx" default="0" optional="1" type="unrestricted double"/>
          <param name="ty" default="0" optional="1" type="unrestricted double"/>
          <param name="tz" default="0" optional="1" type="unrestricted double"/>
        </method>
      </methods>
      <properties>
        <property name="a" read-only="1" type="unrestricted double"/>
        <property name="b" read-only="1" type="unrestricted double"/>
        <property name="c" read-only="1" type="unrestricted double"/>
        <property name="d" read-only="1" type="unrestricted double"/>
        <property name="e" read-only="1" type="unrestricted double"/>
        <property name="f" read-only="1" type="unrestricted double"/>
        <property name="is2D" read-only="1" type="boolean"/>
        <property name="isIdentity" read-only="1" type="boolean"/>
        <property name="m11" read-only="1" type="unrestricted double"/>
        <property name="m12" read-only="1" type="unrestricted double"/>
        <property name="m13" read-only="1" type="unrestricted double"/>
        <property name="m14" read-only="1" type="unrestricted double"/>
        <property name="m21" read-only="1" type="unrestricted double"/>
        <property name="m22" read-only="1" type="unrestricted double"/>
        <property name="m23" read-only="1" type="unrestricted double"/>
        <property name="m24" read-only="1" type="unrestricted double"/>
        <property name="m31" read-only="1" type="unrestricted double"/>
        <property name="m32" read-only="1" type="unrestricted double"/>
        <property name="m33" read-only="1" type="unrestricted double"/>
        <property name="m34" read-only="1" type="unrestricted double"/>
        <property name="m41" read-only="1" type="unrestricted double"/>
        <property name="m42" read-only="1" type="unrestricted double"/>
        <property name="m43" read-only="1" type="unrestricted double"/>
        <property name="m44" read-only="1" type="unrestricted double"/>
      </properties>
    </interface>
    <interface name="DOMParser" extends="Object">
      <constructor/>
      <methods>
        <method name="parseFromString" type="Document">
          <param name="str" type="DOMString"/>
          <param name="type" type="SupportedType"/>
        </method>
      </methods>
    </interface>
    <interface name="DOMPoint" extends="DOMPointReadOnly" exposed="Window Worker">
      <constructor>
        <param name="x" default="0" optional="1" type="unrestricted double"/>
        <param name="y" default="0" optional="1" type="unrestricted double"/>
        <param name="z" default="0" optional="1" type="unrestricted double"/>
        <param name="w" default="1" optional="1" type="unrestricted double"/>
      </constructor>
      <methods>
        <method name="fromPoint" static="1" type="DOMPoint">
          <param name="other" optional="1" type="DOMPointInit"/>
        </method>
      </methods>
      <properties>
        <property name="w" type="unrestricted double"/>
        <property name="x" type="unrestricted double"/>
        <property name="y" type="unrestricted double"/>
        <property name="z" type="unrestricted double"/>
      </properties>
    </interface>
    <interface name="DOMPointReadOnly" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="x" default="0" optional="1" type="unrestricted double"/>
        <param name="y" default="0" optional="1" type="unrestricted double"/>
        <param name="z" default="0" optional="1" type="unrestricted double"/>
        <param name="w" default="1" optional="1" type="unrestricted double"/>
      </constructor>
      <methods>
        <method name="fromPoint" static="1" type="DOMPointReadOnly">
          <param name="other" optional="1" type="DOMPointInit"/>
        </method>
        <method name="matrixTransform" type="DOMPoint">
          <param name="matrix" optional="1" type="DOMMatrixInit"/>
        </method>
      </methods>
      <properties>
        <property name="w" read-only="1" type="unrestricted double"/>
        <property name="x" read-only="1" type="unrestricted double"/>
        <property name="y" read-only="1" type="unrestricted double"/>
        <property name="z" read-only="1" type="unrestricted double"/>
      </properties>
    </interface>
    <interface name="DOMQuad" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="p1" optional="1" type="DOMPointInit"/>
        <param name="p2" optional="1" type="DOMPointInit"/>
        <param name="p3" optional="1" type="DOMPointInit"/>
        <param name="p4" optional="1" type="DOMPointInit"/>
      </constructor>
      <methods>
        <method name="fromQuad" static="1" type="DOMQuad">
          <param name="other" optional="1" type="DOMQuadInit"/>
        </method>
        <method name="fromRect" static="1" type="DOMQuad">
          <param name="other" optional="1" type="DOMRectInit"/>
        </method>
        <method name="getBounds" type="DOMRect"/>
      </methods>
      <properties>
        <property name="p1" read-only="1" type="DOMPoint"/>
        <property name="p2" read-only="1" type="DOMPoint"/>
        <property name="p3" read-only="1" type="DOMPoint"/>
        <property name="p4" read-only="1" type="DOMPoint"/>
      </properties>
    </interface>
    <interface name="DOMRect" extends="DOMRectReadOnly" exposed="Window Worker">
      <constructor>
        <param name="x" default="0" optional="1" type="unrestricted double"/>
        <param name="y" default="0" optional="1" type="unrestricted double"/>
        <param name="width" default="0" optional="1" type="unrestricted double"/>
        <param name="height" default="0" optional="1" type="unrestricted double"/>
      </constructor>
      <methods>
        <method name="fromRect" static="1" type="DOMRect">
          <param name="other" optional="1" type="DOMRectInit"/>
        </method>
      </methods>
      <properties>
        <property name="height" type="unrestricted double"/>
        <property name="width" type="unrestricted double"/>
        <property name="x" type="unrestricted double"/>
        <property name="y" type="unrestricted double"/>
      </properties>
    </interface>
    <interface name="DOMRectReadOnly" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="x" default="0" optional="1" type="unrestricted double"/>
        <param name="y" default="0" optional="1" type="unrestricted double"/>
        <param name="width" default="0" optional="1" type="unrestricted double"/>
        <param name="height" default="0" optional="1" type="unrestricted double"/>
      </constructor>
      <methods>
        <method name="fromRect" static="1" type="DOMRectReadOnly">
          <param name="other" optional="1" type="DOMRectInit"/>
        </method>
      </methods>
      <properties>
        <property name="bottom" read-only="1" type="unrestricted double"/>
        <property name="height" read-only="1" type="unrestricted double"/>
        <property name="left" read-only="1" type="unrestricted double"/>
        <property name="right" read-only="1" type="unrestricted double"/>
        <property name="top" read-only="1" type="unrestricted double"/>
        <property name="width" read-only="1" type="unrestricted double"/>
        <property name="x" read-only="1" type="unrestricted double"/>
        <property name="y" read-only="1" type="unrestricted double"/>
      </properties>
    </interface>
    <interface name="DOMStringList" extends="Object" exposed="Window Worker">
      <methods>
        <method name="contains" type="boolean">
          <param name="string" type="DOMString"/>
        </method>
        <method name="item" getter="1" nullable="1" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="DOMStringMap" extends="Object" override-builtins="1">
      <anonymous-methods>
        <method getter="1" type="DOMString">
          <param name="name" type="DOMString"/>
        </method>
        <method setter="1" type="void">
          <param name="name" type="DOMString"/>
          <param name="value" type="DOMString"/>
        </method>
        <method deleter="1" type="void">
          <param name="name" type="DOMString"/>
        </method>
      </anonymous-methods>
    </interface>
    <interface name="DOMTokenList" extends="Object">
      <methods>
        <method name="add" type="void">
          <param name="tokens" type="DOMString" variadic="1"/>
        </method>
        <method name="contains" type="boolean">
          <param name="token" type="DOMString"/>
        </method>
        <method name="item" getter="1" nullable="1" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="remove" type="void">
          <param name="tokens" type="DOMString" variadic="1"/>
        </method>
        <method name="replace" type="void">
          <param name="token" type="DOMString"/>
          <param name="newToken" type="DOMString"/>
        </method>
        <method name="supports" type="boolean">
          <param name="token" type="DOMString"/>
        </method>
        <method name="toggle" type="boolean">
          <param name="token" type="DOMString"/>
          <param name="force" optional="1" type="boolean"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="value" stringifier="1" type="DOMString"/>
      </properties>
      <sn:declarations>
        <sn:iterable type="DOMString"/>
      </sn:declarations>
    </interface>
    <interface name="DragEvent" extends="MouseEvent">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="DragEventInit"/>
      </constructor>
      <properties>
        <property name="dataTransfer" read-only="1" nullable="1" type="DataTransfer"/>
      </properties>
    </interface>
    <interface name="DynamicsCompressorNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="DynamicsCompressorOptions"/>
      </constructor>
      <properties>
        <property name="attack" read-only="1" type="AudioParam"/>
        <property name="knee" read-only="1" type="AudioParam"/>
        <property name="ratio" read-only="1" type="AudioParam"/>
        <property name="reduction" read-only="1" type="float"/>
        <property name="release" read-only="1" type="AudioParam"/>
        <property name="threshold" read-only="1" type="AudioParam"/>
      </properties>
    </interface>
    <interface name="Element" extends="Node" exposed="Window">
      <methods>
        <method name="attachShadow" type="ShadowRoot">
          <param name="init" type="ShadowRootInit"/>
        </method>
        <method name="closest" nullable="1" type="Element">
          <param name="selectors" type="DOMString"/>
        </method>
        <method name="getAttribute" nullable="1" type="DOMString">
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="getAttributeNames" type="sequence&lt;DOMString&gt;"/>
        <method name="getAttributeNode" nullable="1" type="Attr">
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="getAttributeNodeNS" nullable="1" type="Attr">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="getAttributeNS" nullable="1" type="DOMString">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="getBoundingClientRect" type="DOMRect"/>
        <method name="getClientRects" type="sequence&lt;DOMRect&gt;"/>
        <method name="getElementsByClassName" type="HTMLCollection">
          <param name="classNames" type="DOMString"/>
        </method>
        <method name="getElementsByTagName" type="HTMLCollection">
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="getElementsByTagNameNS" type="HTMLCollection">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="hasAttribute" type="boolean">
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="hasAttributeNS" type="boolean">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="hasAttributes" type="boolean"/>
        <method name="insertAdjacentElement" nullable="1" type="Element">
          <param name="where" type="DOMString"/>
          <param name="element" type="Element"/>
        </method>
        <method name="insertAdjacentHTML" type="void">
          <param name="position" type="DOMString"/>
          <param name="text" type="DOMString"/>
        </method>
        <method name="insertAdjacentText" type="void">
          <param name="where" type="DOMString"/>
          <param name="data" type="DOMString"/>
        </method>
        <method name="matches" type="boolean">
          <param name="selectors" type="DOMString"/>
        </method>
        <method name="releasePointerCapture" type="void">
          <param name="pointerId" type="long"/>
        </method>
        <method name="removeAttribute" type="void">
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="removeAttributeNode" type="Attr">
          <param name="attr" type="Attr"/>
        </method>
        <method name="removeAttributeNS" type="void">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="requestFullscreen" type="Promise&lt;void&gt;"/>
        <method name="scroll" type="void">
          <param name="options" optional="1" type="ScrollToOptions"/>
        </method>
        <method name="scroll" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="scrollBy" type="void">
          <param name="options" optional="1" type="ScrollToOptions"/>
        </method>
        <method name="scrollBy" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="scrollIntoView" type="void"/>
        <method name="scrollIntoView" type="void">
          <param name="arg" type="(boolean or object)"/>
        </method>
        <method name="scrollTo" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="scrollTo" type="void">
          <param name="options" optional="1" type="ScrollToOptions"/>
        </method>
        <method name="setAttribute" type="void">
          <param name="qualifiedName" type="DOMString"/>
          <param name="value" type="DOMString"/>
        </method>
        <method name="setAttributeNode" nullable="1" type="Attr">
          <param name="attr" type="Attr"/>
        </method>
        <method name="setAttributeNodeNS" nullable="1" type="Attr">
          <param name="attr" type="Attr"/>
        </method>
        <method name="setAttributeNS" type="void">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="qualifiedName" type="DOMString"/>
          <param name="value" type="DOMString"/>
        </method>
        <method name="setPointerCapture" type="void">
          <param name="pointerId" type="long"/>
        </method>
        <method name="webkitMatchesSelector" type="boolean">
          <param name="selectors" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="attributes" read-only="1" type="NamedNodeMap"/>
        <property name="classList" read-only="1" type="DOMTokenList"/>
        <property name="className" type="DOMString"/>
        <property name="clientHeight" read-only="1" type="long"/>
        <property name="clientLeft" read-only="1" type="long"/>
        <property name="clientTop" read-only="1" type="long"/>
        <property name="clientWidth" read-only="1" type="long"/>
        <property name="id" type="DOMString"/>
        <property name="innerHTML" type="DOMString"/>
        <property name="localName" read-only="1" type="DOMString"/>
        <property name="namespaceURI" read-only="1" nullable="1" type="DOMString"/>
        <property name="ongotpointercapture" type="EventHandler" event-handler="gotpointercapture"/>
        <property name="onlostpointercapture" type="EventHandler" event-handler="lostpointercapture"/>
        <property name="outerHTML" type="DOMString"/>
        <property name="prefix" read-only="1" nullable="1" type="DOMString"/>
        <property name="scrollHeight" read-only="1" type="long"/>
        <property name="scrollLeft" type="unrestricted double"/>
        <property name="scrollTop" type="unrestricted double"/>
        <property name="scrollWidth" read-only="1" type="long"/>
        <property name="shadowRoot" read-only="1" nullable="1" type="ShadowRoot"/>
        <property name="slot" type="DOMString"/>
        <property name="tagName" read-only="1" type="DOMString"/>
      </properties>
      <implements>ParentNode</implements>
      <implements>NonDocumentTypeChildNode</implements>
      <implements>ChildNode</implements>
      <implements>Slotable</implements>
      <implements>GeometryUtils</implements>
      <events>
        <event name="click" bubbles="1" cancelable="1" dispatch="sync" follows="mouseup pointerup MSPointerUp" precedes="dblclick" type="MouseEvent"/>
        <event name="dblclick" bubbles="1" cancelable="1" dispatch="sync" follows="click" type="MouseEvent"/>
        <event name="mousemove" bubbles="1" cancelable="1" dispatch="sync" type="MouseEvent"/>
        <event name="mouseover" bubbles="1" cancelable="1" dispatch="sync" precedes="mouseout" type="MouseEvent"/>
        <event name="mouseout" bubbles="1" cancelable="1" dispatch="sync" follows="mouseover" type="MouseEvent"/>
        <event name="mousedown" bubbles="1" cancelable="1" dispatch="sync" precedes="mouseup" type="MouseEvent"/>
        <event name="mouseup" bubbles="1" cancelable="1" dispatch="sync" follows="mousedown" precedes="click" type="MouseEvent"/>
        <event name="mouseenter" dispatch="sync" precedes="mouseleave" type="MouseEvent"/>
        <event name="mouseleave" dispatch="sync" follows="mouseenter" type="MouseEvent"/>
        <event name="wheel" bubbles="1" cancelable="1" dispatch="sync" type="WheelEvent"/>
        <event name="mousewheel" bubbles="1" cancelable="1" dispatch="sync" type="WheelEvent"/>
        <event name="pointerenter" aliases="MSPointerEnter" dispatch="sync" precedes="pointerleave" type="PointerEvent"/>
        <event name="pointerleave" aliases="MSPointerLeave" dispatch="sync" follows="pointerenter" type="PointerEvent"/>
        <event name="pointerdown" aliases="MSPointerDown" bubbles="1" cancelable="1" dispatch="sync" precedes="pointermove" type="PointerEvent"/>
        <event name="pointermove" aliases="MSPointerMove" bubbles="1" cancelable="1" dispatch="sync" follows="pointerdown" precedes="pointerup pointercancel" type="PointerEvent"/>
        <event name="pointerup" aliases="MSPointerUp" bubbles="1" cancelable="1" dispatch="sync" follows="pointermove" precedes="click" type="PointerEvent"/>
        <event name="pointerover" aliases="MSPointerOver" bubbles="1" cancelable="1" dispatch="sync" precedes="pointerout" type="PointerEvent"/>
        <event name="pointerout" aliases="MSPointerOut" bubbles="1" cancelable="1" dispatch="sync" follows="pointerover" type="PointerEvent"/>
        <event name="pointercancel" aliases="MSPointerCancel" bubbles="1" dispatch="sync" follows="pointermove" type="PointerEvent"/>
        <event name="gotpointercapture" aliases="MSGotPointerCapture" bubbles="1" dispatch="sync" precedes="lostpointercapture" type="PointerEvent"/>
        <event name="lostpointercapture" aliases="MSLostPointerCapture" bubbles="1" dispatch="sync" follows="gotpointercapture" type="PointerEvent"/>
        <event name="contextmenu" bubbles="1" cancelable="1" dispatch="sync" type="PointerEvent"/>
        <event name="touchstart" bubbles="1" cancelable="1" dispatch="sync" precedes="touchmove" tags="WinPhoneOnly" type="TouchEvent"/>
        <event name="touchend" bubbles="1" cancelable="1" dispatch="sync" follows="touchmove" tags="WinPhoneOnly" type="TouchEvent"/>
        <event name="touchmove" bubbles="1" cancelable="1" dispatch="sync" follows="touchstart" precedes="touchend touchcancel" tags="WinPhoneOnly" type="TouchEvent"/>
        <event name="touchcancel" bubbles="1" dispatch="sync" follows="touchmove" tags="WinPhoneOnly" type="TouchEvent"/>
        <event name="selectstart" bubbles="1" cancelable="1" dispatch="sync" precedes="select selectionchange" tags="IEOnly" type="Event"/>
        <event name="select" bubbles="1" dispatch="sync" follows="selectstart selectionchange" type="UIEvent"/>
        <event name="keyup" bubbles="1" cancelable="1" dispatch="sync" follows="keydown keypress" type="KeyboardEvent"/>
        <event name="keydown" bubbles="1" cancelable="1" dispatch="sync" precedes="keyup keypress" type="KeyboardEvent"/>
        <event name="keypress" bubbles="1" cancelable="1" dispatch="sync" follows="keydown" precedes="keyup" type="KeyboardEvent"/>
        <event name="compositionstart" bubbles="1" cancelable="1" dispatch="sync" precedes="compositionupdate compositionend" type="CompositionEvent"/>
        <event name="compositionupdate" bubbles="1" dispatch="sync" follows="compositionstart" precedes="compositionend" type="CompositionEvent"/>
        <event name="compositionend" bubbles="1" dispatch="sync" follows="compositionstart compositionupdate" type="CompositionEvent"/>
        <event name="drag" bubbles="1" cancelable="1" dispatch="sync" follows="dragstart" precedes="dragend" type="DragEvent"/>
        <event name="dragstart" bubbles="1" cancelable="1" dispatch="sync" precedes="drag" type="DragEvent"/>
        <event name="dragenter" bubbles="1" cancelable="1" dispatch="sync" follows="drag" precedes="dragover drop" type="DragEvent"/>
        <event name="dragover" bubbles="1" cancelable="1" dispatch="sync" follows="dragenter" precedes="dragleave drop" type="DragEvent"/>
        <event name="dragleave" bubbles="1" dispatch="sync" follows="dragover" precedes="drag" type="DragEvent"/>
        <event name="dragend" bubbles="1" cancelable="1" dispatch="sync" follows="drag" type="DragEvent"/>
        <event name="drop" bubbles="1" dispatch="sync" follows="dragenter dragover" type="DragEvent"/>
        <event name="copy" bubbles="1" cancelable="1" dispatch="sync" follows="beforecopy" type="ClipboardEvent"/>
        <event name="cut" bubbles="1" cancelable="1" dispatch="sync" follows="beforecut" type="ClipboardEvent"/>
        <event name="paste" bubbles="1" cancelable="1" dispatch="sync" follows="beforepaste" type="ClipboardEvent"/>
        <event name="beforecopy" bubbles="1" cancelable="1" dispatch="sync" precedes="copy" tags="IEOnly" type="ClipboardEvent"/>
        <event name="beforecut" bubbles="1" cancelable="1" dispatch="sync" precedes="cut" tags="IEOnly" type="ClipboardEvent"/>
        <event name="beforepaste" bubbles="1" cancelable="1" dispatch="sync" precedes="paste" tags="IEOnly" type="ClipboardEvent"/>
        <event name="focus" dispatch="sync" precedes="blur" type="FocusEvent"/>
        <event name="blur" dispatch="sync" follows="focus" type="FocusEvent"/>
        <event name="focusin" aliases="DOMFocusIn" bubbles="1" dispatch="sync" precedes="focusout" type="FocusEvent"/>
        <event name="focusout" aliases="DOMFocusOut" bubbles="1" dispatch="sync" follows="focusin" type="FocusEvent"/>
        <event name="activate" bubbles="1" dispatch="sync" follows="beforeactivate" precedes="beforedeactivate" tags="IEOnly" type="UIEvent"/>
        <event name="deactivate" bubbles="1" dispatch="sync" follows="beforedeactivate" tags="IEOnly" type="UIEvent"/>
        <event name="beforeactivate" bubbles="1" cancelable="1" dispatch="sync" precedes="activate" tags="IEOnly" type="UIEvent"/>
        <event name="beforedeactivate" bubbles="1" cancelable="1" dispatch="sync" follows="activate" precedes="deactivate" tags="IEOnly" type="UIEvent"/>
        <event name="scroll" dispatch="async" type="UIEvent"/>
        <event name="transitionstart" aliases="MSTransitionStart webkitTransitionStart" bubbles="1" cancelable="1" dispatch="async" precedes="transitionend" type="TransitionEvent"/>
        <event name="transitionend" aliases="MSTransitionEnd webkitTransitionEnd" bubbles="1" cancelable="1" dispatch="async" follows="transitionstart" type="TransitionEvent"/>
        <event name="animationstart" aliases="MSAnimationStart webkitAnimationStart" bubbles="1" cancelable="1" dispatch="async" precedes="animationend animationiteration" type="AnimationEvent"/>
        <event name="animationend" aliases="MSAnimationEnd webkitAnimationEnd" bubbles="1" cancelable="1" dispatch="async" follows="animationstart animationiteration" type="AnimationEvent"/>
        <event name="animationiteration" aliases="MSAnimationIteration webkitAnimationIteration" bubbles="1" cancelable="1" dispatch="async" follows="animationstart" precedes="animationend" type="AnimationEvent"/>
      </events>
    </interface>
    <interface name="ErrorEvent" extends="Event" exposed="Window Worker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="ErrorEventInit"/>
      </constructor>
      <properties>
        <property name="colno" read-only="1" type="unsigned long"/>
        <property name="error" read-only="1" type="any"/>
        <property name="filename" read-only="1" type="USVString"/>
        <property name="lineno" read-only="1" type="unsigned long"/>
        <property name="message" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="Event" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="EventInit"/>
      </constructor>
      <constants>
        <constant name="AT_TARGET" type="unsigned short" value="2"/>
        <constant name="BUBBLING_PHASE" type="unsigned short" value="3"/>
        <constant name="CAPTURING_PHASE" type="unsigned short" value="1"/>
        <constant name="NONE" type="unsigned short" value="0"/>
      </constants>
      <methods>
        <method name="composedPath" type="sequence&lt;EventTarget&gt;"/>
        <method name="initEvent" type="void">
          <param name="type" type="DOMString"/>
          <param name="bubbles" default="false" optional="1" type="boolean"/>
          <param name="cancelable" default="false" optional="1" type="boolean"/>
        </method>
        <method name="preventDefault" type="void"/>
        <method name="stopImmediatePropagation" type="void"/>
        <method name="stopPropagation" type="void"/>
      </methods>
      <properties>
        <property name="bubbles" read-only="1" type="boolean"/>
        <property name="cancelable" read-only="1" type="boolean"/>
        <property name="cancelBubble" type="boolean"/>
        <property name="composed" read-only="1" type="boolean"/>
        <property name="currentTarget" read-only="1" nullable="1" type="EventTarget"/>
        <property name="defaultPrevented" read-only="1" type="boolean"/>
        <property name="eventPhase" read-only="1" type="unsigned short"/>
        <property name="isTrusted" read-only="1" type="boolean"/>
        <property name="target" read-only="1" nullable="1" type="EventTarget"/>
        <property name="timeStamp" read-only="1" type="DOMTimeStamp"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="EventSource" extends="EventTarget" exposed="Window Worker">
      <constructor>
        <param name="url" type="USVString"/>
        <param name="eventSourceInitDict" optional="1" type="EventSourceInit"/>
      </constructor>
      <constants>
        <constant name="CLOSED" type="unsigned short" value="2"/>
        <constant name="CONNECTING" type="unsigned short" value="0"/>
        <constant name="OPEN" type="unsigned short" value="1"/>
      </constants>
      <methods>
        <method name="close" type="void"/>
      </methods>
      <properties>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="onmessage" type="EventHandler" event-handler="message"/>
        <property name="onopen" type="EventHandler" event-handler="open"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
        <property name="url" read-only="1" type="USVString"/>
        <property name="withCredentials" read-only="1" type="boolean"/>
      </properties>
      <events>
        <event name="error" type="Event"/>
        <event name="message" type="MessageEvent"/>
        <event name="open" type="Event"/>
      </events>
    </interface>
    <interface name="EventTarget" extends="Object" exposed="Window Worker">
      <methods>
        <method name="addEventListener" type="void">
          <param name="type" type="DOMString"/>
          <param name="callback" nullable="1" type="EventListener"/>
          <param name="options" optional="1" type="(AddEventListenerOptions or boolean)"/>
        </method>
        <method name="dispatchEvent" type="boolean">
          <param name="event" type="Event"/>
        </method>
        <method name="removeEventListener" type="void">
          <param name="type" type="DOMString"/>
          <param name="callback" nullable="1" type="EventListener"/>
          <param name="options" optional="1" type="(EventListenerOptions or boolean)"/>
        </method>
      </methods>
    </interface>
    <interface name="ExtendableEvent" extends="Event" exposed="ServiceWorker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="ExtendableEventInit"/>
      </constructor>
      <methods>
        <method name="waitUntil" type="void">
          <param name="f" type="Promise&lt;any&gt;"/>
        </method>
      </methods>
    </interface>
    <interface name="ExtendableMessageEvent" extends="ExtendableEvent" exposed="ServiceWorker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="ExtendableMessageEventInit"/>
      </constructor>
      <properties>
        <property name="data" read-only="1" type="any"/>
        <property name="lastEventId" read-only="1" type="DOMString"/>
        <property name="origin" read-only="1" type="USVString"/>
        <property name="ports" read-only="1" type="FrozenArray&lt;MessagePort&gt;"/>
        <property name="source" read-only="1" nullable="1" type="(Client or ServiceWorker or MessagePort)"/>
      </properties>
    </interface>
    <interface name="FetchEvent" extends="ExtendableEvent" exposed="ServiceWorker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="FetchEventInit"/>
      </constructor>
      <methods>
        <method name="respondWith" type="void">
          <param name="r" type="Promise&lt;Response&gt;"/>
        </method>
      </methods>
      <properties>
        <property name="clientId" read-only="1" type="DOMString"/>
        <property name="preloadResponse" read-only="1" type="Promise&lt;any&gt;"/>
        <property name="request" read-only="1" type="Request"/>
        <property name="reservedClientId" read-only="1" type="DOMString"/>
        <property name="targetClientId" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="File" extends="Blob" exposed="Window Worker">
      <constructor>
        <param name="fileBits" type="sequence&lt;BlobPart&gt;"/>
        <param name="fileName" type="USVString"/>
        <param name="options" optional="1" type="FilePropertyBag"/>
      </constructor>
      <properties>
        <property name="lastModified" read-only="1" type="long long"/>
        <property name="name" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="FileList" extends="Object" exposed="Window Worker">
      <methods>
        <method name="item" getter="1" nullable="1" type="File">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="FileReader" extends="EventTarget" exposed="Window Worker">
      <constructor/>
      <constants>
        <constant name="DONE" type="unsigned short" value="2"/>
        <constant name="EMPTY" type="unsigned short" value="0"/>
        <constant name="LOADING" type="unsigned short" value="1"/>
      </constants>
      <methods>
        <method name="abort" type="void"/>
        <method name="readAsArrayBuffer" type="void">
          <param name="blob" type="Blob"/>
        </method>
        <method name="readAsBinaryString" type="void">
          <param name="blob" type="Blob"/>
        </method>
        <method name="readAsDataURL" type="void">
          <param name="blob" type="Blob"/>
        </method>
        <method name="readAsText" type="void">
          <param name="blob" type="Blob"/>
          <param name="label" optional="1" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="error" read-only="1" nullable="1" type="DOMException"/>
        <property name="onabort" type="EventHandler" event-handler="abort"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="onload" type="EventHandler" event-handler="load"/>
        <property name="onloadend" type="EventHandler" event-handler="loadend"/>
        <property name="onloadstart" type="EventHandler" event-handler="loadstart"/>
        <property name="onprogress" type="EventHandler" event-handler="progress"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
        <property name="result" read-only="1" nullable="1" type="(DOMString or ArrayBuffer)"/>
      </properties>
      <events>
        <event name="abort" type="ProgressEvent"/>
        <event name="error" type="ProgressEvent"/>
        <event name="load" type="ProgressEvent"/>
        <event name="loadend" type="ProgressEvent"/>
        <event name="loadstart" type="ProgressEvent"/>
        <event name="progress" type="ProgressEvent"/>
        <event name="load" dispatch="sync" follows="progress" precedes="loadend" skips-window="1" type="ProgressEvent"/>
        <event name="loadstart" dispatch="sync" precedes="progress" skips-window="1" type="ProgressEvent"/>
        <event name="loadend" dispatch="sync" follows="load" skips-window="1" type="ProgressEvent"/>
        <event name="progress" dispatch="sync" follows="loadstart" precedes="load" skips-window="1" type="ProgressEvent"/>
        <event name="abort" dispatch="sync" skips-window="1" type="ProgressEvent"/>
        <event name="error" dispatch="sync" skips-window="1" type="ProgressEvent"/>
      </events>
    </interface>
    <interface name="FileReaderSync" extends="Object" exposed="DedicatedWorker SharedWorker">
      <constructor/>
      <methods>
        <method name="readAsArrayBuffer" type="ArrayBuffer">
          <param name="blob" type="Blob"/>
        </method>
        <method name="readAsBinaryString" type="DOMString">
          <param name="blob" type="Blob"/>
        </method>
        <method name="readAsDataURL" type="DOMString">
          <param name="blob" type="Blob"/>
        </method>
        <method name="readAsText" type="DOMString">
          <param name="blob" type="Blob"/>
          <param name="label" optional="1" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="FocusEvent" extends="UIEvent">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="FocusEventInit"/>
      </constructor>
      <properties>
        <property name="relatedTarget" read-only="1" nullable="1" type="EventTarget"/>
      </properties>
    </interface>
    <interface name="ForeignFetchEvent" extends="ExtendableEvent" exposed="ServiceWorker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="ForeignFetchEventInit"/>
      </constructor>
      <methods>
        <method name="respondWith" type="void">
          <param name="r" type="Promise&lt;ForeignFetchResponse&gt;"/>
        </method>
      </methods>
      <properties>
        <property name="origin" read-only="1" type="USVString"/>
        <property name="request" read-only="1" type="Request"/>
      </properties>
    </interface>
    <interface name="FormData" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="form" optional="1" type="HTMLFormElement"/>
      </constructor>
      <methods>
        <method name="append" type="void">
          <param name="name" type="USVString"/>
          <param name="value" type="USVString"/>
        </method>
        <method name="append" type="void">
          <param name="name" type="USVString"/>
          <param name="blobValue" type="Blob"/>
          <param name="filename" optional="1" type="USVString"/>
        </method>
        <method name="delete" type="void">
          <param name="name" type="USVString"/>
        </method>
        <method name="get" nullable="1" type="FormDataEntryValue">
          <param name="name" type="USVString"/>
        </method>
        <method name="getAll" type="sequence&lt;FormDataEntryValue&gt;">
          <param name="name" type="USVString"/>
        </method>
        <method name="has" type="boolean">
          <param name="name" type="USVString"/>
        </method>
        <method name="set" type="void">
          <param name="name" type="USVString"/>
          <param name="value" type="USVString"/>
        </method>
        <method name="set" type="void">
          <param name="name" type="USVString"/>
          <param name="blobValue" type="Blob"/>
          <param name="filename" optional="1" type="USVString"/>
        </method>
      </methods>
      <sn:declarations>
        <sn:iterable keytype="FormDataEntryValue" type="FormDataEntryValue"/>
      </sn:declarations>
    </interface>
    <interface name="GainNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="GainOptions"/>
      </constructor>
      <properties>
        <property name="gain" read-only="1" type="AudioParam"/>
      </properties>
    </interface>
    <interface name="Gamepad" extends="Object">
      <properties>
        <property name="axes" read-only="1" type="FrozenArray&lt;double&gt;"/>
        <property name="buttons" read-only="1" type="FrozenArray&lt;GamepadButton&gt;"/>
        <property name="connected" read-only="1" type="boolean"/>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="index" read-only="1" type="long"/>
        <property name="mapping" read-only="1" type="GamepadMappingType"/>
        <property name="timestamp" read-only="1" type="DOMHighResTimeStamp"/>
      </properties>
    </interface>
    <interface name="GamepadButton" extends="Object">
      <properties>
        <property name="pressed" read-only="1" type="boolean"/>
        <property name="touched" read-only="1" type="boolean"/>
        <property name="value" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="GamepadEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="GamepadEventInit"/>
      </constructor>
      <properties>
        <property name="gamepad" read-only="1" type="Gamepad"/>
      </properties>
    </interface>
    <interface name="HashChangeEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="HashChangeEventInit"/>
      </constructor>
      <properties>
        <property name="newURL" read-only="1" type="USVString"/>
        <property name="oldURL" read-only="1" type="USVString"/>
      </properties>
    </interface>
    <interface name="Headers" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="init" optional="1" type="HeadersInit"/>
      </constructor>
      <methods>
        <method name="append" type="void">
          <param name="name" type="ByteString"/>
          <param name="value" type="ByteString"/>
        </method>
        <method name="delete" type="void">
          <param name="name" type="ByteString"/>
        </method>
        <method name="get" nullable="1" type="ByteString">
          <param name="name" type="ByteString"/>
        </method>
        <method name="has" type="boolean">
          <param name="name" type="ByteString"/>
        </method>
        <method name="set" type="void">
          <param name="name" type="ByteString"/>
          <param name="value" type="ByteString"/>
        </method>
      </methods>
      <sn:declarations>
        <sn:iterable keytype="ByteString" type="ByteString"/>
      </sn:declarations>
    </interface>
    <interface name="History" extends="Object">
      <methods>
        <method name="back" type="void"/>
        <method name="forward" type="void"/>
        <method name="go" type="void">
          <param name="delta" default="0" optional="1" type="long"/>
        </method>
        <method name="pushState" type="void">
          <param name="data" type="any"/>
          <param name="title" type="DOMString"/>
          <param name="url" default="null" optional="1" nullable="1" type="USVString"/>
        </method>
        <method name="replaceState" type="void">
          <param name="data" type="any"/>
          <param name="title" type="DOMString"/>
          <param name="url" default="null" optional="1" nullable="1" type="USVString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="scrollRestoration" type="ScrollRestoration"/>
        <property name="state" read-only="1" type="any"/>
      </properties>
    </interface>
    <interface name="HTMLAllCollection" extends="Object">
      <anonymous-methods>
        <method getter="1" nullable="1" type="Element">
          <param name="index" type="unsigned long"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="item" legacy-caller="1" nullable="1" type="(HTMLCollection or Element)">
          <param name="nameOrIndex" optional="1" type="DOMString"/>
        </method>
        <method name="namedItem" getter="1" nullable="1" type="(HTMLCollection or Element)">
          <param name="name" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="HTMLAnchorElement" extends="HTMLElement">
      <properties>
        <property name="charset" type="DOMString"/>
        <property name="coords" type="DOMString"/>
        <property name="download" type="DOMString"/>
        <property name="hreflang" type="DOMString"/>
        <property name="name" type="DOMString"/>
        <property name="ping" type="USVString"/>
        <property name="referrerPolicy" type="DOMString"/>
        <property name="rel" type="DOMString"/>
        <property name="relList" read-only="1" type="DOMTokenList"/>
        <property name="rev" type="DOMString"/>
        <property name="shape" type="DOMString"/>
        <property name="target" type="DOMString"/>
        <property name="text" type="DOMString"/>
        <property name="type" type="DOMString"/>
      </properties>
      <implements>HTMLHyperlinkElementUtils</implements>
      <element name="a" namespace="HTML"/>
    </interface>
    <interface name="HTMLAppletElement" extends="HTMLElement">
      <properties>
        <property name="align" type="DOMString"/>
        <property name="alt" type="DOMString"/>
        <property name="archive" type="DOMString"/>
        <property name="code" type="DOMString"/>
        <property name="codeBase" type="USVString"/>
        <property name="height" type="DOMString"/>
        <property name="hspace" type="unsigned long"/>
        <property name="name" type="DOMString"/>
        <property name="object" type="USVString"/>
        <property name="vspace" type="unsigned long"/>
        <property name="width" type="DOMString"/>
      </properties>
      <element name="applet" namespace="HTML"/>
    </interface>
    <interface name="HTMLAreaElement" extends="HTMLElement">
      <properties>
        <property name="alt" type="DOMString"/>
        <property name="coords" type="DOMString"/>
        <property name="download" type="DOMString"/>
        <property name="noHref" type="boolean"/>
        <property name="ping" type="USVString"/>
        <property name="referrerPolicy" type="DOMString"/>
        <property name="rel" type="DOMString"/>
        <property name="relList" read-only="1" type="DOMTokenList"/>
        <property name="shape" type="DOMString"/>
        <property name="target" type="DOMString"/>
      </properties>
      <implements>HTMLHyperlinkElementUtils</implements>
      <element name="area" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLAudioElement" extends="HTMLMediaElement">
      <named-constructor name="Audio">
        <param name="src" optional="1" type="DOMString"/>
      </named-constructor>
      <element name="audio" namespace="HTML"/>
    </interface>
    <interface name="HTMLBaseElement" extends="HTMLElement">
      <properties>
        <property name="href" type="USVString"/>
        <property name="target" type="DOMString"/>
      </properties>
      <element name="base" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLBodyElement" extends="HTMLElement">
      <implements>WindowEventHandlers</implements>
      <properties>
        <property name="aLink" type="DOMString"/>
        <property name="background" type="DOMString"/>
        <property name="bgColor" type="DOMString"/>
        <property name="link" type="DOMString"/>
        <property name="text" type="DOMString"/>
        <property name="vLink" type="DOMString"/>
      </properties>
      <events>
        <event name="offline" bubbles="1" dispatch="async" type="Event"/>
        <event name="online" bubbles="1" dispatch="async" type="Event"/>
      </events>
      <element name="body" namespace="HTML"/>
    </interface>
    <interface name="HTMLBRElement" extends="HTMLElement">
      <properties>
        <property name="clear" type="DOMString"/>
      </properties>
      <element name="br" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLButtonElement" extends="HTMLElement">
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="reportValidity" type="boolean"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="autofocus" type="boolean"/>
        <property name="disabled" type="boolean"/>
        <property name="form" read-only="1" nullable="1" type="HTMLFormElement"/>
        <property name="formAction" type="USVString"/>
        <property name="formEnctype" type="DOMString"/>
        <property name="formMethod" type="DOMString"/>
        <property name="formNoValidate" type="boolean"/>
        <property name="formTarget" type="DOMString"/>
        <property name="labels" read-only="1" type="NodeList"/>
        <property name="name" type="DOMString"/>
        <property name="type" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="value" type="DOMString"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
      <element name="button" namespace="HTML"/>
    </interface>
    <interface name="HTMLCanvasElement" extends="HTMLElement">
      <methods>
        <method name="getContext" nullable="1" type="RenderingContext">
          <param name="contextId" type="DOMString"/>
          <param name="arguments" type="any" variadic="1"/>
        </method>
        <method name="toBlob" type="void">
          <param name="callback" type="BlobCallback"/>
          <param name="type" optional="1" type="DOMString"/>
          <param name="quality" optional="1" type="any"/>
        </method>
        <method name="toDataURL" type="USVString">
          <param name="type" optional="1" type="DOMString"/>
          <param name="quality" optional="1" type="any"/>
        </method>
        <method name="transferControlToOffscreen" type="OffscreenCanvas"/>
      </methods>
      <properties>
        <property name="height" type="unsigned long"/>
        <property name="width" type="unsigned long"/>
      </properties>
      <events>
        <event name="webglcontextlost" dispatch="async" precedes="webglcontextrestored" type="WebGLContextEvent"/>
        <event name="webglcontextrestored" dispatch="async" follows="webglcontextlost" type="WebGLContextEvent"/>
        <event name="webglcontextcreationerror" dispatch="async" type="WebGLContextEvent"/>
      </events>
      <element name="canvas" namespace="HTML"/>
    </interface>
    <interface name="HTMLCollection" extends="Object" exposed="Window">
      <methods>
        <method name="item" getter="1" nullable="1" type="Element">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="namedItem" getter="1" nullable="1" type="Element">
          <param name="name" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="HTMLDataElement" extends="HTMLElement">
      <properties>
        <property name="value" type="DOMString"/>
      </properties>
      <element name="data" namespace="HTML"/>
    </interface>
    <interface name="HTMLDataListElement" extends="HTMLElement">
      <properties>
        <property name="options" read-only="1" type="HTMLCollection"/>
      </properties>
      <element name="datalist" namespace="HTML"/>
    </interface>
    <interface name="HTMLDetailsElement" extends="HTMLElement">
      <properties>
        <property name="open" type="boolean"/>
      </properties>
    </interface>
    <interface name="HTMLDialogElement" extends="HTMLElement">
      <methods>
        <method name="close" type="void">
          <param name="returnValue" optional="1" type="DOMString"/>
        </method>
        <method name="show" type="void"/>
        <method name="showModal" type="void"/>
      </methods>
      <properties>
        <property name="open" type="boolean"/>
        <property name="returnValue" type="DOMString"/>
      </properties>
      <element name="dialog"/>
    </interface>
    <interface name="HTMLDirectoryElement" extends="HTMLElement">
      <properties>
        <property name="compact" type="boolean"/>
      </properties>
      <element name="dir" namespace="HTML"/>
    </interface>
    <interface name="HTMLDivElement" extends="HTMLElement">
      <properties>
        <property name="align" type="DOMString"/>
      </properties>
      <element name="div" namespace="HTML"/>
    </interface>
    <interface name="HTMLDListElement" extends="HTMLElement">
      <properties>
        <property name="compact" type="boolean"/>
      </properties>
      <element name="dl" namespace="HTML"/>
    </interface>
    <interface name="HTMLElement" extends="Element">
      <methods>
        <method name="blur" type="void"/>
        <method name="click" type="void"/>
        <method name="focus" type="void"/>
        <method name="forceSpellCheck" type="void"/>
      </methods>
      <properties>
        <property name="accessKey" type="DOMString"/>
        <property name="accessKeyLabel" read-only="1" type="DOMString"/>
        <property name="contextMenu" nullable="1" type="HTMLMenuElement"/>
        <property name="dataset" read-only="1" type="DOMStringMap"/>
        <property name="dir" type="DOMString"/>
        <property name="draggable" type="boolean"/>
        <property name="hidden" type="boolean"/>
        <property name="innerText" type="DOMString"/>
        <property name="lang" type="DOMString"/>
        <property name="offsetHeight" read-only="1" type="long"/>
        <property name="offsetLeft" read-only="1" type="long"/>
        <property name="offsetParent" read-only="1" nullable="1" type="Element"/>
        <property name="offsetTop" read-only="1" type="long"/>
        <property name="offsetWidth" read-only="1" type="long"/>
        <property name="spellcheck" type="boolean"/>
        <property name="tabIndex" type="long"/>
        <property name="title" type="DOMString"/>
        <property name="translate" type="boolean"/>
      </properties>
      <implements>GlobalEventHandlers</implements>
      <implements>DocumentAndElementEventHandlers</implements>
      <implements>ElementContentEditable</implements>
      <implements>ElementCSSInlineStyle</implements>
      <element name="noframes" namespace="HTML"/>
      <element name="noscript" namespace="HTML"/>
      <element name="wbr" html-self-closing="1" namespace="HTML"/>
      <element name="section" namespace="HTML"/>
      <element name="nav" namespace="HTML"/>
      <element name="article" namespace="HTML"/>
      <element name="aside" namespace="HTML"/>
      <element name="hgroup" namespace="HTML"/>
      <element name="header" namespace="HTML"/>
      <element name="footer" namespace="HTML"/>
      <element name="figure" namespace="HTML"/>
      <element name="figcaption" namespace="HTML"/>
      <element name="mark" namespace="HTML"/>
      <element name="dd" namespace="HTML"/>
      <element name="dt" namespace="HTML"/>
      <element name="abbr" namespace="HTML"/>
      <element name="acronym" namespace="HTML"/>
      <element name="b" namespace="HTML"/>
      <element name="bdo" namespace="HTML"/>
      <element name="big" namespace="HTML"/>
      <element name="cite" namespace="HTML"/>
      <element name="code" namespace="HTML"/>
      <element name="dfn" namespace="HTML"/>
      <element name="em" namespace="HTML"/>
      <element name="i" namespace="HTML"/>
      <element name="kbd" namespace="HTML"/>
      <element name="nobr" namespace="HTML"/>
      <element name="rt" namespace="HTML"/>
      <element name="ruby" namespace="HTML"/>
      <element name="s" namespace="HTML"/>
      <element name="samp" namespace="HTML"/>
      <element name="small" namespace="HTML"/>
      <element name="strike" namespace="HTML"/>
      <element name="strong" namespace="HTML"/>
      <element name="sub" namespace="HTML"/>
      <element name="sup" namespace="HTML"/>
      <element name="tt" namespace="HTML"/>
      <element name="u" namespace="HTML"/>
      <element name="var" namespace="HTML"/>
      <element name="address" namespace="HTML"/>
      <element name="center" namespace="HTML"/>
      <element name="keygen" html-self-closing="1" namespace="HTML"/>
      <element name="plaintext" namespace="HTML"/>
    </interface>
    <interface name="HTMLEmbedElement" extends="HTMLElement">
      <methods>
        <method name="getSVGDocument" nullable="1" type="Document"/>
      </methods>
      <properties>
        <property name="align" type="DOMString"/>
        <property name="height" type="DOMString"/>
        <property name="name" type="DOMString"/>
        <property name="src" type="USVString"/>
        <property name="type" type="DOMString"/>
        <property name="width" type="DOMString"/>
      </properties>
      <element name="embed" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLFieldSetElement" extends="HTMLElement">
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="reportValidity" type="boolean"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="disabled" type="boolean"/>
        <property name="elements" read-only="1" type="HTMLCollection"/>
        <property name="form" read-only="1" nullable="1" type="HTMLFormElement"/>
        <property name="name" type="DOMString"/>
        <property name="type" read-only="1" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
      <element name="fieldset" namespace="HTML"/>
    </interface>
    <interface name="HTMLFontElement" extends="HTMLElement">
      <properties>
        <property name="color" type="DOMString"/>
        <property name="face" type="DOMString"/>
        <property name="size" type="DOMString"/>
      </properties>
      <element name="font" namespace="HTML"/>
    </interface>
    <interface name="HTMLFormControlsCollection" extends="HTMLCollection">
      <methods>
        <method name="namedItem" getter="1" nullable="1" type="(RadioNodeList or Element)">
          <param name="name" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="HTMLFormElement" extends="HTMLElement" override-builtins="1">
      <anonymous-methods>
        <method getter="1" type="Element">
          <param name="index" type="unsigned long"/>
        </method>
        <method getter="1" type="(RadioNodeList or Element)">
          <param name="name" type="DOMString"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="reportValidity" type="boolean"/>
        <method name="reset" type="void"/>
        <method name="submit" type="void"/>
      </methods>
      <properties>
        <property name="acceptCharset" type="DOMString"/>
        <property name="action" type="USVString"/>
        <property name="autocomplete" type="DOMString"/>
        <property name="elements" read-only="1" type="HTMLFormControlsCollection"/>
        <property name="encoding" type="DOMString"/>
        <property name="enctype" type="DOMString"/>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="method" type="DOMString"/>
        <property name="name" type="DOMString"/>
        <property name="noValidate" type="boolean"/>
        <property name="target" type="DOMString"/>
      </properties>
      <events>
        <event name="reset" bubbles="1" cancelable="1" dispatch="sync" type="Event"/>
        <event name="submit" bubbles="1" cancelable="1" dispatch="sync" type="Event"/>
      </events>
      <element name="form" namespace="HTML"/>
    </interface>
    <interface name="HTMLFrameElement" extends="HTMLElement">
      <properties>
        <property name="contentDocument" read-only="1" nullable="1" type="Document"/>
        <property name="contentWindow" read-only="1" nullable="1" type="WindowProxy"/>
        <property name="frameBorder" type="DOMString"/>
        <property name="longDesc" type="USVString"/>
        <property name="marginHeight" type="DOMString"/>
        <property name="marginWidth" type="DOMString"/>
        <property name="name" type="DOMString"/>
        <property name="noResize" type="boolean"/>
        <property name="scrolling" type="DOMString"/>
        <property name="src" type="USVString"/>
      </properties>
      <events>
        <event name="load" dispatch="async" skips-window="1" type="Event"/>
      </events>
      <element name="frame" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLFrameSetElement" extends="HTMLElement">
      <properties>
        <property name="cols" type="DOMString"/>
        <property name="rows" type="DOMString"/>
      </properties>
      <implements>WindowEventHandlers</implements>
      <element name="frameset" namespace="HTML"/>
    </interface>
    <interface name="HTMLHeadElement" extends="HTMLElement">
      <element name="head" namespace="HTML"/>
    </interface>
    <interface name="HTMLHeadingElement" extends="HTMLElement">
      <properties>
        <property name="align" type="DOMString"/>
      </properties>
      <element name="h1" namespace="HTML"/>
      <element name="h2" namespace="HTML"/>
      <element name="h3" namespace="HTML"/>
      <element name="h4" namespace="HTML"/>
      <element name="h5" namespace="HTML"/>
      <element name="h6" namespace="HTML"/>
    </interface>
    <interface name="HTMLHRElement" extends="HTMLElement">
      <properties>
        <property name="align" type="DOMString"/>
        <property name="color" type="DOMString"/>
        <property name="noShade" type="boolean"/>
        <property name="size" type="DOMString"/>
        <property name="width" type="DOMString"/>
      </properties>
      <element name="hr" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLHtmlElement" extends="HTMLElement">
      <properties>
        <property name="version" type="DOMString"/>
      </properties>
      <element name="html" namespace="HTML"/>
    </interface>
    <interface name="HTMLIFrameElement" extends="HTMLElement">
      <methods>
        <method name="getSVGDocument" nullable="1" type="Document"/>
      </methods>
      <properties>
        <property name="align" type="DOMString"/>
        <property name="allowFullscreen" type="boolean"/>
        <property name="allowPaymentRequest" type="boolean"/>
        <property name="allowUserMedia" type="boolean"/>
        <property name="contentDocument" read-only="1" nullable="1" type="Document"/>
        <property name="contentWindow" read-only="1" nullable="1" type="WindowProxy"/>
        <property name="frameBorder" type="DOMString"/>
        <property name="height" type="DOMString"/>
        <property name="longDesc" type="USVString"/>
        <property name="marginHeight" type="DOMString"/>
        <property name="marginWidth" type="DOMString"/>
        <property name="name" type="DOMString"/>
        <property name="referrerPolicy" type="DOMString"/>
        <property name="sandbox" read-only="1" type="DOMTokenList"/>
        <property name="scrolling" type="DOMString"/>
        <property name="src" type="USVString"/>
        <property name="srcdoc" type="DOMString"/>
        <property name="width" type="DOMString"/>
      </properties>
      <events>
        <event name="load" dispatch="async" skips-window="1" type="Event"/>
      </events>
      <element name="iframe" namespace="HTML"/>
    </interface>
    <interface name="HTMLImageElement" extends="HTMLElement">
      <named-constructor name="Image">
        <param name="width" optional="1" type="unsigned long"/>
        <param name="height" optional="1" type="unsigned long"/>
      </named-constructor>
      <properties>
        <property name="align" type="DOMString"/>
        <property name="alt" type="DOMString"/>
        <property name="border" type="DOMString"/>
        <property name="complete" read-only="1" type="boolean"/>
        <property name="crossOrigin" nullable="1" type="DOMString"/>
        <property name="currentSrc" read-only="1" type="USVString"/>
        <property name="height" type="unsigned long"/>
        <property name="hspace" type="unsigned long"/>
        <property name="isMap" type="boolean"/>
        <property name="longDesc" type="USVString"/>
        <property name="lowsrc" type="USVString"/>
        <property name="name" type="DOMString"/>
        <property name="naturalHeight" read-only="1" type="unsigned long"/>
        <property name="naturalWidth" read-only="1" type="unsigned long"/>
        <property name="referrerPolicy" type="DOMString"/>
        <property name="sizes" type="DOMString"/>
        <property name="src" type="USVString"/>
        <property name="srcset" type="USVString"/>
        <property name="useMap" type="DOMString"/>
        <property name="vspace" type="unsigned long"/>
        <property name="width" type="unsigned long"/>
        <property name="x" read-only="1" type="long"/>
        <property name="y" read-only="1" type="long"/>
      </properties>
      <events>
        <event name="error" dispatch="sync" type="Event"/>
      </events>
      <element name="img" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLInputElement" extends="HTMLElement">
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="reportValidity" type="boolean"/>
        <method name="select" type="void"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
        <method name="setRangeText" type="void">
          <param name="replacement" type="DOMString"/>
        </method>
        <method name="setRangeText" type="void">
          <param name="replacement" type="DOMString"/>
          <param name="start" type="unsigned long"/>
          <param name="end" type="unsigned long"/>
          <param name="selectionMode" default="&quot;preserve&quot;" optional="1" type="SelectionMode"/>
        </method>
        <method name="setSelectionRange" type="void">
          <param name="start" type="unsigned long"/>
          <param name="end" type="unsigned long"/>
          <param name="direction" optional="1" type="DOMString"/>
        </method>
        <method name="stepDown" type="void">
          <param name="n" default="1" optional="1" type="long"/>
        </method>
        <method name="stepUp" type="void">
          <param name="n" default="1" optional="1" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="accept" type="DOMString"/>
        <property name="align" type="DOMString"/>
        <property name="alt" type="DOMString"/>
        <property name="autocomplete" type="DOMString"/>
        <property name="autofocus" type="boolean"/>
        <property name="checked" type="boolean"/>
        <property name="defaultChecked" type="boolean"/>
        <property name="defaultValue" type="DOMString"/>
        <property name="dirName" type="DOMString"/>
        <property name="disabled" type="boolean"/>
        <property name="files" read-only="1" nullable="1" type="FileList"/>
        <property name="form" read-only="1" nullable="1" type="HTMLFormElement"/>
        <property name="formAction" type="USVString"/>
        <property name="formEnctype" type="DOMString"/>
        <property name="formMethod" type="DOMString"/>
        <property name="formNoValidate" type="boolean"/>
        <property name="formTarget" type="DOMString"/>
        <property name="height" type="unsigned long"/>
        <property name="indeterminate" type="boolean"/>
        <property name="inputMode" type="DOMString"/>
        <property name="labels" read-only="1" nullable="1" type="NodeList"/>
        <property name="list" read-only="1" nullable="1" type="HTMLElement"/>
        <property name="max" type="DOMString"/>
        <property name="maxLength" type="long"/>
        <property name="min" type="DOMString"/>
        <property name="minLength" type="long"/>
        <property name="multiple" type="boolean"/>
        <property name="name" type="DOMString"/>
        <property name="pattern" type="DOMString"/>
        <property name="placeholder" type="DOMString"/>
        <property name="readOnly" type="boolean"/>
        <property name="required" type="boolean"/>
        <property name="selectionDirection" nullable="1" type="DOMString"/>
        <property name="selectionEnd" nullable="1" type="unsigned long"/>
        <property name="selectionStart" nullable="1" type="unsigned long"/>
        <property name="size" type="unsigned long"/>
        <property name="src" type="USVString"/>
        <property name="step" type="DOMString"/>
        <property name="type" type="DOMString"/>
        <property name="useMap" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="value" type="DOMString"/>
        <property name="valueAsDate" nullable="1" type="object"/>
        <property name="valueAsNumber" type="unrestricted double"/>
        <property name="width" type="unsigned long"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
      <events>
        <event name="change" bubbles="1" dispatch="sync" type="Event"/>
        <event name="input" bubbles="1" dispatch="async" type="Event"/>
        <event name="error" dispatch="sync" type="Event"/>
        <event name="invalid" cancelable="1" dispatch="sync" type="Event"/>
      </events>
      <element name="input" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLLabelElement" extends="HTMLElement">
      <properties>
        <property name="control" read-only="1" nullable="1" type="HTMLElement"/>
        <property name="form" read-only="1" nullable="1" type="HTMLFormElement"/>
        <property name="htmlFor" type="DOMString"/>
      </properties>
      <element name="label" namespace="HTML"/>
    </interface>
    <interface name="HTMLLegendElement" extends="HTMLElement">
      <properties>
        <property name="align" type="DOMString"/>
        <property name="form" read-only="1" nullable="1" type="HTMLFormElement"/>
      </properties>
      <element name="legend" namespace="HTML"/>
    </interface>
    <interface name="HTMLLIElement" extends="HTMLElement">
      <properties>
        <property name="type" type="DOMString"/>
        <property name="value" type="long"/>
      </properties>
      <element name="li" namespace="HTML"/>
    </interface>
    <interface name="HTMLLinkElement" extends="HTMLElement">
      <properties>
        <property name="as" type="DOMString"/>
        <property name="charset" type="DOMString"/>
        <property name="crossOrigin" nullable="1" type="DOMString"/>
        <property name="href" type="USVString"/>
        <property name="hreflang" type="DOMString"/>
        <property name="integrity" type="DOMString"/>
        <property name="media" type="DOMString"/>
        <property name="nonce" type="DOMString"/>
        <property name="referrerPolicy" type="DOMString"/>
        <property name="rel" type="DOMString"/>
        <property name="relList" read-only="1" type="DOMTokenList"/>
        <property name="rev" type="DOMString"/>
        <property name="scope" type="USVString"/>
        <property name="sizes" read-only="1" type="DOMTokenList"/>
        <property name="target" type="DOMString"/>
        <property name="type" type="DOMString"/>
        <property name="useCache" type="boolean"/>
        <property name="workerType" type="WorkerType"/>
      </properties>
      <implements>LinkStyle</implements>
      <events>
        <event name="error" dispatch="async" type="Event"/>
        <event name="load" dispatch="async" follows="readystatechange" skips-window="1" type="Event"/>
        <event name="readystatechange" dispatch="async" precedes="load" tags="IEOnly" type="Event"/>
      </events>
      <element name="link" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLMapElement" extends="HTMLElement">
      <properties>
        <property name="areas" read-only="1" type="HTMLCollection"/>
        <property name="name" type="DOMString"/>
      </properties>
      <element name="map" namespace="HTML"/>
    </interface>
    <interface name="HTMLMarqueeElement" extends="HTMLElement">
      <methods>
        <method name="start" type="void"/>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="behavior" type="DOMString"/>
        <property name="bgColor" type="DOMString"/>
        <property name="direction" type="DOMString"/>
        <property name="height" type="DOMString"/>
        <property name="hspace" type="unsigned long"/>
        <property name="loop" type="long"/>
        <property name="onbounce" type="EventHandler" event-handler="bounce"/>
        <property name="onfinish" type="EventHandler" event-handler="finish"/>
        <property name="onstart" type="EventHandler" event-handler="start"/>
        <property name="scrollAmount" type="unsigned long"/>
        <property name="scrollDelay" type="unsigned long"/>
        <property name="trueSpeed" type="boolean"/>
        <property name="vspace" type="unsigned long"/>
        <property name="width" type="DOMString"/>
      </properties>
      <events>
        <event name="bounce" dispatch="sync" follows="start" precedes="finish" tags="IEOnly" type="Event"/>
        <event name="start" dispatch="sync" precedes="bounce finish" tags="IEOnly" type="Event"/>
        <event name="finish" dispatch="sync" follows="start bounce" tags="IEOnly" type="Event"/>
      </events>
      <element name="marquee" namespace="HTML"/>
    </interface>
    <interface name="HTMLMediaElement" extends="HTMLElement">
      <constants>
        <constant name="HAVE_CURRENT_DATA" type="unsigned short" value="2"/>
        <constant name="HAVE_ENOUGH_DATA" type="unsigned short" value="4"/>
        <constant name="HAVE_FUTURE_DATA" type="unsigned short" value="3"/>
        <constant name="HAVE_METADATA" type="unsigned short" value="1"/>
        <constant name="HAVE_NOTHING" type="unsigned short" value="0"/>
        <constant name="NETWORK_EMPTY" type="unsigned short" value="0"/>
        <constant name="NETWORK_IDLE" type="unsigned short" value="1"/>
        <constant name="NETWORK_LOADING" type="unsigned short" value="2"/>
        <constant name="NETWORK_NO_SOURCE" type="unsigned short" value="3"/>
      </constants>
      <methods>
        <method name="addTextTrack" type="TextTrack">
          <param name="kind" type="TextTrackKind"/>
          <param name="label" default="&quot;&quot;" optional="1" type="DOMString"/>
          <param name="language" default="&quot;&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="canPlayType" type="CanPlayTypeResult">
          <param name="type" type="DOMString"/>
        </method>
        <method name="fastSeek" type="void">
          <param name="time" type="double"/>
        </method>
        <method name="getStartDate" type="object"/>
        <method name="load" type="void"/>
        <method name="pause" type="void"/>
        <method name="play" type="Promise&lt;void&gt;"/>
        <method name="setMediaKeys" type="Promise&lt;void&gt;">
          <param name="mediaKeys" nullable="1" type="MediaKeys"/>
        </method>
      </methods>
      <properties>
        <property name="audioTracks" read-only="1" type="AudioTrackList"/>
        <property name="autoplay" type="boolean"/>
        <property name="buffered" read-only="1" type="TimeRanges"/>
        <property name="controls" type="boolean"/>
        <property name="crossOrigin" nullable="1" type="DOMString"/>
        <property name="currentSrc" read-only="1" type="USVString"/>
        <property name="currentTime" type="double"/>
        <property name="defaultMuted" type="boolean"/>
        <property name="defaultPlaybackRate" type="double"/>
        <property name="duration" read-only="1" type="unrestricted double"/>
        <property name="ended" read-only="1" type="boolean"/>
        <property name="error" read-only="1" nullable="1" type="MediaError"/>
        <property name="loop" type="boolean"/>
        <property name="mediaKeys" read-only="1" nullable="1" type="MediaKeys"/>
        <property name="muted" type="boolean"/>
        <property name="networkState" read-only="1" type="unsigned short"/>
        <property name="onencrypted" type="EventHandler" event-handler="encrypted"/>
        <property name="onwaitingforkey" type="EventHandler" event-handler="waitingforkey"/>
        <property name="paused" read-only="1" type="boolean"/>
        <property name="playbackRate" type="double"/>
        <property name="played" read-only="1" type="TimeRanges"/>
        <property name="preload" type="DOMString"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
        <property name="seekable" read-only="1" type="TimeRanges"/>
        <property name="seeking" read-only="1" type="boolean"/>
        <property name="src" type="USVString"/>
        <property name="srcObject" nullable="1" type="MediaProvider"/>
        <property name="textTracks" read-only="1" type="TextTrackList"/>
        <property name="videoTracks" read-only="1" type="VideoTrackList"/>
        <property name="volume" type="double"/>
      </properties>
      <events>
        <event name="encrypted" type="MediaEncryptedEvent"/>
        <event name="waitingforkey" type="Event"/>
        <event name="loadstart" dispatch="sync" precedes="progress" type="Event"/>
        <event name="progress" dispatch="sync" follows="loadstart" precedes="loadedmetadata" type="Event"/>
        <event name="suspend" dispatch="sync" type="Event"/>
        <event name="abort" dispatch="sync" type="Event"/>
        <event name="error" dispatch="sync" type="Event"/>
        <event name="emptied" dispatch="sync" type="Event"/>
        <event name="stalled" dispatch="sync" follows="playing" type="Event"/>
        <event name="play" dispatch="sync" follows="pause" type="Event"/>
        <event name="pause" dispatch="sync" precedes="play" type="Event"/>
        <event name="loadedmetadata" dispatch="sync" follows="loadstart" precedes="loadeddata waiting seeking" type="Event"/>
        <event name="loadeddata" dispatch="sync" follows="loadedmetadata" precedes="canplay" type="Event"/>
        <event name="waiting" dispatch="sync" type="Event"/>
        <event name="playing" dispatch="sync" follows="canplay" precedes="stalled" type="Event"/>
        <event name="canplay" dispatch="sync" follows="loadeddata" precedes="canplaythrough" type="Event"/>
        <event name="canplaythrough" dispatch="sync" follows="canplay" precedes="ended" type="Event"/>
        <event name="seeking" dispatch="sync" follows="loadedmetadata" precedes="seeked" type="Event"/>
        <event name="seeked" dispatch="sync" follows="seeking" type="Event"/>
        <event name="timeupdate" dispatch="sync" type="Event"/>
        <event name="ended" dispatch="sync" follows="canplaythrough" type="Event"/>
        <event name="ratechange" dispatch="sync" type="Event"/>
        <event name="durationchange" dispatch="sync" type="Event"/>
        <event name="volumechange" dispatch="sync" type="Event"/>
        <event name="encrypted" dispatch="sync" follows="loadedmetadata" type="MediaEncryptedEvent"/>
        <event name="waitingforkey" dispatch="sync" follows="playing" type="Event"/>
      </events>
    </interface>
    <interface name="HTMLMenuElement" extends="HTMLElement">
      <properties>
        <property name="compact" type="boolean"/>
        <property name="label" type="DOMString"/>
        <property name="type" type="DOMString"/>
      </properties>
      <element name="menu" namespace="HTML"/>
    </interface>
    <interface name="HTMLMenuItemElement" extends="HTMLElement">
      <properties>
        <property name="checked" type="boolean"/>
        <property name="default" type="boolean"/>
        <property name="disabled" type="boolean"/>
        <property name="icon" type="USVString"/>
        <property name="label" type="DOMString"/>
        <property name="radiogroup" type="DOMString"/>
        <property name="type" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLMetaElement" extends="HTMLElement">
      <properties>
        <property name="content" type="DOMString"/>
        <property name="httpEquiv" type="DOMString"/>
        <property name="name" type="DOMString"/>
        <property name="scheme" type="DOMString"/>
      </properties>
      <element name="meta" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLMeterElement" extends="HTMLElement">
      <properties>
        <property name="high" type="double"/>
        <property name="labels" read-only="1" type="NodeList"/>
        <property name="low" type="double"/>
        <property name="max" type="double"/>
        <property name="min" type="double"/>
        <property name="optimum" type="double"/>
        <property name="value" type="double"/>
      </properties>
      <element name="meter" namespace="HTML"/>
    </interface>
    <interface name="HTMLModElement" extends="HTMLElement">
      <properties>
        <property name="cite" type="USVString"/>
        <property name="dateTime" type="DOMString"/>
      </properties>
      <element name="ins" namespace="HTML"/>
      <element name="del" namespace="HTML"/>
    </interface>
    <interface name="HTMLObjectElement" extends="HTMLElement">
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="getSVGDocument" nullable="1" type="Document"/>
        <method name="reportValidity" type="boolean"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="align" type="DOMString"/>
        <property name="archive" type="DOMString"/>
        <property name="border" type="DOMString"/>
        <property name="code" type="DOMString"/>
        <property name="codeBase" type="DOMString"/>
        <property name="codeType" type="DOMString"/>
        <property name="contentDocument" read-only="1" nullable="1" type="Document"/>
        <property name="contentWindow" read-only="1" nullable="1" type="WindowProxy"/>
        <property name="data" type="USVString"/>
        <property name="declare" type="boolean"/>
        <property name="form" read-only="1" nullable="1" type="HTMLFormElement"/>
        <property name="height" type="DOMString"/>
        <property name="hspace" type="unsigned long"/>
        <property name="name" type="DOMString"/>
        <property name="standby" type="DOMString"/>
        <property name="type" type="DOMString"/>
        <property name="typeMustMatch" type="boolean"/>
        <property name="useMap" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="vspace" type="unsigned long"/>
        <property name="width" type="DOMString"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
      <events>
        <event name="load" dispatch="async" skips-window="1" type="Event"/>
        <event name="abort" dispatch="sync" type="UIEvent"/>
      </events>
      <element name="object" namespace="HTML"/>
    </interface>
    <interface name="HTMLOListElement" extends="HTMLElement">
      <properties>
        <property name="compact" type="boolean"/>
        <property name="reversed" type="boolean"/>
        <property name="start" type="long"/>
        <property name="type" type="DOMString"/>
      </properties>
      <element name="ol" namespace="HTML"/>
    </interface>
    <interface name="HTMLOptGroupElement" extends="HTMLElement">
      <properties>
        <property name="disabled" type="boolean"/>
        <property name="label" type="DOMString"/>
      </properties>
      <element name="optgroup" namespace="HTML"/>
    </interface>
    <interface name="HTMLOptionElement" extends="HTMLElement">
      <named-constructor name="Option">
        <param name="text" default="&quot;&quot;" optional="1" type="DOMString"/>
        <param name="value" optional="1" type="DOMString"/>
        <param name="defaultSelected" default="false" optional="1" type="boolean"/>
        <param name="selected" default="false" optional="1" type="boolean"/>
      </named-constructor>
      <properties>
        <property name="defaultSelected" type="boolean"/>
        <property name="disabled" type="boolean"/>
        <property name="form" read-only="1" nullable="1" type="HTMLFormElement"/>
        <property name="index" read-only="1" type="long"/>
        <property name="label" type="DOMString"/>
        <property name="selected" type="boolean"/>
        <property name="text" type="DOMString"/>
        <property name="value" type="DOMString"/>
      </properties>
      <element name="option" namespace="HTML"/>
    </interface>
    <interface name="HTMLOptionsCollection" extends="HTMLCollection">
      <anonymous-methods>
        <method setter="1" type="void">
          <param name="index" type="unsigned long"/>
          <param name="option" nullable="1" type="HTMLOptionElement"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="add" type="void">
          <param name="element" type="(HTMLOptionElement or HTMLOptGroupElement)"/>
          <param name="before" default="null" optional="1" nullable="1" type="(HTMLElement or long)"/>
        </method>
        <method name="remove" type="void">
          <param name="index" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="length" type="unsigned long"/>
        <property name="selectedIndex" type="long"/>
      </properties>
    </interface>
    <interface name="HTMLOutputElement" extends="HTMLElement">
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="reportValidity" type="boolean"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="defaultValue" type="DOMString"/>
        <property name="form" read-only="1" nullable="1" type="HTMLFormElement"/>
        <property name="htmlFor" read-only="1" type="DOMTokenList"/>
        <property name="labels" read-only="1" type="NodeList"/>
        <property name="name" type="DOMString"/>
        <property name="type" read-only="1" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="value" type="DOMString"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
      <element name="output" namespace="HTML"/>
    </interface>
    <interface name="HTMLParagraphElement" extends="HTMLElement">
      <properties>
        <property name="align" type="DOMString"/>
      </properties>
      <element name="p" namespace="HTML"/>
    </interface>
    <interface name="HTMLParamElement" extends="HTMLElement">
      <properties>
        <property name="name" type="DOMString"/>
        <property name="type" type="DOMString"/>
        <property name="value" type="DOMString"/>
        <property name="valueType" type="DOMString"/>
      </properties>
      <element name="param" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLPictureElement" extends="HTMLElement">
      <element name="picture" namespace="HTML"/>
    </interface>
    <interface name="HTMLPreElement" extends="HTMLElement">
      <properties>
        <property name="width" type="long"/>
      </properties>
      <element name="pre" namespace="HTML"/>
      <element name="listing" namespace="HTML"/>
      <element name="xmp" namespace="HTML"/>
    </interface>
    <interface name="HTMLProgressElement" extends="HTMLElement">
      <properties>
        <property name="labels" read-only="1" type="NodeList"/>
        <property name="max" type="double"/>
        <property name="position" read-only="1" type="double"/>
        <property name="value" type="double"/>
      </properties>
      <element name="progress" namespace="HTML"/>
    </interface>
    <interface name="HTMLQuoteElement" extends="HTMLElement">
      <properties>
        <property name="cite" type="USVString"/>
      </properties>
      <element name="q" namespace="HTML"/>
      <element name="blockquote" namespace="HTML"/>
    </interface>
    <interface name="HTMLScriptElement" extends="HTMLElement">
      <properties>
        <property name="async" type="boolean"/>
        <property name="charset" type="DOMString"/>
        <property name="crossOrigin" nullable="1" type="DOMString"/>
        <property name="defer" type="boolean"/>
        <property name="event" type="DOMString"/>
        <property name="htmlFor" type="DOMString"/>
        <property name="integrity" type="DOMString"/>
        <property name="noModule" type="boolean"/>
        <property name="nonce" type="DOMString"/>
        <property name="src" type="USVString"/>
        <property name="text" type="DOMString"/>
        <property name="type" type="DOMString"/>
      </properties>
      <events>
        <event name="error" dispatch="sync" type="Event"/>
        <event name="load" dispatch="async" skips-window="1" type="Event"/>
      </events>
      <element name="script" namespace="HTML"/>
    </interface>
    <interface name="HTMLSelectElement" extends="HTMLElement">
      <anonymous-methods>
        <method setter="1" type="void">
          <param name="index" type="unsigned long"/>
          <param name="option" nullable="1" type="HTMLOptionElement"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="add" type="void">
          <param name="element" type="(HTMLOptionElement or HTMLOptGroupElement)"/>
          <param name="before" default="null" optional="1" nullable="1" type="(HTMLElement or long)"/>
        </method>
        <method name="checkValidity" type="boolean"/>
        <method name="item" getter="1" nullable="1" type="Element">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="namedItem" nullable="1" type="HTMLOptionElement">
          <param name="name" type="DOMString"/>
        </method>
        <method name="remove" type="void"/>
        <method name="remove" type="void">
          <param name="index" type="long"/>
        </method>
        <method name="reportValidity" type="boolean"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="autocomplete" type="DOMString"/>
        <property name="autofocus" type="boolean"/>
        <property name="disabled" type="boolean"/>
        <property name="form" read-only="1" nullable="1" type="HTMLFormElement"/>
        <property name="labels" read-only="1" type="NodeList"/>
        <property name="length" type="unsigned long"/>
        <property name="multiple" type="boolean"/>
        <property name="name" type="DOMString"/>
        <property name="options" read-only="1" type="HTMLOptionsCollection"/>
        <property name="required" type="boolean"/>
        <property name="selectedIndex" type="long"/>
        <property name="selectedOptions" read-only="1" type="HTMLCollection"/>
        <property name="size" type="unsigned long"/>
        <property name="type" read-only="1" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="value" type="DOMString"/>
        <property name="willValidate" read-only="1" type="boolean"/>
      </properties>
      <events>
        <event name="change" bubbles="1" dispatch="sync" type="Event"/>
        <event name="invalid" cancelable="1" dispatch="sync" type="Event"/>
      </events>
      <element name="select" namespace="HTML"/>
    </interface>
    <interface name="HTMLSlotElement" extends="HTMLElement">
      <methods>
        <method name="assignedNodes" type="sequence&lt;Node&gt;">
          <param name="options" optional="1" type="AssignedNodesOptions"/>
        </method>
      </methods>
      <properties>
        <property name="name" type="DOMString"/>
      </properties>
    </interface>
    <interface name="HTMLSourceElement" extends="HTMLElement">
      <properties>
        <property name="media" type="DOMString"/>
        <property name="sizes" type="DOMString"/>
        <property name="src" type="USVString"/>
        <property name="srcset" type="USVString"/>
        <property name="type" type="DOMString"/>
      </properties>
      <element name="source" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLSpanElement" extends="HTMLElement">
      <element name="span" namespace="HTML"/>
    </interface>
    <interface name="HTMLStyleElement" extends="HTMLElement">
      <properties>
        <property name="media" type="DOMString"/>
        <property name="nonce" type="DOMString"/>
        <property name="type" type="DOMString"/>
      </properties>
      <implements>LinkStyle</implements>
      <events>
        <event name="error" dispatch="async" type="Event"/>
        <event name="load" dispatch="async" follows="readystatechange" skips-window="1" type="Event"/>
        <event name="readystatechange" dispatch="async" precedes="load" tags="IEOnly" type="Event"/>
      </events>
      <element name="style" namespace="HTML"/>
    </interface>
    <interface name="HTMLTableCaptionElement" extends="HTMLElement">
      <properties>
        <property name="align" type="DOMString"/>
      </properties>
      <element name="caption" namespace="HTML"/>
    </interface>
    <interface name="HTMLTableCellElement" extends="HTMLElement">
      <properties>
        <property name="abbr" type="DOMString"/>
        <property name="align" type="DOMString"/>
        <property name="axis" type="DOMString"/>
        <property name="bgColor" type="DOMString"/>
        <property name="cellIndex" read-only="1" type="long"/>
        <property name="ch" type="DOMString"/>
        <property name="chOff" type="DOMString"/>
        <property name="colSpan" type="unsigned long"/>
        <property name="headers" type="DOMString"/>
        <property name="height" type="DOMString"/>
        <property name="noWrap" type="boolean"/>
        <property name="rowSpan" type="unsigned long"/>
        <property name="scope" type="DOMString"/>
        <property name="vAlign" type="DOMString"/>
        <property name="width" type="DOMString"/>
      </properties>
      <element name="td"/>
      <element name="th"/>
    </interface>
    <interface name="HTMLTableColElement" extends="HTMLElement">
      <properties>
        <property name="align" type="DOMString"/>
        <property name="ch" type="DOMString"/>
        <property name="chOff" type="DOMString"/>
        <property name="span" type="unsigned long"/>
        <property name="vAlign" type="DOMString"/>
        <property name="width" type="DOMString"/>
      </properties>
      <element name="col" html-self-closing="1" namespace="HTML"/>
      <element name="colgroup" namespace="HTML"/>
    </interface>
    <interface name="HTMLTableElement" extends="HTMLElement">
      <methods>
        <method name="createCaption" type="HTMLTableCaptionElement"/>
        <method name="createTBody" type="HTMLTableSectionElement"/>
        <method name="createTFoot" type="HTMLTableSectionElement"/>
        <method name="createTHead" type="HTMLTableSectionElement"/>
        <method name="deleteCaption" type="void"/>
        <method name="deleteRow" type="void">
          <param name="index" type="long"/>
        </method>
        <method name="deleteTFoot" type="void"/>
        <method name="deleteTHead" type="void"/>
        <method name="insertRow" type="HTMLTableRowElement">
          <param name="index" default="-1" optional="1" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="align" type="DOMString"/>
        <property name="bgColor" type="DOMString"/>
        <property name="border" type="DOMString"/>
        <property name="caption" nullable="1" type="HTMLTableCaptionElement"/>
        <property name="cellPadding" type="DOMString"/>
        <property name="cellSpacing" type="DOMString"/>
        <property name="frame" type="DOMString"/>
        <property name="rows" read-only="1" type="HTMLCollection"/>
        <property name="rules" type="DOMString"/>
        <property name="summary" type="DOMString"/>
        <property name="tBodies" read-only="1" type="HTMLCollection"/>
        <property name="tFoot" nullable="1" type="HTMLTableSectionElement"/>
        <property name="tHead" nullable="1" type="HTMLTableSectionElement"/>
        <property name="width" type="DOMString"/>
      </properties>
      <element name="table" namespace="HTML"/>
    </interface>
    <interface name="HTMLTableRowElement" extends="HTMLElement">
      <methods>
        <method name="deleteCell" type="void">
          <param name="index" type="long"/>
        </method>
        <method name="insertCell" type="HTMLTableCellElement">
          <param name="index" default="-1" optional="1" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="align" type="DOMString"/>
        <property name="bgColor" type="DOMString"/>
        <property name="cells" read-only="1" type="HTMLCollection"/>
        <property name="ch" type="DOMString"/>
        <property name="chOff" type="DOMString"/>
        <property name="rowIndex" read-only="1" type="long"/>
        <property name="sectionRowIndex" read-only="1" type="long"/>
        <property name="vAlign" type="DOMString"/>
      </properties>
      <element name="tr" namespace="HTML"/>
    </interface>
    <interface name="HTMLTableSectionElement" extends="HTMLElement">
      <methods>
        <method name="deleteRow" type="void">
          <param name="index" type="long"/>
        </method>
        <method name="insertRow" type="HTMLElement">
          <param name="index" default="-1" optional="1" type="long"/>
        </method>
      </methods>
      <properties>
        <property name="align" type="DOMString"/>
        <property name="ch" type="DOMString"/>
        <property name="chOff" type="DOMString"/>
        <property name="rows" read-only="1" type="HTMLCollection"/>
        <property name="vAlign" type="DOMString"/>
      </properties>
      <element name="thead" namespace="HTML"/>
      <element name="tbody" namespace="HTML"/>
      <element name="tfoot" namespace="HTML"/>
    </interface>
    <interface name="HTMLTemplateElement" extends="HTMLElement">
      <properties>
        <property name="content" read-only="1" type="DocumentFragment"/>
      </properties>
      <element name="template" namespace="HTML"/>
    </interface>
    <interface name="HTMLTextAreaElement" extends="HTMLElement">
      <methods>
        <method name="checkValidity" type="boolean"/>
        <method name="reportValidity" type="boolean"/>
        <method name="select" type="void"/>
        <method name="setCustomValidity" type="void">
          <param name="error" type="DOMString"/>
        </method>
        <method name="setRangeText" type="void">
          <param name="replacement" type="DOMString"/>
        </method>
        <method name="setRangeText" type="void">
          <param name="replacement" type="DOMString"/>
          <param name="start" type="unsigned long"/>
          <param name="end" type="unsigned long"/>
          <param name="selectionMode" default="&quot;preserve&quot;" optional="1" type="SelectionMode"/>
        </method>
        <method name="setSelectionRange" type="void">
          <param name="start" type="unsigned long"/>
          <param name="end" type="unsigned long"/>
          <param name="direction" optional="1" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="autocomplete" type="DOMString"/>
        <property name="autofocus" type="boolean"/>
        <property name="cols" type="unsigned long"/>
        <property name="defaultValue" type="DOMString"/>
        <property name="dirName" type="DOMString"/>
        <property name="disabled" type="boolean"/>
        <property name="form" read-only="1" nullable="1" type="HTMLFormElement"/>
        <property name="inputMode" type="DOMString"/>
        <property name="labels" read-only="1" type="NodeList"/>
        <property name="maxLength" type="long"/>
        <property name="minLength" type="long"/>
        <property name="name" type="DOMString"/>
        <property name="placeholder" type="DOMString"/>
        <property name="readOnly" type="boolean"/>
        <property name="required" type="boolean"/>
        <property name="rows" type="unsigned long"/>
        <property name="selectionDirection" type="DOMString"/>
        <property name="selectionEnd" type="unsigned long"/>
        <property name="selectionStart" type="unsigned long"/>
        <property name="textLength" read-only="1" type="unsigned long"/>
        <property name="type" read-only="1" type="DOMString"/>
        <property name="validationMessage" read-only="1" type="DOMString"/>
        <property name="validity" read-only="1" type="ValidityState"/>
        <property name="value" type="DOMString"/>
        <property name="willValidate" read-only="1" type="boolean"/>
        <property name="wrap" type="DOMString"/>
      </properties>
      <events>
        <event name="change" bubbles="1" dispatch="sync" type="Event"/>
        <event name="input" bubbles="1" dispatch="async" type="Event"/>
        <event name="invalid" cancelable="1" dispatch="sync" type="Event"/>
      </events>
      <element name="textarea" namespace="HTML"/>
    </interface>
    <interface name="HTMLTimeElement" extends="HTMLElement">
      <properties>
        <property name="dateTime" type="DOMString"/>
      </properties>
      <element name="time" namespace="HTML"/>
    </interface>
    <interface name="HTMLTitleElement" extends="HTMLElement">
      <properties>
        <property name="text" type="DOMString"/>
      </properties>
      <element name="title" namespace="HTML"/>
    </interface>
    <interface name="HTMLTrackElement" extends="HTMLElement">
      <constants>
        <constant name="ERROR" type="unsigned short" value="3"/>
        <constant name="LOADED" type="unsigned short" value="2"/>
        <constant name="LOADING" type="unsigned short" value="1"/>
        <constant name="NONE" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="default" type="boolean"/>
        <property name="kind" type="DOMString"/>
        <property name="label" type="DOMString"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
        <property name="src" type="USVString"/>
        <property name="srclang" type="DOMString"/>
        <property name="track" read-only="1" type="TextTrack"/>
      </properties>
      <events>
        <event name="cuechange" dispatch="sync" type="Event"/>
      </events>
      <element name="track" html-self-closing="1" namespace="HTML"/>
    </interface>
    <interface name="HTMLUListElement" extends="HTMLElement">
      <properties>
        <property name="compact" type="boolean"/>
        <property name="type" type="DOMString"/>
      </properties>
      <element name="ul" namespace="HTML"/>
    </interface>
    <interface name="HTMLUnknownElement" extends="HTMLElement">
      <element name="isindex" namespace="HTML"/>
      <element name="nextid" namespace="HTML"/>
    </interface>
    <interface name="HTMLVideoElement" extends="HTMLMediaElement">
      <properties>
        <property name="height" type="unsigned long"/>
        <property name="playsInline" type="boolean"/>
        <property name="poster" type="USVString"/>
        <property name="videoHeight" read-only="1" type="unsigned long"/>
        <property name="videoWidth" read-only="1" type="unsigned long"/>
        <property name="width" type="unsigned long"/>
      </properties>
      <methods>
        <method name="getVideoPlaybackQuality" type="VideoPlaybackQuality"/>
      </methods>
      <events>
        <event name="resize" dispatch="async" type="Event"/>
      </events>
      <element name="video" namespace="HTML"/>
    </interface>
    <interface name="IDBCursor" extends="Object" exposed="Window Worker">
      <methods>
        <method name="advance" type="void">
          <param name="count" type="unsigned long"/>
        </method>
        <method name="continue" type="void">
          <param name="key" optional="1" type="any"/>
        </method>
        <method name="continuePrimaryKey" type="void">
          <param name="key" type="any"/>
          <param name="primaryKey" type="any"/>
        </method>
        <method name="delete" type="IDBRequest"/>
        <method name="update" type="IDBRequest">
          <param name="value" type="any"/>
        </method>
      </methods>
      <properties>
        <property name="direction" read-only="1" type="IDBCursorDirection"/>
        <property name="key" read-only="1" type="any"/>
        <property name="primaryKey" read-only="1" type="any"/>
        <property name="source" read-only="1" type="(IDBObjectStore or IDBIndex)"/>
      </properties>
    </interface>
    <interface name="IDBCursorWithValue" extends="IDBCursor" exposed="Window Worker">
      <properties>
        <property name="value" read-only="1" type="any"/>
      </properties>
    </interface>
    <interface name="IDBDatabase" extends="EventTarget" exposed="Window Worker">
      <methods>
        <method name="close" type="void"/>
        <method name="createObjectStore" type="IDBObjectStore">
          <param name="name" type="DOMString"/>
          <param name="options" optional="1" type="IDBObjectStoreParameters"/>
        </method>
        <method name="deleteObjectStore" type="void">
          <param name="name" type="DOMString"/>
        </method>
        <method name="transaction" type="IDBTransaction">
          <param name="storeNames" type="(DOMString or sequence&lt;DOMString&gt;)"/>
          <param name="mode" default="&quot;readonly&quot;" optional="1" type="IDBTransactionMode"/>
        </method>
      </methods>
      <properties>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="objectStoreNames" read-only="1" type="DOMStringList"/>
        <property name="onabort" type="EventHandler" event-handler="abort"/>
        <property name="onclose" type="EventHandler" event-handler="close"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="onversionchange" type="EventHandler" event-handler="versionchange"/>
        <property name="version" read-only="1" type="unsigned long long"/>
      </properties>
      <events>
        <event name="abort" type="Event"/>
        <event name="close" type="Event"/>
        <event name="error" type="Event"/>
        <event name="versionchange" type="IDBVersionChangeEvent"/>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="abort" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="IDBFactory" extends="Object" exposed="Window Worker">
      <methods>
        <method name="cmp" type="short">
          <param name="first" type="any"/>
          <param name="second" type="any"/>
        </method>
        <method name="deleteDatabase" type="IDBOpenDBRequest">
          <param name="name" type="DOMString"/>
        </method>
        <method name="open" type="IDBOpenDBRequest">
          <param name="name" type="DOMString"/>
          <param name="version" optional="1" type="unsigned long long"/>
        </method>
      </methods>
    </interface>
    <interface name="IDBIndex" extends="Object" exposed="Window Worker">
      <methods>
        <method name="count" type="IDBRequest">
          <param name="query" optional="1" type="any"/>
        </method>
        <method name="get" type="IDBRequest">
          <param name="query" type="any"/>
        </method>
        <method name="getAll" type="IDBRequest">
          <param name="query" optional="1" type="any"/>
          <param name="count" optional="1" type="unsigned long"/>
        </method>
        <method name="getAllKeys" type="IDBRequest">
          <param name="query" optional="1" type="any"/>
          <param name="count" optional="1" type="unsigned long"/>
        </method>
        <method name="getKey" type="IDBRequest">
          <param name="query" type="any"/>
        </method>
        <method name="openCursor" type="IDBRequest">
          <param name="query" optional="1" type="any"/>
          <param name="direction" default="&quot;next&quot;" optional="1" type="IDBCursorDirection"/>
        </method>
        <method name="openKeyCursor" type="IDBRequest">
          <param name="query" optional="1" type="any"/>
          <param name="direction" default="&quot;next&quot;" optional="1" type="IDBCursorDirection"/>
        </method>
      </methods>
      <properties>
        <property name="keyPath" read-only="1" type="any"/>
        <property name="multiEntry" read-only="1" type="boolean"/>
        <property name="name" type="DOMString"/>
        <property name="objectStore" read-only="1" type="IDBObjectStore"/>
        <property name="unique" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="IDBKeyRange" extends="Object" exposed="Window Worker">
      <methods>
        <method name="bound" static="1" type="IDBKeyRange">
          <param name="lower" type="any"/>
          <param name="upper" type="any"/>
          <param name="lowerOpen" default="false" optional="1" type="boolean"/>
          <param name="upperOpen" default="false" optional="1" type="boolean"/>
        </method>
        <method name="includes" type="boolean">
          <param name="key" type="any"/>
        </method>
        <method name="lowerBound" static="1" type="IDBKeyRange">
          <param name="lower" type="any"/>
          <param name="open" default="false" optional="1" type="boolean"/>
        </method>
        <method name="only" static="1" type="IDBKeyRange">
          <param name="value" type="any"/>
        </method>
        <method name="upperBound" static="1" type="IDBKeyRange">
          <param name="upper" type="any"/>
          <param name="open" default="false" optional="1" type="boolean"/>
        </method>
      </methods>
      <properties>
        <property name="lower" read-only="1" type="any"/>
        <property name="lowerOpen" read-only="1" type="boolean"/>
        <property name="upper" read-only="1" type="any"/>
        <property name="upperOpen" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="IDBObjectStore" extends="Object" exposed="Window Worker">
      <methods>
        <method name="add" type="IDBRequest">
          <param name="value" type="any"/>
          <param name="key" optional="1" type="any"/>
        </method>
        <method name="clear" type="IDBRequest"/>
        <method name="count" type="IDBRequest">
          <param name="query" optional="1" type="any"/>
        </method>
        <method name="createIndex" type="IDBIndex">
          <param name="name" type="DOMString"/>
          <param name="keyPath" type="(DOMString or sequence&lt;DOMString&gt;)"/>
          <param name="options" optional="1" type="IDBIndexParameters"/>
        </method>
        <method name="delete" type="IDBRequest">
          <param name="query" type="any"/>
        </method>
        <method name="deleteIndex" type="void">
          <param name="name" type="DOMString"/>
        </method>
        <method name="get" type="IDBRequest">
          <param name="query" type="any"/>
        </method>
        <method name="getAll" type="IDBRequest">
          <param name="query" optional="1" type="any"/>
          <param name="count" optional="1" type="unsigned long"/>
        </method>
        <method name="getAllKeys" type="IDBRequest">
          <param name="query" optional="1" type="any"/>
          <param name="count" optional="1" type="unsigned long"/>
        </method>
        <method name="getKey" type="IDBRequest">
          <param name="query" type="any"/>
        </method>
        <method name="index" type="IDBIndex">
          <param name="name" type="DOMString"/>
        </method>
        <method name="openCursor" type="IDBRequest">
          <param name="query" optional="1" type="any"/>
          <param name="direction" default="&quot;next&quot;" optional="1" type="IDBCursorDirection"/>
        </method>
        <method name="openKeyCursor" type="IDBRequest">
          <param name="query" optional="1" type="any"/>
          <param name="direction" default="&quot;next&quot;" optional="1" type="IDBCursorDirection"/>
        </method>
        <method name="put" type="IDBRequest">
          <param name="value" type="any"/>
          <param name="key" optional="1" type="any"/>
        </method>
      </methods>
      <properties>
        <property name="autoIncrement" read-only="1" type="boolean"/>
        <property name="indexNames" read-only="1" type="DOMStringList"/>
        <property name="keyPath" read-only="1" type="any"/>
        <property name="name" type="DOMString"/>
        <property name="transaction" read-only="1" type="IDBTransaction"/>
      </properties>
    </interface>
    <interface name="IDBOpenDBRequest" extends="IDBRequest" exposed="Window Worker">
      <properties>
        <property name="onblocked" type="EventHandler" event-handler="blocked"/>
        <property name="onupgradeneeded" type="EventHandler" event-handler="upgradeneeded"/>
      </properties>
      <events>
        <event name="blocked" dispatch="sync" skips-window="1" type="Event"/>
        <event name="upgradeneeded" dispatch="sync" skips-window="1" type="IDBVersionChangeEvent"/>
      </events>
    </interface>
    <interface name="IDBRequest" extends="EventTarget" exposed="Window Worker">
      <properties>
        <property name="error" read-only="1" nullable="1" type="DOMException"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="onsuccess" type="EventHandler" event-handler="success"/>
        <property name="readyState" read-only="1" type="IDBRequestReadyState"/>
        <property name="result" read-only="1" type="any"/>
        <property name="source" read-only="1" nullable="1" type="(IDBObjectStore or IDBIndex or IDBCursor)"/>
        <property name="transaction" read-only="1" nullable="1" type="IDBTransaction"/>
      </properties>
      <events>
        <event name="error" bubbles="1" dispatch="sync" skips-window="1" type="Event"/>
        <event name="success" bubbles="1" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="IDBTransaction" extends="EventTarget" exposed="Window Worker">
      <methods>
        <method name="abort" type="void"/>
        <method name="objectStore" type="IDBObjectStore">
          <param name="name" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="db" read-only="1" type="IDBDatabase"/>
        <property name="error" read-only="1" type="DOMException"/>
        <property name="mode" read-only="1" type="IDBTransactionMode"/>
        <property name="objectStoreNames" read-only="1" type="DOMStringList"/>
        <property name="onabort" type="EventHandler" event-handler="abort"/>
        <property name="oncomplete" type="EventHandler" event-handler="complete"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
      </properties>
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="abort" dispatch="sync" skips-window="1" type="Event"/>
        <event name="complete" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="IDBVersionChangeEvent" extends="Event" exposed="Window Worker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="IDBVersionChangeEventInit"/>
      </constructor>
      <properties>
        <property name="newVersion" read-only="1" nullable="1" type="unsigned long long"/>
        <property name="oldVersion" read-only="1" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="IIRFilterNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" type="IIRFilterOptions"/>
      </constructor>
      <methods>
        <method name="getFrequencyResponse" type="void">
          <param name="frequencyHz" type="Float32Array"/>
          <param name="magResponse" type="Float32Array"/>
          <param name="phaseResponse" type="Float32Array"/>
        </method>
      </methods>
    </interface>
    <interface name="ImageBitmap" extends="Object" exposed="Window Worker">
      <methods>
        <method name="close" type="void"/>
      </methods>
      <properties>
        <property name="height" read-only="1" type="unsigned long"/>
        <property name="width" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="ImageBitmapRenderingContext" extends="Object">
      <methods>
        <method name="transferFromImageBitmap" type="void">
          <param name="bitmap" nullable="1" type="ImageBitmap"/>
        </method>
      </methods>
      <properties>
        <property name="canvas" read-only="1" type="HTMLCanvasElement"/>
      </properties>
    </interface>
    <interface name="ImageData" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="sw" type="unsigned long"/>
        <param name="sh" type="unsigned long"/>
      </constructor>
      <constructor>
        <param name="data" type="Uint8ClampedArray"/>
        <param name="sw" type="unsigned long"/>
        <param name="sh" optional="1" type="unsigned long"/>
      </constructor>
      <properties>
        <property name="data" read-only="1" type="Uint8ClampedArray"/>
        <property name="height" read-only="1" type="unsigned long"/>
        <property name="width" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="InputDeviceInfo" extends="MediaDeviceInfo">
      <methods>
        <method name="getCapabilities" type="MediaTrackCapabilities"/>
      </methods>
    </interface>
    <interface name="InputEvent" extends="UIEvent">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="InputEventInit"/>
      </constructor>
      <properties>
        <property name="data" read-only="1" nullable="1" type="DOMString"/>
        <property name="isComposing" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="InstallEvent" extends="ExtendableEvent" exposed="ServiceWorker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="ExtendableEventInit"/>
      </constructor>
      <methods>
        <method name="registerForeignFetch" type="void">
          <param name="options" type="ForeignFetchOptions"/>
        </method>
      </methods>
    </interface>
    <interface name="IntersectionObserver" extends="Object" exposed="Window">
      <constructor>
        <param name="callback" type="IntersectionObserverCallback"/>
        <param name="options" optional="1" type="IntersectionObserverInit"/>
      </constructor>
      <methods>
        <method name="disconnect" type="void"/>
        <method name="observe" type="void">
          <param name="target" type="Element"/>
        </method>
        <method name="takeRecords" type="sequence&lt;IntersectionObserverEntry&gt;"/>
        <method name="unobserve" type="void">
          <param name="target" type="Element"/>
        </method>
      </methods>
      <properties>
        <property name="root" read-only="1" nullable="1" type="Element"/>
        <property name="rootMargin" read-only="1" type="DOMString"/>
        <property name="thresholds" read-only="1" type="FrozenArray&lt;double&gt;"/>
      </properties>
    </interface>
    <interface name="IntersectionObserverEntry" extends="Object">
      <constructor>
        <param name="intersectionObserverEntryInit" type="IntersectionObserverEntryInit"/>
      </constructor>
      <properties>
        <property name="boundingClientRect" read-only="1" type="DOMRectReadOnly"/>
        <property name="intersectionRatio" read-only="1" type="double"/>
        <property name="intersectionRect" read-only="1" type="DOMRectReadOnly"/>
        <property name="isIntersecting" read-only="1" type="boolean"/>
        <property name="rootBounds" read-only="1" type="DOMRectReadOnly"/>
        <property name="target" read-only="1" type="Element"/>
        <property name="time" read-only="1" type="DOMHighResTimeStamp"/>
      </properties>
    </interface>
    <interface name="KeyboardEvent" extends="UIEvent">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="KeyboardEventInit"/>
      </constructor>
      <constants>
        <constant name="DOM_KEY_LOCATION_LEFT" type="unsigned long" value="1"/>
        <constant name="DOM_KEY_LOCATION_NUMPAD" type="unsigned long" value="3"/>
        <constant name="DOM_KEY_LOCATION_RIGHT" type="unsigned long" value="2"/>
        <constant name="DOM_KEY_LOCATION_STANDARD" type="unsigned long" value="0"/>
      </constants>
      <methods>
        <method name="getModifierState" type="boolean">
          <param name="keyArg" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="altKey" read-only="1" type="boolean"/>
        <property name="code" read-only="1" type="DOMString"/>
        <property name="ctrlKey" read-only="1" type="boolean"/>
        <property name="isComposing" read-only="1" type="boolean"/>
        <property name="key" read-only="1" type="DOMString"/>
        <property name="location" read-only="1" type="unsigned long"/>
        <property name="metaKey" read-only="1" type="boolean"/>
        <property name="repeat" read-only="1" type="boolean"/>
        <property name="shiftKey" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="Location" extends="Object">
      <methods>
        <method name="assign" type="void">
          <param name="url" type="USVString"/>
        </method>
        <method name="reload" type="void"/>
        <method name="replace" type="void">
          <param name="url" type="USVString"/>
        </method>
      </methods>
      <properties>
        <property name="ancestorOrigins" read-only="1" type="DOMStringList"/>
        <property name="hash" type="USVString"/>
        <property name="host" type="USVString"/>
        <property name="hostname" type="USVString"/>
        <property name="href" stringifier="1" type="USVString"/>
        <property name="origin" read-only="1" type="USVString"/>
        <property name="pathname" type="USVString"/>
        <property name="port" type="USVString"/>
        <property name="protocol" type="USVString"/>
        <property name="search" type="USVString"/>
      </properties>
    </interface>
    <interface name="MediaDeviceInfo" extends="Object" exposed="Window">
      <properties>
        <property name="deviceId" read-only="1" type="DOMString"/>
        <property name="groupId" read-only="1" type="DOMString"/>
        <property name="kind" read-only="1" type="MediaDeviceKind"/>
        <property name="label" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaDevices" extends="EventTarget" exposed="Window">
      <methods>
        <method name="enumerateDevices" type="Promise&lt;sequence&lt;MediaDeviceInfo&gt;&gt;"/>
        <method name="getSupportedConstraints" type="MediaTrackSupportedConstraints"/>
        <method name="getUserMedia" type="Promise&lt;MediaStream&gt;">
          <param name="constraints" optional="1" type="MediaStreamConstraints"/>
        </method>
      </methods>
      <properties>
        <property name="ondevicechange" type="EventHandler" event-handler="devicechange"/>
      </properties>
      <events>
        <event name="devicechange" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="MediaElementAudioSourceNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" type="MediaElementAudioSourceOptions"/>
      </constructor>
    </interface>
    <interface name="MediaEncryptedEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="MediaEncryptedEventInit"/>
      </constructor>
      <properties>
        <property name="initData" read-only="1" nullable="1" type="ArrayBuffer"/>
        <property name="initDataType" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaError" extends="Object">
      <constants>
        <constant name="MEDIA_ERR_ABORTED" type="unsigned short" value="1"/>
        <constant name="MEDIA_ERR_DECODE" type="unsigned short" value="3"/>
        <constant name="MEDIA_ERR_NETWORK" type="unsigned short" value="2"/>
        <constant name="MEDIA_ERR_SRC_NOT_SUPPORTED" type="unsigned short" value="4"/>
      </constants>
      <properties>
        <property name="code" read-only="1" type="unsigned short"/>
        <property name="message" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaKeyMessageEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="MediaKeyMessageEventInit"/>
      </constructor>
      <properties>
        <property name="message" read-only="1" type="ArrayBuffer"/>
        <property name="messageType" read-only="1" type="MediaKeyMessageType"/>
      </properties>
    </interface>
    <interface name="MediaKeys" extends="Object">
      <methods>
        <method name="createSession" type="MediaKeySession">
          <param name="sessionType" default="&quot;temporary&quot;" optional="1" type="MediaKeySessionType"/>
        </method>
        <method name="setServerCertificate" type="Promise&lt;boolean&gt;">
          <param name="serverCertificate" type="BufferSource"/>
        </method>
      </methods>
    </interface>
    <interface name="MediaKeySession" extends="EventTarget">
      <methods>
        <method name="close" type="Promise&lt;void&gt;"/>
        <method name="generateRequest" type="Promise&lt;void&gt;">
          <param name="initDataType" type="DOMString"/>
          <param name="initData" type="BufferSource"/>
        </method>
        <method name="load" type="Promise&lt;boolean&gt;">
          <param name="sessionId" type="DOMString"/>
        </method>
        <method name="remove" type="Promise&lt;void&gt;"/>
        <method name="update" type="Promise&lt;void&gt;">
          <param name="response" type="BufferSource"/>
        </method>
      </methods>
      <properties>
        <property name="closed" read-only="1" type="Promise&lt;void&gt;"/>
        <property name="expiration" read-only="1" type="unrestricted double"/>
        <property name="keyStatuses" read-only="1" type="MediaKeyStatusMap"/>
        <property name="onkeystatuseschange" type="EventHandler" event-handler="keystatuseschange"/>
        <property name="onmessage" type="EventHandler" event-handler="message"/>
        <property name="sessionId" read-only="1" type="DOMString"/>
      </properties>
      <events>
        <event name="keystatuseschange" type="Event"/>
        <event name="message" type="MediaKeyMessageEvent"/>
        <event name="keystatuseschange" dispatch="sync" type="Event"/>
        <event name="message" dispatch="sync" type="MediaKeyMessageEvent"/>
      </events>
    </interface>
    <interface name="MediaKeyStatusMap" extends="Object">
      <methods>
        <method name="get" type="any">
          <param name="keyId" type="BufferSource"/>
        </method>
        <method name="has" type="boolean">
          <param name="keyId" type="BufferSource"/>
        </method>
      </methods>
      <properties>
        <property name="size" read-only="1" type="unsigned long"/>
      </properties>
      <sn:declarations>
        <sn:iterable keytype="MediaKeyStatus" type="MediaKeyStatus"/>
      </sn:declarations>
    </interface>
    <interface name="MediaKeySystemAccess" extends="Object">
      <methods>
        <method name="createMediaKeys" type="Promise&lt;MediaKeys&gt;"/>
        <method name="getConfiguration" type="MediaKeySystemConfiguration"/>
      </methods>
      <properties>
        <property name="keySystem" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaList" extends="Object">
      <methods>
        <method name="appendMedium" type="void">
          <param name="medium" type="CSSOMString"/>
        </method>
        <method name="deleteMedium" type="void">
          <param name="medium" type="CSSOMString"/>
        </method>
        <method name="item" getter="1" nullable="1" type="CSSOMString">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="mediaText" stringifier="1" type="CSSOMString"/>
      </properties>
    </interface>
    <interface name="MediaQueryList" extends="EventTarget">
      <methods>
        <method name="addListener" type="void">
          <param name="listener" nullable="1" type="EventListener"/>
        </method>
        <method name="removeListener" type="void">
          <param name="listener" nullable="1" type="EventListener"/>
        </method>
      </methods>
      <properties>
        <property name="matches" read-only="1" type="boolean"/>
        <property name="media" read-only="1" type="DOMString"/>
        <property name="onchange" type="EventHandler" event-handler="change"/>
      </properties>
      <events>
        <event name="change" type="Event"/>
      </events>
    </interface>
    <interface name="MediaQueryListEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="MediaQueryListEventInit"/>
      </constructor>
      <properties>
        <property name="matches" read-only="1" type="boolean"/>
        <property name="media" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MediaSource" extends="EventTarget">
      <constructor/>
      <methods>
        <method name="addSourceBuffer" type="SourceBuffer">
          <param name="type" type="DOMString"/>
        </method>
        <method name="clearLiveSeekableRange" type="void"/>
        <method name="endOfStream" type="void">
          <param name="error" optional="1" type="EndOfStreamError"/>
        </method>
        <method name="isTypeSupported" static="1" type="boolean">
          <param name="type" type="DOMString"/>
        </method>
        <method name="removeSourceBuffer" type="void">
          <param name="sourceBuffer" type="SourceBuffer"/>
        </method>
        <method name="setLiveSeekableRange" type="void">
          <param name="start" type="double"/>
          <param name="end" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="activeSourceBuffers" read-only="1" type="SourceBufferList"/>
        <property name="duration" type="unrestricted double"/>
        <property name="onsourceclose" type="EventHandler" event-handler="sourceclose"/>
        <property name="onsourceended" type="EventHandler" event-handler="sourceended"/>
        <property name="onsourceopen" type="EventHandler" event-handler="sourceopen"/>
        <property name="readyState" read-only="1" type="ReadyState"/>
        <property name="sourceBuffers" read-only="1" type="SourceBufferList"/>
      </properties>
      <events>
        <event name="sourceclose" type="Event"/>
        <event name="sourceended" type="Event"/>
        <event name="sourceopen" type="Event"/>
        <event name="sourceopen" dispatch="sync" precedes="sourceended sourceclose" skips-window="1" type="Event"/>
        <event name="sourceended" dispatch="sync" follows="sourceopen" precedes="sourceclose" skips-window="1" type="Event"/>
        <event name="sourceclose" dispatch="sync" follows="sourceended sourceopen" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="MediaStream" extends="EventTarget" exposed="Window">
      <constructor/>
      <constructor>
        <param name="stream" type="MediaStream"/>
      </constructor>
      <constructor>
        <param name="tracks" type="sequence&lt;MediaStreamTrack&gt;"/>
      </constructor>
      <methods>
        <method name="addTrack" type="void">
          <param name="track" type="MediaStreamTrack"/>
        </method>
        <method name="clone" type="MediaStream"/>
        <method name="getAudioTracks" type="sequence&lt;MediaStreamTrack&gt;"/>
        <method name="getTrackById" nullable="1" type="MediaStreamTrack">
          <param name="trackId" type="DOMString"/>
        </method>
        <method name="getTracks" type="sequence&lt;MediaStreamTrack&gt;"/>
        <method name="getVideoTracks" type="sequence&lt;MediaStreamTrack&gt;"/>
        <method name="removeTrack" type="void">
          <param name="track" type="MediaStreamTrack"/>
        </method>
      </methods>
      <properties>
        <property name="active" read-only="1" type="boolean"/>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="onaddtrack" type="EventHandler" event-handler="addtrack"/>
        <property name="onremovetrack" type="EventHandler" event-handler="removetrack"/>
      </properties>
      <events>
        <event name="active" dispatch="sync" skips-window="1" type="Event"/>
        <event name="inactive" dispatch="sync" skips-window="1" type="Event"/>
        <event name="addtrack" dispatch="sync" skips-window="1" type="MediaStreamTrackEvent"/>
        <event name="removetrack" dispatch="sync" skips-window="1" type="MediaStreamTrackEvent"/>
      </events>
    </interface>
    <interface name="MediaStreamAudioDestinationNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="AudioNodeOptions"/>
      </constructor>
      <properties>
        <property name="stream" read-only="1" type="MediaStream"/>
      </properties>
    </interface>
    <interface name="MediaStreamAudioSourceNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" type="MediaStreamAudioSourceOptions"/>
      </constructor>
    </interface>
    <interface name="MediaStreamTrack" extends="EventTarget" exposed="Window">
      <methods>
        <method name="applyConstraints" type="Promise&lt;void&gt;">
          <param name="constraints" optional="1" type="MediaTrackConstraints"/>
        </method>
        <method name="clone" type="MediaStreamTrack"/>
        <method name="getCapabilities" type="MediaTrackCapabilities"/>
        <method name="getConstraints" type="MediaTrackConstraints"/>
        <method name="getSettings" type="MediaTrackSettings"/>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="enabled" type="boolean"/>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="isolated" read-only="1" type="boolean"/>
        <property name="kind" read-only="1" type="DOMString"/>
        <property name="label" read-only="1" type="DOMString"/>
        <property name="muted" read-only="1" type="boolean"/>
        <property name="onended" type="EventHandler" event-handler="ended"/>
        <property name="onisolationchange" type="EventHandler" event-handler="isolationchange"/>
        <property name="onmute" type="EventHandler" event-handler="mute"/>
        <property name="onoverconstrained" type="EventHandler" event-handler="overconstrained"/>
        <property name="onunmute" type="EventHandler" event-handler="unmute"/>
        <property name="readyState" read-only="1" type="MediaStreamTrackState"/>
      </properties>
      <events>
        <event name="isolationchange" type="Event"/>
        <event name="mute" dispatch="sync" skips-window="1" type="Event"/>
        <event name="unmute" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="MediaStreamTrackAudioSourceNode" extends="AudioNode">
      <constructor>
        <param name="context" type="AudioContext"/>
        <param name="options" type="MediaStreamTrackAudioSourceOptions"/>
      </constructor>
    </interface>
    <interface name="MediaStreamTrackEvent" extends="Event" exposed="Window">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="MediaStreamTrackEventInit"/>
      </constructor>
      <properties>
        <property name="track" read-only="1" type="MediaStreamTrack"/>
      </properties>
    </interface>
    <interface name="MessageChannel" extends="Object" exposed="Window Worker">
      <constructor/>
      <properties>
        <property name="port1" read-only="1" type="MessagePort"/>
        <property name="port2" read-only="1" type="MessagePort"/>
      </properties>
    </interface>
    <interface name="MessageEvent" extends="Event" exposed="Window Worker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="MessageEventInit"/>
      </constructor>
      <methods>
        <method name="initMessageEvent" type="void">
          <param name="type" type="DOMString"/>
          <param name="bubbles" default="false" optional="1" type="boolean"/>
          <param name="cancelable" default="false" optional="1" type="boolean"/>
          <param name="data" default="null" optional="1" type="any"/>
          <param name="origin" default="&quot;&quot;" optional="1" type="USVString"/>
          <param name="lastEventId" default="&quot;&quot;" optional="1" type="DOMString"/>
          <param name="source" default="null" optional="1" nullable="1" type="MessageEventSource"/>
          <param name="ports" default="[]" optional="1" type="sequence&lt;MessagePort&gt;"/>
        </method>
      </methods>
      <properties>
        <property name="data" read-only="1" type="any"/>
        <property name="lastEventId" read-only="1" type="DOMString"/>
        <property name="origin" read-only="1" type="USVString"/>
        <property name="ports" read-only="1" type="FrozenArray&lt;MessagePort&gt;"/>
        <property name="source" read-only="1" nullable="1" type="MessageEventSource"/>
      </properties>
    </interface>
    <interface name="MessagePort" extends="EventTarget" exposed="Window Worker">
      <methods>
        <method name="close" type="void"/>
        <method name="postMessage" type="void">
          <param name="message" type="any"/>
          <param name="transfer" default="[]" optional="1" type="sequence&lt;object&gt;"/>
        </method>
        <method name="start" type="void"/>
      </methods>
      <properties>
        <property name="onmessage" type="EventHandler" event-handler="message"/>
        <property name="onmessageerror" type="EventHandler" event-handler="messageerror"/>
      </properties>
      <events>
        <event name="messageerror" type="MessageEvent"/>
        <event name="message" dispatch="async" skips-window="1" type="MessageEvent"/>
      </events>
    </interface>
    <interface name="MimeType" extends="Object">
      <properties>
        <property name="description" read-only="1" type="DOMString"/>
        <property name="enabledPlugin" read-only="1" type="Plugin"/>
        <property name="suffixes" read-only="1" type="DOMString"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="MimeTypeArray" extends="Object">
      <methods>
        <method name="item" getter="1" nullable="1" type="MimeType">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="namedItem" getter="1" nullable="1" type="MimeType">
          <param name="name" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="MouseEvent" extends="UIEvent">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="MouseEventInit"/>
      </constructor>
      <methods>
        <method name="getModifierState" type="boolean">
          <param name="keyArg" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="altKey" read-only="1" type="boolean"/>
        <property name="button" read-only="1" type="short"/>
        <property name="buttons" read-only="1" type="unsigned short"/>
        <property name="clientX" read-only="1" type="long"/>
        <property name="clientY" read-only="1" type="long"/>
        <property name="ctrlKey" read-only="1" type="boolean"/>
        <property name="metaKey" read-only="1" type="boolean"/>
        <property name="offsetX" read-only="1" type="double"/>
        <property name="offsetY" read-only="1" type="double"/>
        <property name="pageX" read-only="1" type="double"/>
        <property name="pageY" read-only="1" type="double"/>
        <property name="relatedTarget" read-only="1" nullable="1" type="EventTarget"/>
        <property name="screenX" read-only="1" type="long"/>
        <property name="screenY" read-only="1" type="long"/>
        <property name="shiftKey" read-only="1" type="boolean"/>
        <property name="x" read-only="1" type="double"/>
        <property name="y" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="MutationObserver" extends="Object">
      <constructor>
        <param name="callback" type="MutationCallback"/>
      </constructor>
      <methods>
        <method name="disconnect" type="void"/>
        <method name="observe" type="void">
          <param name="target" type="Node"/>
          <param name="options" optional="1" type="MutationObserverInit"/>
        </method>
        <method name="takeRecords" type="sequence&lt;MutationRecord&gt;"/>
      </methods>
    </interface>
    <interface name="MutationRecord" extends="Object" exposed="Window">
      <properties>
        <property name="addedNodes" read-only="1" type="NodeList"/>
        <property name="attributeName" read-only="1" nullable="1" type="DOMString"/>
        <property name="attributeNamespace" read-only="1" nullable="1" type="DOMString"/>
        <property name="nextSibling" read-only="1" nullable="1" type="Node"/>
        <property name="oldValue" read-only="1" nullable="1" type="DOMString"/>
        <property name="previousSibling" read-only="1" nullable="1" type="Node"/>
        <property name="removedNodes" read-only="1" type="NodeList"/>
        <property name="target" read-only="1" type="Node"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="NamedNodeMap" extends="Object" exposed="Window">
      <methods>
        <method name="getNamedItem" getter="1" nullable="1" type="Attr">
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="getNamedItemNS" nullable="1" type="Attr">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="item" getter="1" nullable="1" type="Attr">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeNamedItem" type="Attr">
          <param name="qualifiedName" type="DOMString"/>
        </method>
        <method name="removeNamedItemNS" type="Attr">
          <param name="namespace" nullable="1" type="DOMString"/>
          <param name="localName" type="DOMString"/>
        </method>
        <method name="setNamedItem" nullable="1" type="Attr">
          <param name="attr" type="Attr"/>
        </method>
        <method name="setNamedItemNS" nullable="1" type="Attr">
          <param name="attr" type="Attr"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="NavigationPreloadManager" extends="Object" exposed="Window Worker">
      <methods>
        <method name="disable" type="Promise&lt;void&gt;"/>
        <method name="enable" type="Promise&lt;void&gt;"/>
        <method name="getState" type="Promise&lt;NavigationPreloadState&gt;"/>
        <method name="setHeaderValue" type="Promise&lt;void&gt;">
          <param name="value" type="ByteString"/>
        </method>
      </methods>
    </interface>
    <interface name="Navigator" extends="Object">
      <implements>NavigatorID</implements>
      <implements>NavigatorLanguage</implements>
      <implements>NavigatorOnLine</implements>
      <implements>NavigatorContentUtils</implements>
      <implements>NavigatorCookies</implements>
      <implements>NavigatorPlugins</implements>
      <implements>NavigatorConcurrentHardware</implements>
      <implements>NavigatorUserMedia</implements>
      <methods>
        <method name="getGamepads" type="sequence&lt;Gamepad?&gt;"/>
        <method name="requestMediaKeySystemAccess" type="Promise&lt;MediaKeySystemAccess&gt;">
          <param name="keySystem" type="DOMString"/>
          <param name="supportedConfigurations" type="sequence&lt;MediaKeySystemConfiguration&gt;"/>
        </method>
        <method name="sendBeacon" type="boolean">
          <param name="url" type="USVString"/>
          <param name="data" default="null" optional="1" nullable="1" type="BodyInit"/>
        </method>
      </methods>
      <properties>
        <property name="geolocation" read-only="1" type="Geolocation"/>
        <property name="maxTouchPoints" read-only="1" type="long"/>
        <property name="serviceWorker" read-only="1" type="ServiceWorkerContainer"/>
      </properties>
    </interface>
    <interface name="Node" extends="EventTarget" exposed="Window">
      <constants>
        <constant name="ATTRIBUTE_NODE" type="unsigned short" value="2"/>
        <constant name="CDATA_SECTION_NODE" type="unsigned short" value="4"/>
        <constant name="COMMENT_NODE" type="unsigned short" value="8"/>
        <constant name="DOCUMENT_FRAGMENT_NODE" type="unsigned short" value="11"/>
        <constant name="DOCUMENT_NODE" type="unsigned short" value="9"/>
        <constant name="DOCUMENT_POSITION_CONTAINED_BY" type="unsigned short" value="16"/>
        <constant name="DOCUMENT_POSITION_CONTAINS" type="unsigned short" value="8"/>
        <constant name="DOCUMENT_POSITION_DISCONNECTED" type="unsigned short" value="1"/>
        <constant name="DOCUMENT_POSITION_FOLLOWING" type="unsigned short" value="4"/>
        <constant name="DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC" type="unsigned short" value="32"/>
        <constant name="DOCUMENT_POSITION_PRECEDING" type="unsigned short" value="2"/>
        <constant name="DOCUMENT_TYPE_NODE" type="unsigned short" value="10"/>
        <constant name="ELEMENT_NODE" type="unsigned short" value="1"/>
        <constant name="ENTITY_NODE" type="unsigned short" value="6"/>
        <constant name="ENTITY_REFERENCE_NODE" type="unsigned short" value="5"/>
        <constant name="NOTATION_NODE" type="unsigned short" value="12"/>
        <constant name="PROCESSING_INSTRUCTION_NODE" type="unsigned short" value="7"/>
        <constant name="TEXT_NODE" type="unsigned short" value="3"/>
      </constants>
      <methods>
        <method name="appendChild" type="Node">
          <param name="node" type="Node"/>
        </method>
        <method name="cloneNode" type="Node">
          <param name="deep" default="false" optional="1" type="boolean"/>
        </method>
        <method name="compareDocumentPosition" type="unsigned short">
          <param name="other" type="Node"/>
        </method>
        <method name="contains" type="boolean">
          <param name="other" nullable="1" type="Node"/>
        </method>
        <method name="getRootNode" type="Node">
          <param name="options" optional="1" type="GetRootNodeOptions"/>
        </method>
        <method name="hasChildNodes" type="boolean"/>
        <method name="insertBefore" type="Node">
          <param name="node" type="Node"/>
          <param name="child" nullable="1" type="Node"/>
        </method>
        <method name="isDefaultNamespace" type="boolean">
          <param name="namespace" nullable="1" type="DOMString"/>
        </method>
        <method name="isEqualNode" type="boolean">
          <param name="otherNode" nullable="1" type="Node"/>
        </method>
        <method name="isSameNode" type="boolean">
          <param name="otherNode" nullable="1" type="Node"/>
        </method>
        <method name="lookupNamespaceURI" nullable="1" type="DOMString">
          <param name="prefix" nullable="1" type="DOMString"/>
        </method>
        <method name="lookupPrefix" nullable="1" type="DOMString">
          <param name="namespace" nullable="1" type="DOMString"/>
        </method>
        <method name="normalize" type="void"/>
        <method name="removeChild" type="Node">
          <param name="child" type="Node"/>
        </method>
        <method name="replaceChild" type="Node">
          <param name="node" type="Node"/>
          <param name="child" type="Node"/>
        </method>
      </methods>
      <properties>
        <property name="baseURI" read-only="1" type="USVString"/>
        <property name="childNodes" read-only="1" type="NodeList"/>
        <property name="firstChild" read-only="1" nullable="1" type="Node"/>
        <property name="isConnected" read-only="1" type="boolean"/>
        <property name="lastChild" read-only="1" nullable="1" type="Node"/>
        <property name="nextSibling" read-only="1" nullable="1" type="Node"/>
        <property name="nodeName" read-only="1" type="DOMString"/>
        <property name="nodeType" read-only="1" type="unsigned short"/>
        <property name="nodeValue" nullable="1" type="DOMString"/>
        <property name="ownerDocument" read-only="1" nullable="1" type="Document"/>
        <property name="parentElement" read-only="1" nullable="1" type="Element"/>
        <property name="parentNode" read-only="1" nullable="1" type="Node"/>
        <property name="previousSibling" read-only="1" nullable="1" type="Node"/>
        <property name="textContent" nullable="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="NodeIterator" extends="Object" exposed="Window">
      <methods>
        <method name="detach" type="void"/>
        <method name="nextNode" nullable="1" type="Node"/>
        <method name="previousNode" nullable="1" type="Node"/>
      </methods>
      <properties>
        <property name="filter" read-only="1" nullable="1" type="NodeFilter"/>
        <property name="pointerBeforeReferenceNode" read-only="1" type="boolean"/>
        <property name="referenceNode" read-only="1" type="Node"/>
        <property name="root" read-only="1" type="Node"/>
        <property name="whatToShow" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="NodeList" extends="Object" exposed="Window">
      <methods>
        <method name="item" getter="1" nullable="1" type="Node">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
      <sn:declarations>
        <sn:iterable type="Node"/>
      </sn:declarations>
    </interface>
    <interface name="Notification" extends="EventTarget" exposed="Window Worker">
      <constructor>
        <param name="title" type="DOMString"/>
        <param name="options" optional="1" type="NotificationOptions"/>
      </constructor>
      <methods>
        <method name="close" type="void"/>
        <method name="requestPermission" static="1" type="Promise&lt;NotificationPermission&gt;" exposed="Window">
          <param name="deprecatedCallback" optional="1" type="NotificationPermissionCallback"/>
        </method>
      </methods>
      <properties>
        <property name="actions" read-only="1" type="FrozenArray&lt;NotificationAction&gt;"/>
        <property name="badge" read-only="1" type="USVString"/>
        <property name="body" read-only="1" type="DOMString"/>
        <property name="data" read-only="1" type="any"/>
        <property name="dir" read-only="1" type="NotificationDirection"/>
        <property name="icon" read-only="1" type="USVString"/>
        <property name="image" read-only="1" type="USVString"/>
        <property name="lang" read-only="1" type="DOMString"/>
        <property name="maxActions" read-only="1" static="1" type="unsigned long"/>
        <property name="onclick" type="EventHandler" event-handler="click"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="permission" read-only="1" static="1" type="NotificationPermission"/>
        <property name="renotify" read-only="1" type="boolean"/>
        <property name="requireInteraction" read-only="1" type="boolean"/>
        <property name="silent" read-only="1" type="boolean"/>
        <property name="sound" read-only="1" type="USVString"/>
        <property name="tag" read-only="1" type="DOMString"/>
        <property name="timestamp" read-only="1" type="DOMTimeStamp"/>
        <property name="title" read-only="1" type="DOMString"/>
        <property name="vibrate" read-only="1" type="FrozenArray&lt;unsigned long&gt;"/>
      </properties>
      <events>
        <event name="click" dispatch="sync" follows="show" skips-window="1" type="Event"/>
        <event name="show" dispatch="sync" precedes="click" skips-window="1" type="Event"/>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="close" dispatch="sync" follows="show" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="NotificationEvent" extends="ExtendableEvent" exposed="ServiceWorker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="NotificationEventInit"/>
      </constructor>
      <properties>
        <property name="action" read-only="1" type="DOMString"/>
        <property name="notification" read-only="1" type="Notification"/>
      </properties>
    </interface>
    <interface name="OfflineAudioCompletionEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="OfflineAudioCompletionEventInit"/>
      </constructor>
      <properties>
        <property name="renderedBuffer" read-only="1" type="AudioBuffer"/>
      </properties>
    </interface>
    <interface name="OfflineAudioContext" extends="BaseAudioContext">
      <constructor>
        <param name="numberOfChannels" type="unsigned long"/>
        <param name="length" type="unsigned long"/>
        <param name="sampleRate" type="float"/>
      </constructor>
      <methods>
        <method name="startRendering" type="Promise&lt;AudioBuffer&gt;"/>
        <method name="suspend" type="Promise&lt;void&gt;">
          <param name="suspendTime" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="oncomplete" type="EventHandler" event-handler="complete"/>
      </properties>
      <events>
        <event name="complete" dispatch="sync" skips-window="1" type="OfflineAudioCompletionEvent"/>
      </events>
    </interface>
    <interface name="OffscreenCanvas" extends="EventTarget" exposed="Window Worker">
      <constructor>
        <param name="width" type="unsigned long long"/>
        <param name="height" type="unsigned long long"/>
      </constructor>
      <methods>
        <method name="convertToBlob" type="Promise&lt;Blob&gt;">
          <param name="options" optional="1" type="ImageEncodeOptions"/>
        </method>
        <method name="getContext" nullable="1" type="OffscreenRenderingContext">
          <param name="contextType" type="OffscreenRenderingContextType"/>
          <param name="arguments" type="any" variadic="1"/>
        </method>
        <method name="transferToImageBitmap" type="ImageBitmap"/>
      </methods>
      <properties>
        <property name="height" type="unsigned long long"/>
        <property name="width" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="OffscreenCanvasRenderingContext2D" extends="Object" exposed="Window Worker">
      <methods>
        <method name="commit" type="void"/>
      </methods>
      <properties>
        <property name="canvas" read-only="1" type="OffscreenCanvas"/>
      </properties>
      <implements>CanvasState</implements>
      <implements>CanvasTransform</implements>
      <implements>CanvasCompositing</implements>
      <implements>CanvasImageSmoothing</implements>
      <implements>CanvasFillStrokeStyles</implements>
      <implements>CanvasShadowStyles</implements>
      <implements>CanvasFilters</implements>
      <implements>CanvasRect</implements>
      <implements>CanvasDrawPath</implements>
      <implements>CanvasDrawImage</implements>
      <implements>CanvasImageData</implements>
      <implements>CanvasPathDrawingStyles</implements>
      <implements>CanvasPath</implements>
    </interface>
    <interface name="OscillatorNode" extends="AudioScheduledSourceNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="OscillatorOptions"/>
      </constructor>
      <methods>
        <method name="setPeriodicWave" type="void">
          <param name="periodicWave" type="PeriodicWave"/>
        </method>
      </methods>
      <properties>
        <property name="detune" read-only="1" type="AudioParam"/>
        <property name="frequency" read-only="1" type="AudioParam"/>
        <property name="type" type="OscillatorType"/>
      </properties>
      <events>
        <event name="end" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="OverconstrainedErrorEvent" extends="Event" exposed="Window">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="OverconstrainedErrorEventInit"/>
      </constructor>
      <properties>
        <property name="error" read-only="1" nullable="1" type="OverconstrainedError"/>
      </properties>
    </interface>
    <interface name="PageTransitionEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="PageTransitionEventInit"/>
      </constructor>
      <properties>
        <property name="persisted" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="PannerNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="PannerOptions"/>
      </constructor>
      <methods>
        <method name="setOrientation" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="z" type="float"/>
        </method>
        <method name="setPosition" type="void">
          <param name="x" type="float"/>
          <param name="y" type="float"/>
          <param name="z" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="coneInnerAngle" type="double"/>
        <property name="coneOuterAngle" type="double"/>
        <property name="coneOuterGain" type="double"/>
        <property name="distanceModel" type="DistanceModelType"/>
        <property name="maxDistance" type="double"/>
        <property name="orientationX" read-only="1" type="AudioParam"/>
        <property name="orientationY" read-only="1" type="AudioParam"/>
        <property name="orientationZ" read-only="1" type="AudioParam"/>
        <property name="panningModel" type="PanningModelType"/>
        <property name="positionX" read-only="1" type="AudioParam"/>
        <property name="positionY" read-only="1" type="AudioParam"/>
        <property name="positionZ" read-only="1" type="AudioParam"/>
        <property name="refDistance" type="double"/>
        <property name="rolloffFactor" type="double"/>
      </properties>
    </interface>
    <interface name="Path2D" extends="Object" exposed="Window Worker">
      <constructor/>
      <constructor>
        <param name="path" type="Path2D"/>
      </constructor>
      <constructor>
        <param name="paths" type="sequence&lt;Path2D&gt;"/>
        <param name="fillRule" default="&quot;nonzero&quot;" optional="1" type="CanvasFillRule"/>
      </constructor>
      <constructor>
        <param name="d" type="DOMString"/>
      </constructor>
      <methods>
        <method name="addPath" type="void">
          <param name="path" type="Path2D"/>
          <param name="transform" optional="1" type="DOMMatrixInit"/>
        </method>
      </methods>
      <implements>CanvasPath</implements>
    </interface>
    <interface name="PaymentAddress" extends="Object">
      <properties>
        <property name="addressLine" read-only="1" type="FrozenArray&lt;DOMString&gt;"/>
        <property name="city" read-only="1" type="DOMString"/>
        <property name="country" read-only="1" type="DOMString"/>
        <property name="dependentLocality" read-only="1" type="DOMString"/>
        <property name="languageCode" read-only="1" type="DOMString"/>
        <property name="organization" read-only="1" type="DOMString"/>
        <property name="phone" read-only="1" type="DOMString"/>
        <property name="postalCode" read-only="1" type="DOMString"/>
        <property name="recipient" read-only="1" type="DOMString"/>
        <property name="region" read-only="1" type="DOMString"/>
        <property name="sortingCode" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="PaymentRequest" extends="EventTarget">
      <constructor>
        <param name="methodData" type="sequence&lt;PaymentMethodData&gt;"/>
        <param name="details" type="PaymentDetailsInit"/>
        <param name="options" optional="1" type="PaymentOptions"/>
      </constructor>
      <methods>
        <method name="abort" type="Promise&lt;void&gt;"/>
        <method name="canMakePayment" type="Promise&lt;boolean&gt;"/>
        <method name="show" type="Promise&lt;PaymentResponse&gt;"/>
      </methods>
      <properties>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="onshippingaddresschange" type="EventHandler" event-handler="shippingaddresschange"/>
        <property name="onshippingoptionchange" type="EventHandler" event-handler="shippingoptionchange"/>
        <property name="shippingAddress" read-only="1" nullable="1" type="PaymentAddress"/>
        <property name="shippingOption" read-only="1" nullable="1" type="DOMString"/>
        <property name="shippingType" read-only="1" nullable="1" type="PaymentShippingType"/>
      </properties>
      <events>
        <event name="shippingaddresschange" dispatch="sync" type="Event"/>
        <event name="shippingoptionchange" dispatch="sync" type="Event"/>
      </events>
    </interface>
    <interface name="PaymentRequestUpdateEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="PaymentRequestUpdateEventInit"/>
      </constructor>
      <methods>
        <method name="updateWith" type="void">
          <param name="detailsPromise" type="Promise&lt;PaymentDetailsUpdate&gt;"/>
        </method>
      </methods>
    </interface>
    <interface name="PaymentResponse" extends="Object">
      <methods>
        <method name="complete" type="Promise&lt;void&gt;">
          <param name="result" default="&quot;unknown&quot;" optional="1" type="PaymentComplete"/>
        </method>
      </methods>
      <properties>
        <property name="details" read-only="1" type="object"/>
        <property name="methodName" read-only="1" type="DOMString"/>
        <property name="payerEmail" read-only="1" nullable="1" type="DOMString"/>
        <property name="payerName" read-only="1" nullable="1" type="DOMString"/>
        <property name="payerPhone" read-only="1" nullable="1" type="DOMString"/>
        <property name="requestId" read-only="1" type="DOMString"/>
        <property name="shippingAddress" read-only="1" nullable="1" type="PaymentAddress"/>
        <property name="shippingOption" read-only="1" nullable="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="Performance" extends="EventTarget" exposed="Window Worker">
      <methods>
        <method name="clearMarks" type="void">
          <param name="markName" optional="1" type="DOMString"/>
        </method>
        <method name="clearMeasures" type="void">
          <param name="measureName" optional="1" type="DOMString"/>
        </method>
        <method name="clearResourceTimings" type="void"/>
        <method name="getEntries" type="PerformanceEntryList"/>
        <method name="getEntriesByName" type="PerformanceEntryList">
          <param name="name" type="DOMString"/>
          <param name="type" optional="1" type="DOMString"/>
        </method>
        <method name="getEntriesByType" type="PerformanceEntryList">
          <param name="type" type="DOMString"/>
        </method>
        <method name="mark" type="void">
          <param name="markName" type="DOMString"/>
        </method>
        <method name="measure" type="void">
          <param name="measureName" type="DOMString"/>
          <param name="startMark" optional="1" type="DOMString"/>
          <param name="endMark" optional="1" type="DOMString"/>
        </method>
        <method name="now" type="DOMHighResTimeStamp"/>
        <method name="setResourceTimingBufferSize" type="void">
          <param name="maxSize" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="navigation" read-only="1" type="PerformanceNavigation" exposed="Window"/>
        <property name="onresourcetimingbufferfull" type="EventHandler" event-handler="resourcetimingbufferfull"/>
        <property name="timing" read-only="1" type="PerformanceTiming" exposed="Window"/>
      </properties>
      <events>
        <event name="resourcetimingbufferfull" type="Event"/>
      </events>
    </interface>
    <interface name="PerformanceEntry" extends="Object" exposed="Window Worker">
      <properties>
        <property name="duration" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="entryType" read-only="1" type="DOMString"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="startTime" read-only="1" type="DOMHighResTimeStamp"/>
      </properties>
    </interface>
    <interface name="PerformanceMark" extends="PerformanceEntry"/>
    <interface name="PerformanceMeasure" extends="PerformanceEntry"/>
    <interface name="PerformanceNavigation" extends="Object" exposed="Window">
      <constants>
        <constant name="TYPE_BACK_FORWARD" type="unsigned short" value="2"/>
        <constant name="TYPE_NAVIGATE" type="unsigned short" value="0"/>
        <constant name="TYPE_RELOAD" type="unsigned short" value="1"/>
        <constant name="TYPE_RESERVED" type="unsigned short" value="255"/>
      </constants>
      <properties>
        <property name="redirectCount" read-only="1" type="unsigned short"/>
        <property name="type" read-only="1" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="PerformanceNavigationTiming" extends="PerformanceResourceTiming">
      <properties>
        <property name="domComplete" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domContentLoadedEventEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domContentLoadedEventStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domInteractive" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="loadEventEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="loadEventStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="redirectCount" read-only="1" type="unsigned short"/>
        <property name="type" read-only="1" type="NavigationType"/>
        <property name="unloadEventEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="unloadEventStart" read-only="1" type="DOMHighResTimeStamp"/>
      </properties>
    </interface>
    <interface name="PerformanceObserver" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="callback" type="PerformanceObserverCallback"/>
      </constructor>
      <methods>
        <method name="disconnect" type="void"/>
        <method name="observe" type="void">
          <param name="options" type="PerformanceObserverInit"/>
        </method>
      </methods>
    </interface>
    <interface name="PerformanceObserverEntryList" extends="Object" exposed="Window Worker">
      <methods>
        <method name="getEntries" type="PerformanceEntryList"/>
        <method name="getEntriesByName" type="PerformanceEntryList">
          <param name="name" type="DOMString"/>
          <param name="type" optional="1" type="DOMString"/>
        </method>
        <method name="getEntriesByType" type="PerformanceEntryList">
          <param name="type" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="PerformanceResourceTiming" extends="PerformanceEntry" exposed="Window">
      <properties>
        <property name="connectEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="connectStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domainLookupEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="domainLookupStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="fetchStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="initiatorType" read-only="1" type="DOMString"/>
        <property name="redirectEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="redirectStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="requestStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="responseEnd" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="responseStart" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="secureConnectionStart" read-only="1" type="DOMHighResTimeStamp"/>
      </properties>
    </interface>
    <interface name="PerformanceTiming" extends="Object" exposed="Window">
      <properties>
        <property name="connectEnd" read-only="1" type="unsigned long long"/>
        <property name="connectStart" read-only="1" type="unsigned long long"/>
        <property name="domainLookupEnd" read-only="1" type="unsigned long long"/>
        <property name="domainLookupStart" read-only="1" type="unsigned long long"/>
        <property name="domComplete" read-only="1" type="unsigned long long"/>
        <property name="domContentLoadedEventEnd" read-only="1" type="unsigned long long"/>
        <property name="domContentLoadedEventStart" read-only="1" type="unsigned long long"/>
        <property name="domInteractive" read-only="1" type="unsigned long long"/>
        <property name="domLoading" read-only="1" type="unsigned long long"/>
        <property name="fetchStart" read-only="1" type="unsigned long long"/>
        <property name="loadEventEnd" read-only="1" type="unsigned long long"/>
        <property name="loadEventStart" read-only="1" type="unsigned long long"/>
        <property name="navigationStart" read-only="1" type="unsigned long long"/>
        <property name="redirectEnd" read-only="1" type="unsigned long long"/>
        <property name="redirectStart" read-only="1" type="unsigned long long"/>
        <property name="requestStart" read-only="1" type="unsigned long long"/>
        <property name="responseEnd" read-only="1" type="unsigned long long"/>
        <property name="responseStart" read-only="1" type="unsigned long long"/>
        <property name="secureConnectionStart" read-only="1" type="unsigned long long"/>
        <property name="unloadEventEnd" read-only="1" type="unsigned long long"/>
        <property name="unloadEventStart" read-only="1" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="PeriodicWave" extends="Object">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="PeriodicWaveOptions"/>
      </constructor>
    </interface>
    <interface name="Plugin" extends="Object">
      <methods>
        <method name="item" getter="1" nullable="1" type="MimeType">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="namedItem" getter="1" nullable="1" type="MimeType">
          <param name="name" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="description" read-only="1" type="DOMString"/>
        <property name="filename" read-only="1" type="DOMString"/>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="name" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="PluginArray" extends="Object">
      <methods>
        <method name="item" getter="1" nullable="1" type="Plugin">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="namedItem" getter="1" nullable="1" type="Plugin">
          <param name="name" type="DOMString"/>
        </method>
        <method name="refresh" type="void">
          <param name="reload" default="false" optional="1" type="boolean"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="PointerEvent" extends="MouseEvent">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="PointerEventInit"/>
      </constructor>
      <properties>
        <property name="height" read-only="1" type="double"/>
        <property name="isPrimary" read-only="1" type="boolean"/>
        <property name="pointerId" read-only="1" type="long"/>
        <property name="pointerType" read-only="1" type="DOMString"/>
        <property name="pressure" read-only="1" type="float"/>
        <property name="tiltX" read-only="1" type="long"/>
        <property name="tiltY" read-only="1" type="long"/>
        <property name="width" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="PopStateEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="PopStateEventInit"/>
      </constructor>
      <properties>
        <property name="state" read-only="1" type="any"/>
      </properties>
    </interface>
    <interface name="ProcessingInstruction" extends="CharacterData" exposed="Window">
      <properties>
        <property name="target" read-only="1" type="DOMString"/>
      </properties>
      <implements>LinkStyle</implements>
    </interface>
    <interface name="ProgressEvent" extends="Event" exposed="Window DedicatedWorker SharedWorker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="ProgressEventInit"/>
      </constructor>
      <properties>
        <property name="lengthComputable" read-only="1" type="boolean"/>
        <property name="loaded" read-only="1" type="unsigned long long"/>
        <property name="total" read-only="1" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="PromiseRejectionEvent" extends="Event" exposed="Window Worker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="PromiseRejectionEventInit"/>
      </constructor>
      <properties>
        <property name="promise" read-only="1" type="Promise&lt;any&gt;"/>
        <property name="reason" read-only="1" type="any"/>
      </properties>
    </interface>
    <interface name="PushEvent" extends="ExtendableEvent" exposed="ServiceWorker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="PushEventInit"/>
      </constructor>
      <properties>
        <property name="data" read-only="1" nullable="1" type="PushMessageData"/>
      </properties>
    </interface>
    <interface name="PushManager" extends="Object" exposed="Window Worker">
      <methods>
        <method name="getSubscription" type="Promise&lt;PushSubscription?&gt;"/>
        <method name="permissionState" type="Promise&lt;PushPermissionState&gt;">
          <param name="options" optional="1" type="PushSubscriptionOptionsInit"/>
        </method>
        <method name="subscribe" type="Promise&lt;PushSubscription&gt;">
          <param name="options" optional="1" type="PushSubscriptionOptionsInit"/>
        </method>
      </methods>
      <properties>
        <property name="supportedContentEncodings" read-only="1" static="1" type="FrozenArray&lt;DOMString&gt;"/>
      </properties>
    </interface>
    <interface name="PushMessageData" extends="Object" exposed="ServiceWorker">
      <methods>
        <method name="arrayBuffer" type="ArrayBuffer"/>
        <method name="blob" type="Blob"/>
        <method name="json" type="any"/>
        <method name="text" type="USVString"/>
      </methods>
    </interface>
    <interface name="PushSubscription" extends="Object" exposed="Window Worker">
      <methods>
        <method name="getKey" nullable="1" type="ArrayBuffer">
          <param name="name" type="PushEncryptionKeyName"/>
        </method>
        <method name="unsubscribe" type="Promise&lt;boolean&gt;"/>
      </methods>
      <properties>
        <property name="endpoint" read-only="1" type="USVString"/>
        <property name="expirationTime" read-only="1" nullable="1" type="DOMTimeStamp"/>
        <property name="options" read-only="1" type="PushSubscriptionOptions"/>
      </properties>
    </interface>
    <interface name="PushSubscriptionChangeEvent" extends="ExtendableEvent" exposed="ServiceWorker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="PushSubscriptionChangeInit"/>
      </constructor>
      <properties>
        <property name="newSubscription" read-only="1" nullable="1" type="PushSubscription"/>
        <property name="oldSubscription" read-only="1" nullable="1" type="PushSubscription"/>
      </properties>
    </interface>
    <interface name="PushSubscriptionOptions" extends="Object" exposed="Window Worker">
      <properties>
        <property name="applicationServerKey" read-only="1" nullable="1" type="ArrayBuffer"/>
        <property name="userVisibleOnly" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="RadioNodeList" extends="NodeList">
      <properties>
        <property name="value" type="DOMString"/>
      </properties>
    </interface>
    <interface name="Range" extends="Object" exposed="Window">
      <constructor/>
      <anonymous-methods>
        <method stringifier="1" type="DOMString"/>
      </anonymous-methods>
      <constants>
        <constant name="END_TO_END" type="unsigned short" value="2"/>
        <constant name="END_TO_START" type="unsigned short" value="3"/>
        <constant name="START_TO_END" type="unsigned short" value="1"/>
        <constant name="START_TO_START" type="unsigned short" value="0"/>
      </constants>
      <methods>
        <method name="cloneContents" type="DocumentFragment"/>
        <method name="cloneRange" type="Range"/>
        <method name="collapse" type="void">
          <param name="toStart" default="false" optional="1" type="boolean"/>
        </method>
        <method name="compareBoundaryPoints" type="short">
          <param name="how" type="unsigned short"/>
          <param name="sourceRange" type="Range"/>
        </method>
        <method name="comparePoint" type="short">
          <param name="node" type="Node"/>
          <param name="offset" type="unsigned long"/>
        </method>
        <method name="createContextualFragment" type="DocumentFragment">
          <param name="fragment" type="DOMString"/>
        </method>
        <method name="deleteContents" type="void"/>
        <method name="detach" type="void"/>
        <method name="extractContents" type="DocumentFragment"/>
        <method name="getBoundingClientRect" type="DOMRect"/>
        <method name="getClientRects" type="sequence&lt;DOMRect&gt;"/>
        <method name="insertNode" type="void">
          <param name="node" type="Node"/>
        </method>
        <method name="intersectsNode" type="boolean">
          <param name="node" type="Node"/>
        </method>
        <method name="isPointInRange" type="boolean">
          <param name="node" type="Node"/>
          <param name="offset" type="unsigned long"/>
        </method>
        <method name="selectNode" type="void">
          <param name="node" type="Node"/>
        </method>
        <method name="selectNodeContents" type="void">
          <param name="node" type="Node"/>
        </method>
        <method name="setEnd" type="void">
          <param name="node" type="Node"/>
          <param name="offset" type="unsigned long"/>
        </method>
        <method name="setEndAfter" type="void">
          <param name="node" type="Node"/>
        </method>
        <method name="setEndBefore" type="void">
          <param name="node" type="Node"/>
        </method>
        <method name="setStart" type="void">
          <param name="node" type="Node"/>
          <param name="offset" type="unsigned long"/>
        </method>
        <method name="setStartAfter" type="void">
          <param name="node" type="Node"/>
        </method>
        <method name="setStartBefore" type="void">
          <param name="node" type="Node"/>
        </method>
        <method name="surroundContents" type="void">
          <param name="newParent" type="Node"/>
        </method>
      </methods>
      <properties>
        <property name="collapsed" read-only="1" type="boolean"/>
        <property name="commonAncestorContainer" read-only="1" type="Node"/>
        <property name="endContainer" read-only="1" type="Node"/>
        <property name="endOffset" read-only="1" type="unsigned long"/>
        <property name="startContainer" read-only="1" type="Node"/>
        <property name="startOffset" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="ReadableStream" extends="Object" exposed="Window Worker">
      <methods>
        <method name="cancel" type="Promise&lt;void&gt;"/>
        <method name="getReader" type="ReadableStreamDefaultReader"/>
      </methods>
      <properties>
        <property name="locked" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="ReadableStreamDefaultReader" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="stream" type="ReadableStream"/>
      </constructor>
      <methods>
        <method name="cancel" type="Promise&lt;void&gt;"/>
        <method name="read" type="Promise&lt;any&gt;"/>
        <method name="releaseLock" type="void"/>
      </methods>
      <properties>
        <property name="closed" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="RelatedEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="RelatedEventInit"/>
      </constructor>
      <properties>
        <property name="relatedTarget" read-only="1" nullable="1" type="EventTarget"/>
      </properties>
    </interface>
    <interface name="Request" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="input" type="RequestInfo"/>
        <param name="init" optional="1" type="RequestInit"/>
      </constructor>
      <methods>
        <method name="clone" type="Request"/>
      </methods>
      <properties>
        <property name="cache" read-only="1" type="RequestCache"/>
        <property name="credentials" read-only="1" type="RequestCredentials"/>
        <property name="destination" read-only="1" type="RequestDestination"/>
        <property name="headers" read-only="1" type="Headers"/>
        <property name="integrity" read-only="1" type="DOMString"/>
        <property name="keepalive" read-only="1" type="boolean"/>
        <property name="method" read-only="1" type="ByteString"/>
        <property name="mode" read-only="1" type="RequestMode"/>
        <property name="redirect" read-only="1" type="RequestRedirect"/>
        <property name="referrer" read-only="1" type="USVString"/>
        <property name="referrerPolicy" read-only="1" type="ReferrerPolicy"/>
        <property name="type" read-only="1" type="RequestType"/>
        <property name="url" read-only="1" type="USVString"/>
      </properties>
      <implements>Body</implements>
    </interface>
    <interface name="Response" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="body" default="null" optional="1" nullable="1" type="BodyInit"/>
        <param name="init" optional="1" type="ResponseInit"/>
      </constructor>
      <methods>
        <method name="clone" type="Response"/>
        <method name="error" static="1" type="Response"/>
        <method name="redirect" static="1" type="Response">
          <param name="url" type="USVString"/>
          <param name="status" default="302" optional="1" type="unsigned short"/>
        </method>
      </methods>
      <properties>
        <property name="headers" read-only="1" type="Headers"/>
        <property name="ok" read-only="1" type="boolean"/>
        <property name="redirected" read-only="1" type="boolean"/>
        <property name="status" read-only="1" type="unsigned short"/>
        <property name="statusText" read-only="1" type="ByteString"/>
        <property name="trailer" read-only="1" type="Promise&lt;Headers&gt;"/>
        <property name="type" read-only="1" type="ResponseType"/>
        <property name="url" read-only="1" type="USVString"/>
      </properties>
      <implements>Body</implements>
    </interface>
    <interface name="RTCCertificate" extends="Object">
      <methods>
        <method name="getAlgorithm" type="AlgorithmIdentifier"/>
        <method name="getFingerprints" type="sequence&lt;RTCDtlsFingerprint&gt;"/>
      </methods>
      <properties>
        <property name="expires" read-only="1" type="DOMTimeStamp"/>
      </properties>
    </interface>
    <interface name="RTCDataChannel" extends="EventTarget">
      <methods>
        <method name="close" type="void"/>
        <method name="send" type="void">
          <param name="data" type="USVString"/>
        </method>
        <method name="send" type="void">
          <param name="data" type="Blob"/>
        </method>
        <method name="send" type="void">
          <param name="data" type="ArrayBuffer"/>
        </method>
        <method name="send" type="void">
          <param name="data" type="ArrayBufferView"/>
        </method>
      </methods>
      <properties>
        <property name="binaryType" type="DOMString"/>
        <property name="bufferedAmount" read-only="1" type="unsigned long"/>
        <property name="bufferedAmountLowThreshold" type="unsigned long"/>
        <property name="id" read-only="1" nullable="1" type="unsigned short"/>
        <property name="label" read-only="1" type="USVString"/>
        <property name="maxPacketLifeTime" read-only="1" nullable="1" type="unsigned short"/>
        <property name="maxRetransmits" read-only="1" nullable="1" type="unsigned short"/>
        <property name="negotiated" read-only="1" type="boolean"/>
        <property name="onbufferedamountlow" type="EventHandler" event-handler="bufferedamountlow"/>
        <property name="onclose" type="EventHandler" event-handler="close"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="onmessage" type="EventHandler" event-handler="message"/>
        <property name="onopen" type="EventHandler" event-handler="open"/>
        <property name="ordered" read-only="1" type="boolean"/>
        <property name="priority" read-only="1" type="RTCPriorityType"/>
        <property name="protocol" read-only="1" type="USVString"/>
        <property name="readyState" read-only="1" type="RTCDataChannelState"/>
      </properties>
      <events>
        <event name="bufferedamountlow" type="Event"/>
        <event name="close" type="Event"/>
        <event name="error" type="ErrorEvent"/>
        <event name="message" type="MessageEvent"/>
        <event name="open" type="Event"/>
      </events>
    </interface>
    <interface name="RTCDataChannelEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="RTCDataChannelEventInit"/>
      </constructor>
      <properties>
        <property name="channel" read-only="1" type="RTCDataChannel"/>
      </properties>
    </interface>
    <interface name="RTCDtlsTransport" extends="Object">
      <methods>
        <method name="getRemoteCertificates" type="sequence&lt;ArrayBuffer&gt;"/>
      </methods>
      <properties>
        <property name="onstatechange" type="EventHandler" event-handler="statechange"/>
        <property name="state" read-only="1" type="RTCDtlsTransportState"/>
        <property name="transport" read-only="1" type="RTCIceTransport"/>
      </properties>
      <events>
        <event name="statechange" type="Event"/>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="RTCDTMFSender" extends="EventTarget">
      <methods>
        <method name="insertDTMF" type="void">
          <param name="tones" type="DOMString"/>
          <param name="duration" default="100" optional="1" type="unsigned long"/>
          <param name="interToneGap" default="70" optional="1" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="ontonechange" type="EventHandler" event-handler="tonechange"/>
        <property name="toneBuffer" read-only="1" type="DOMString"/>
      </properties>
      <events>
        <event name="tonechange" type="RTCDTMFToneChangeEvent"/>
      </events>
    </interface>
    <interface name="RTCDTMFToneChangeEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="RTCDTMFToneChangeEventInit"/>
      </constructor>
      <properties>
        <property name="tone" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="RTCErrorEvent" extends="Event" exposed="Window">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="RTCErrorEventInit"/>
      </constructor>
      <properties>
        <property name="error" read-only="1" nullable="1" type="RTCError"/>
      </properties>
    </interface>
    <interface name="RTCIceCandidate" extends="Object">
      <constructor>
        <param name="candidateInitDict" type="RTCIceCandidateInit"/>
      </constructor>
      <properties>
        <property name="candidate" read-only="1" type="DOMString"/>
        <property name="foundation" read-only="1" nullable="1" type="DOMString"/>
        <property name="ip" read-only="1" nullable="1" type="DOMString"/>
        <property name="port" read-only="1" nullable="1" type="unsigned short"/>
        <property name="priority" read-only="1" nullable="1" type="unsigned long"/>
        <property name="protocol" read-only="1" nullable="1" type="RTCIceProtocol"/>
        <property name="relatedAddress" read-only="1" nullable="1" type="DOMString"/>
        <property name="relatedPort" read-only="1" nullable="1" type="unsigned short"/>
        <property name="sdpMid" read-only="1" nullable="1" type="DOMString"/>
        <property name="sdpMLineIndex" read-only="1" nullable="1" type="unsigned short"/>
        <property name="tcpType" read-only="1" nullable="1" type="RTCIceTcpCandidateType"/>
        <property name="type" read-only="1" nullable="1" type="RTCIceCandidateType"/>
        <property name="ufrag" read-only="1" nullable="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="RTCIceTransport" extends="Object">
      <methods>
        <method name="getLocalCandidates" type="sequence&lt;RTCIceCandidate&gt;"/>
        <method name="getLocalParameters" nullable="1" type="RTCIceParameters"/>
        <method name="getRemoteCandidates" type="sequence&lt;RTCIceCandidate&gt;"/>
        <method name="getRemoteParameters" nullable="1" type="RTCIceParameters"/>
        <method name="getSelectedCandidatePair" nullable="1" type="RTCIceCandidatePair"/>
      </methods>
      <properties>
        <property name="component" read-only="1" type="RTCIceComponent"/>
        <property name="gatheringState" read-only="1" type="RTCIceGathererState"/>
        <property name="ongatheringstatechange" type="EventHandler" event-handler="gatheringstatechange"/>
        <property name="onselectedcandidatepairchange" type="EventHandler" event-handler="selectedcandidatepairchange"/>
        <property name="onstatechange" type="EventHandler" event-handler="statechange"/>
        <property name="role" read-only="1" type="RTCIceRole"/>
        <property name="state" read-only="1" type="RTCIceTransportState"/>
      </properties>
      <events>
        <event name="gatheringstatechange" type="Event"/>
        <event name="selectedcandidatepairchange" type="Event"/>
        <event name="statechange" type="Event"/>
      </events>
    </interface>
    <interface name="RTCIdentityAssertion" extends="Object">
      <constructor>
        <param name="idp" type="DOMString"/>
        <param name="name" type="DOMString"/>
      </constructor>
      <properties>
        <property name="idp" type="DOMString"/>
        <property name="name" type="DOMString"/>
      </properties>
    </interface>
    <interface name="RTCIdentityProviderGlobalScope" extends="WorkerGlobalScope" global="RTCIdentityProviderGlobalScope" exposed="RTCIdentityProviderGlobalScope">
      <properties>
        <property name="rtcIdentityProvider" read-only="1" type="RTCIdentityProviderRegistrar"/>
      </properties>
    </interface>
    <interface name="RTCIdentityProviderRegistrar" extends="Object" exposed="RTCIdentityProviderGlobalScope">
      <methods>
        <method name="register" type="void">
          <param name="idp" type="RTCIdentityProvider"/>
        </method>
      </methods>
    </interface>
    <interface name="RTCPeerConnection" extends="EventTarget">
      <constructor>
        <param name="configuration" optional="1" type="RTCConfiguration"/>
      </constructor>
      <methods>
        <method name="addIceCandidate" type="Promise&lt;void&gt;">
          <param name="candidate" type="(RTCIceCandidateInit or RTCIceCandidate)"/>
          <param name="successCallback" type="VoidFunction"/>
          <param name="failureCallback" type="RTCPeerConnectionErrorCallback"/>
        </method>
        <method name="addIceCandidate" type="Promise&lt;void&gt;">
          <param name="candidate" type="(RTCIceCandidateInit or RTCIceCandidate)"/>
        </method>
        <method name="addTrack" type="RTCRtpSender">
          <param name="track" type="MediaStreamTrack"/>
          <param name="streams" type="MediaStream" variadic="1"/>
        </method>
        <method name="addTransceiver" type="RTCRtpTransceiver">
          <param name="trackOrKind" type="(MediaStreamTrack or DOMString)"/>
          <param name="init" optional="1" type="RTCRtpTransceiverInit"/>
        </method>
        <method name="close" type="void"/>
        <method name="createAnswer" type="Promise&lt;void&gt;">
          <param name="successCallback" type="RTCSessionDescriptionCallback"/>
          <param name="failureCallback" type="RTCPeerConnectionErrorCallback"/>
        </method>
        <method name="createAnswer" type="Promise&lt;RTCSessionDescriptionInit&gt;">
          <param name="options" optional="1" type="RTCAnswerOptions"/>
        </method>
        <method name="createDataChannel" type="RTCDataChannel">
          <param name="label" type="USVString"/>
          <param name="dataChannelDict" optional="1" type="RTCDataChannelInit"/>
        </method>
        <method name="createOffer" type="Promise&lt;void&gt;">
          <param name="successCallback" type="RTCSessionDescriptionCallback"/>
          <param name="failureCallback" type="RTCPeerConnectionErrorCallback"/>
          <param name="options" optional="1" type="RTCOfferOptions"/>
        </method>
        <method name="createOffer" type="Promise&lt;RTCSessionDescriptionInit&gt;">
          <param name="options" optional="1" type="RTCOfferOptions"/>
        </method>
        <method name="generateCertificate" static="1" type="Promise&lt;RTCCertificate&gt;">
          <param name="keygenAlgorithm" type="AlgorithmIdentifier"/>
        </method>
        <method name="getConfiguration" type="RTCConfiguration"/>
        <method name="getDefaultIceServers" static="1" type="sequence&lt;RTCIceServer&gt;"/>
        <method name="getIdentityAssertion" type="Promise&lt;DOMString&gt;"/>
        <method name="getReceivers" type="sequence&lt;RTCRtpReceiver&gt;"/>
        <method name="getSenders" type="sequence&lt;RTCRtpSender&gt;"/>
        <method name="getStats" type="Promise&lt;RTCStatsReport&gt;">
          <param name="selector" default="null" optional="1" nullable="1" type="MediaStreamTrack"/>
        </method>
        <method name="getTransceivers" type="sequence&lt;RTCRtpTransceiver&gt;"/>
        <method name="removeTrack" type="void">
          <param name="sender" type="RTCRtpSender"/>
        </method>
        <method name="setConfiguration" type="void">
          <param name="configuration" type="RTCConfiguration"/>
        </method>
        <method name="setIdentityProvider" type="void">
          <param name="provider" type="DOMString"/>
          <param name="options" optional="1" type="RTCIdentityProviderOptions"/>
        </method>
        <method name="setLocalDescription" type="Promise&lt;void&gt;">
          <param name="description" type="RTCSessionDescriptionInit"/>
        </method>
        <method name="setLocalDescription" type="Promise&lt;void&gt;">
          <param name="description" type="RTCSessionDescriptionInit"/>
          <param name="successCallback" type="VoidFunction"/>
          <param name="failureCallback" type="RTCPeerConnectionErrorCallback"/>
        </method>
        <method name="setRemoteDescription" type="Promise&lt;void&gt;">
          <param name="description" type="RTCSessionDescriptionInit"/>
        </method>
        <method name="setRemoteDescription" type="Promise&lt;void&gt;">
          <param name="description" type="RTCSessionDescriptionInit"/>
          <param name="successCallback" type="VoidFunction"/>
          <param name="failureCallback" type="RTCPeerConnectionErrorCallback"/>
        </method>
      </methods>
      <properties>
        <property name="canTrickleIceCandidates" read-only="1" nullable="1" type="boolean"/>
        <property name="connectionState" read-only="1" type="RTCPeerConnectionState"/>
        <property name="currentLocalDescription" read-only="1" nullable="1" type="RTCSessionDescription"/>
        <property name="currentRemoteDescription" read-only="1" nullable="1" type="RTCSessionDescription"/>
        <property name="iceConnectionState" read-only="1" type="RTCIceConnectionState"/>
        <property name="iceGatheringState" read-only="1" type="RTCIceGatheringState"/>
        <property name="idpErrorInfo" read-only="1" nullable="1" type="DOMString"/>
        <property name="idpLoginUrl" read-only="1" nullable="1" type="DOMString"/>
        <property name="localDescription" read-only="1" nullable="1" type="RTCSessionDescription"/>
        <property name="onconnectionstatechange" type="EventHandler" event-handler="connectionstatechange"/>
        <property name="ondatachannel" type="EventHandler" event-handler="datachannel"/>
        <property name="onfingerprintfailure" type="EventHandler" event-handler="fingerprintfailure"/>
        <property name="onicecandidate" type="EventHandler" event-handler="icecandidate"/>
        <property name="onicecandidateerror" type="EventHandler" event-handler="icecandidateerror"/>
        <property name="oniceconnectionstatechange" type="EventHandler" event-handler="iceconnectionstatechange"/>
        <property name="onicegatheringstatechange" type="EventHandler" event-handler="icegatheringstatechange"/>
        <property name="onnegotiationneeded" type="EventHandler" event-handler="negotiationneeded"/>
        <property name="onsignalingstatechange" type="EventHandler" event-handler="signalingstatechange"/>
        <property name="ontrack" type="EventHandler" event-handler="track"/>
        <property name="peerIdentity" read-only="1" type="Promise&lt;RTCIdentityAssertion&gt;"/>
        <property name="pendingLocalDescription" read-only="1" nullable="1" type="RTCSessionDescription"/>
        <property name="pendingRemoteDescription" read-only="1" nullable="1" type="RTCSessionDescription"/>
        <property name="remoteDescription" read-only="1" nullable="1" type="RTCSessionDescription"/>
        <property name="sctp" read-only="1" nullable="1" type="RTCSctpTransport"/>
        <property name="signalingState" read-only="1" type="RTCSignalingState"/>
      </properties>
      <events>
        <event name="connectionstatechange" type="Event"/>
        <event name="datachannel" type="RTCDataChannelEvent"/>
        <event name="fingerprintfailure" type="Event"/>
        <event name="icecandidate" type="RTCPeerConnectionIceEvent"/>
        <event name="icecandidateerror" type="RTCPeerConnectionIceErrorEvent"/>
        <event name="iceconnectionstatechange" type="Event"/>
        <event name="icegatheringstatechange" type="Event"/>
        <event name="negotiationneeded" type="Event"/>
        <event name="signalingstatechange" type="Event"/>
        <event name="track" type="RTCTrackEvent"/>
        <event name="negotiationneeded" dispatch="sync" skips-window="1" type="Event"/>
        <event name="icecandidate" dispatch="sync" skips-window="1" type="RTCPeerConnectionIceEvent"/>
        <event name="signalingstatechange" dispatch="sync" skips-window="1" type="Event"/>
        <event name="iceconnectionstatechange" dispatch="sync" skips-window="1" type="Event"/>
        <event name="icegatheringstatechange" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="RTCPeerConnectionIceErrorEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="RTCPeerConnectionIceErrorEventInit"/>
      </constructor>
      <properties>
        <property name="errorCode" read-only="1" type="unsigned short"/>
        <property name="errorText" read-only="1" type="USVString"/>
        <property name="hostCandidate" read-only="1" type="DOMString"/>
        <property name="url" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="RTCPeerConnectionIceEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="RTCPeerConnectionIceEventInit"/>
      </constructor>
      <properties>
        <property name="candidate" read-only="1" nullable="1" type="RTCIceCandidate"/>
        <property name="url" read-only="1" nullable="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="RTCRtpContributingSource" extends="Object">
      <properties>
        <property name="audioLevel" read-only="1" nullable="1" type="byte"/>
        <property name="source" read-only="1" type="unsigned long"/>
        <property name="timestamp" read-only="1" type="DOMHighResTimeStamp"/>
      </properties>
    </interface>
    <interface name="RTCRtpReceiver" extends="Object">
      <methods>
        <method name="getCapabilities" static="1" type="RTCRtpCapabilities">
          <param name="kind" type="DOMString"/>
        </method>
        <method name="getContributingSources" type="sequence&lt;RTCRtpContributingSource&gt;"/>
        <method name="getParameters" type="RTCRtpParameters"/>
        <method name="getStats" type="Promise&lt;RTCStatsReport&gt;"/>
        <method name="getSynchronizationSources" type="sequence&lt;RTCRtpSynchronizationSource&gt;"/>
      </methods>
      <properties>
        <property name="rtcpTransport" read-only="1" nullable="1" type="RTCDtlsTransport"/>
        <property name="track" read-only="1" type="MediaStreamTrack"/>
        <property name="transport" read-only="1" nullable="1" type="RTCDtlsTransport"/>
      </properties>
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="RTCRtpSender" extends="Object">
      <methods>
        <method name="getCapabilities" static="1" type="RTCRtpCapabilities">
          <param name="kind" type="DOMString"/>
        </method>
        <method name="getParameters" type="RTCRtpParameters"/>
        <method name="getStats" type="Promise&lt;RTCStatsReport&gt;"/>
        <method name="replaceTrack" type="Promise&lt;void&gt;">
          <param name="withTrack" type="MediaStreamTrack"/>
        </method>
        <method name="setParameters" type="Promise&lt;void&gt;">
          <param name="parameters" optional="1" type="RTCRtpParameters"/>
        </method>
      </methods>
      <properties>
        <property name="dtmf" read-only="1" nullable="1" type="RTCDTMFSender"/>
        <property name="rtcpTransport" read-only="1" nullable="1" type="RTCDtlsTransport"/>
        <property name="track" read-only="1" nullable="1" type="MediaStreamTrack"/>
        <property name="transport" read-only="1" nullable="1" type="RTCDtlsTransport"/>
      </properties>
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="RTCRtpSynchronizationSource" extends="Object">
      <properties>
        <property name="audioLevel" read-only="1" type="byte"/>
        <property name="source" read-only="1" type="unsigned long"/>
        <property name="timestamp" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="voiceActivityFlag" read-only="1" nullable="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="RTCRtpTransceiver" extends="Object">
      <methods>
        <method name="setCodecPreferences" type="void">
          <param name="codecs" type="sequence&lt;RTCRtpCodecCapability&gt;"/>
        </method>
        <method name="setDirection" type="void">
          <param name="direction" type="RTCRtpTransceiverDirection"/>
        </method>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="currentDirection" read-only="1" nullable="1" type="RTCRtpTransceiverDirection"/>
        <property name="direction" read-only="1" type="RTCRtpTransceiverDirection"/>
        <property name="mid" read-only="1" nullable="1" type="DOMString"/>
        <property name="receiver" read-only="1" type="RTCRtpReceiver"/>
        <property name="sender" read-only="1" type="RTCRtpSender"/>
        <property name="stopped" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="RTCSctpTransport" extends="Object">
      <properties>
        <property name="maxMessageSize" read-only="1" type="unsigned long"/>
        <property name="transport" read-only="1" type="RTCDtlsTransport"/>
      </properties>
    </interface>
    <interface name="RTCSessionDescription" extends="Object">
      <constructor>
        <param name="descriptionInitDict" type="RTCSessionDescriptionInit"/>
      </constructor>
      <properties>
        <property name="sdp" read-only="1" type="DOMString"/>
        <property name="type" read-only="1" type="RTCSdpType"/>
      </properties>
    </interface>
    <interface name="RTCStatsReport" extends="Object"/>
    <interface name="RTCTrackEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" type="RTCTrackEventInit"/>
      </constructor>
      <properties>
        <property name="receiver" read-only="1" type="RTCRtpReceiver"/>
        <property name="streams" read-only="1" type="FrozenArray&lt;MediaStream&gt;"/>
        <property name="track" read-only="1" type="MediaStreamTrack"/>
        <property name="transceiver" read-only="1" type="RTCRtpTransceiver"/>
      </properties>
    </interface>
    <interface name="Screen" extends="Object">
      <properties>
        <property name="availHeight" read-only="1" type="long"/>
        <property name="availWidth" read-only="1" type="long"/>
        <property name="colorDepth" read-only="1" type="unsigned long"/>
        <property name="height" read-only="1" type="long"/>
        <property name="pixelDepth" read-only="1" type="unsigned long"/>
        <property name="width" read-only="1" type="long"/>
      </properties>
    </interface>
    <interface name="ScriptProcessorNode" extends="AudioNode">
      <properties>
        <property name="bufferSize" read-only="1" type="long"/>
        <property name="onaudioprocess" type="EventHandler" event-handler="audioprocess"/>
      </properties>
      <events>
        <event name="audioprocess" dispatch="sync" skips-window="1" type="AudioProcessingEvent"/>
      </events>
    </interface>
    <interface name="Selection" extends="Object">
      <anonymous-methods>
        <method stringifier="1" type="DOMString"/>
      </anonymous-methods>
      <methods>
        <method name="addRange" type="void">
          <param name="range" type="Range"/>
        </method>
        <method name="collapse" type="void">
          <param name="node" nullable="1" type="Node"/>
          <param name="offset" default="0" optional="1" type="unsigned long"/>
        </method>
        <method name="collapseToEnd" type="void"/>
        <method name="collapseToStart" type="void"/>
        <method name="containsNode" type="boolean">
          <param name="node" type="Node"/>
          <param name="allowPartialContainment" default="false" optional="1" type="boolean"/>
        </method>
        <method name="deleteFromDocument" type="void"/>
        <method name="empty" type="void"/>
        <method name="extend" type="void">
          <param name="node" type="Node"/>
          <param name="offset" default="0" optional="1" type="unsigned long"/>
        </method>
        <method name="getRangeAt" type="Range">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeAllRanges" type="void"/>
        <method name="removeRange" type="void">
          <param name="range" type="Range"/>
        </method>
        <method name="selectAllChildren" type="void">
          <param name="node" type="Node"/>
        </method>
        <method name="setBaseAndExtent" type="void">
          <param name="anchorNode" type="Node"/>
          <param name="anchorOffset" type="unsigned long"/>
          <param name="focusNode" type="Node"/>
          <param name="focusOffset" type="unsigned long"/>
        </method>
        <method name="setPosition" type="void">
          <param name="node" nullable="1" type="Node"/>
          <param name="offset" default="0" optional="1" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="anchorNode" read-only="1" nullable="1" type="Node"/>
        <property name="anchorOffset" read-only="1" type="unsigned long"/>
        <property name="focusNode" read-only="1" nullable="1" type="Node"/>
        <property name="focusOffset" read-only="1" type="unsigned long"/>
        <property name="isCollapsed" read-only="1" type="boolean"/>
        <property name="rangeCount" read-only="1" type="unsigned long"/>
        <property name="type" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="ServiceWorker" extends="EventTarget" exposed="Window Worker">
      <methods>
        <method name="postMessage" type="void">
          <param name="message" type="any"/>
          <param name="transfer" default="[]" optional="1" type="sequence&lt;object&gt;"/>
        </method>
      </methods>
      <properties>
        <property name="onstatechange" type="EventHandler" event-handler="statechange"/>
        <property name="scriptURL" read-only="1" type="USVString"/>
        <property name="state" read-only="1" type="ServiceWorkerState"/>
      </properties>
      <implements>AbstractWorker</implements>
      <events>
        <event name="error" dispatch="async" skips-window="1" type="ErrorEvent"/>
        <event name="statechange" dispatch="async" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="ServiceWorkerContainer" extends="EventTarget" exposed="Window Worker">
      <methods>
        <method name="getRegistration" type="Promise&lt;any&gt;">
          <param name="clientURL" default="&quot;&quot;" optional="1" type="USVString"/>
        </method>
        <method name="getRegistrations" type="Promise&lt;sequence&lt;ServiceWorkerRegistration&gt;&gt;"/>
        <method name="register" type="Promise&lt;ServiceWorkerRegistration&gt;">
          <param name="scriptURL" type="USVString"/>
          <param name="options" optional="1" type="RegistrationOptions"/>
        </method>
        <method name="startMessages" type="void"/>
      </methods>
      <properties>
        <property name="controller" read-only="1" nullable="1" type="ServiceWorker"/>
        <property name="oncontrollerchange" type="EventHandler" event-handler="controllerchange"/>
        <property name="onmessage" type="EventHandler" event-handler="message"/>
        <property name="ready" read-only="1" type="Promise&lt;ServiceWorkerRegistration&gt;"/>
      </properties>
      <events>
        <event name="controllerchange" dispatch="async" skips-window="1" type="Event"/>
        <event name="error" dispatch="async" skips-window="1" type="ErrorEvent"/>
      </events>
    </interface>
    <interface name="ServiceWorkerGlobalScope" extends="WorkerGlobalScope" global="Worker ServiceWorker" exposed="ServiceWorker">
      <methods>
        <method name="skipWaiting" type="Promise&lt;void&gt;"/>
      </methods>
      <properties>
        <property name="clients" read-only="1" type="Clients"/>
        <property name="onactivate" type="EventHandler" event-handler="activate"/>
        <property name="onfetch" type="EventHandler" event-handler="fetch"/>
        <property name="onforeignfetch" type="EventHandler" event-handler="foreignfetch"/>
        <property name="oninstall" type="EventHandler" event-handler="install"/>
        <property name="onmessage" type="EventHandler" event-handler="message"/>
        <property name="onnotificationclick" type="EventHandler" event-handler="notificationclick"/>
        <property name="onnotificationclose" type="EventHandler" event-handler="notificationclose"/>
        <property name="onpush" type="EventHandler" event-handler="push" exposed="Window Worker"/>
        <property name="onpushsubscriptionchange" type="EventHandler" event-handler="pushsubscriptionchange" exposed="Window Worker"/>
        <property name="onsync" type="EventHandler" event-handler="sync"/>
        <property name="registration" read-only="1" type="ServiceWorkerRegistration"/>
      </properties>
      <events>
        <event name="activate" type="ExtendableEvent"/>
        <event name="fetch" type="FetchEvent"/>
        <event name="foreignfetch" type="FetchEvent"/>
        <event name="install" type="InstallEvent"/>
        <event name="message" type="ExtendableMessageEvent"/>
        <event name="notificationclick" type="NotificationEvent"/>
        <event name="notificationclose" type="NotificationEvent"/>
        <event name="push" type="PushEvent" exposed="Window Worker"/>
        <event name="pushsubscriptionchange" type="PushSubscriptionChangeEvent" exposed="Window Worker"/>
        <event name="sync" type="SyncEvent"/>
      </events>
    </interface>
    <interface name="ServiceWorkerRegistration" extends="EventTarget" exposed="Window Worker">
      <methods>
        <method name="getNotifications" type="Promise&lt;sequence&lt;Notification&gt;&gt;">
          <param name="filter" optional="1" type="GetNotificationOptions"/>
        </method>
        <method name="showNotification" type="Promise&lt;void&gt;">
          <param name="title" type="DOMString"/>
          <param name="options" optional="1" type="NotificationOptions"/>
        </method>
        <method name="unregister" type="Promise&lt;boolean&gt;"/>
        <method name="update" type="Promise&lt;void&gt;"/>
      </methods>
      <properties>
        <property name="active" read-only="1" nullable="1" type="ServiceWorker"/>
        <property name="installing" read-only="1" nullable="1" type="ServiceWorker"/>
        <property name="navigationPreload" read-only="1" type="NavigationPreloadManager"/>
        <property name="onupdatefound" type="EventHandler" event-handler="updatefound"/>
        <property name="pushManager" read-only="1" type="PushManager"/>
        <property name="scope" read-only="1" type="USVString"/>
        <property name="sync" read-only="1" type="SyncManager"/>
        <property name="useCache" read-only="1" type="boolean"/>
        <property name="waiting" read-only="1" nullable="1" type="ServiceWorker"/>
      </properties>
      <events>
        <event name="updatefound" dispatch="async" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="ShadowAnimation" extends="Animation">
      <constructor>
        <param name="source" type="Animation"/>
        <param name="newTarget" type="Animatable"/>
      </constructor>
      <properties>
        <property name="sourceAnimation" read-only="1" type="Animation"/>
      </properties>
    </interface>
    <interface name="ShadowRoot" extends="DocumentFragment" exposed="Window">
      <properties>
        <property name="host" read-only="1" type="Element"/>
        <property name="mode" read-only="1" type="ShadowRootMode"/>
      </properties>
      <implements>DocumentOrShadowRoot</implements>
    </interface>
    <interface name="SharedWorker" extends="EventTarget" exposed="Window Worker">
      <constructor>
        <param name="scriptURL" type="USVString"/>
        <param name="options" optional="1" type="(DOMString or WorkerOptions)"/>
      </constructor>
      <properties>
        <property name="port" read-only="1" type="MessagePort"/>
      </properties>
      <implements>AbstractWorker</implements>
    </interface>
    <interface name="SharedWorkerGlobalScope" extends="WorkerGlobalScope" global="Worker SharedWorker" exposed="SharedWorker">
      <methods>
        <method name="close" type="void"/>
      </methods>
      <properties>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="onconnect" type="EventHandler" event-handler="connect"/>
      </properties>
      <events>
        <event name="connect" type="MessageEvent"/>
      </events>
    </interface>
    <interface name="SourceBuffer" extends="EventTarget">
      <methods>
        <method name="abort" type="void"/>
        <method name="appendBuffer" type="void">
          <param name="data" type="BufferSource"/>
        </method>
        <method name="remove" type="void">
          <param name="start" type="double"/>
          <param name="end" type="unrestricted double"/>
        </method>
      </methods>
      <properties>
        <property name="appendWindowEnd" type="unrestricted double"/>
        <property name="appendWindowStart" type="double"/>
        <property name="audioTracks" read-only="1" type="AudioTrackList"/>
        <property name="buffered" read-only="1" type="TimeRanges"/>
        <property name="mode" type="AppendMode"/>
        <property name="onabort" type="EventHandler" event-handler="abort"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="onupdate" type="EventHandler" event-handler="update"/>
        <property name="onupdateend" type="EventHandler" event-handler="updateend"/>
        <property name="onupdatestart" type="EventHandler" event-handler="updatestart"/>
        <property name="textTracks" read-only="1" type="TextTrackList"/>
        <property name="timestampOffset" type="double"/>
        <property name="updating" read-only="1" type="boolean"/>
        <property name="videoTracks" read-only="1" type="VideoTrackList"/>
      </properties>
      <events>
        <event name="abort" type="Event"/>
        <event name="error" type="Event"/>
        <event name="update" type="Event"/>
        <event name="updateend" type="Event"/>
        <event name="updatestart" type="Event"/>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="abort" dispatch="sync" skips-window="1" type="Event"/>
        <event name="updatestart" dispatch="sync" skips-window="1" type="Event"/>
        <event name="update" dispatch="sync" skips-window="1" type="Event"/>
        <event name="updateend" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="SourceBufferList" extends="EventTarget">
      <anonymous-methods>
        <method getter="1" type="SourceBuffer">
          <param name="index" type="unsigned long"/>
        </method>
      </anonymous-methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="onaddsourcebuffer" type="EventHandler" event-handler="addsourcebuffer"/>
        <property name="onremovesourcebuffer" type="EventHandler" event-handler="removesourcebuffer"/>
      </properties>
      <events>
        <event name="addsourcebuffer" type="Event"/>
        <event name="removesourcebuffer" type="Event"/>
        <event name="addsourcebuffer" dispatch="sync" skips-window="1" type="Event"/>
        <event name="removesourcebuffer" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="SpeechGrammar" extends="Object">
      <constructor/>
      <properties>
        <property name="src" type="DOMString"/>
        <property name="weight" type="float"/>
      </properties>
    </interface>
    <interface name="SpeechGrammarList" extends="Object">
      <constructor/>
      <methods>
        <method name="addFromString" type="void">
          <param name="string" type="DOMString"/>
          <param name="weight" optional="1" type="float"/>
        </method>
        <method name="addFromURI" type="void">
          <param name="src" type="DOMString"/>
          <param name="weight" optional="1" type="float"/>
        </method>
        <method name="item" getter="1" type="SpeechGrammar">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SpeechRecognition" extends="EventTarget">
      <constructor/>
      <methods>
        <method name="abort" type="void"/>
        <method name="start" type="void"/>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="continuous" type="boolean"/>
        <property name="grammars" type="SpeechGrammarList"/>
        <property name="interimResults" type="boolean"/>
        <property name="lang" type="DOMString"/>
        <property name="maxAlternatives" type="unsigned long"/>
        <property name="onaudioend" type="EventHandler" event-handler="audioend"/>
        <property name="onaudiostart" type="EventHandler" event-handler="audiostart"/>
        <property name="onend" type="EventHandler" event-handler="end"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="onnomatch" type="EventHandler" event-handler="nomatch"/>
        <property name="onresult" type="EventHandler" event-handler="result"/>
        <property name="onsoundend" type="EventHandler" event-handler="soundend"/>
        <property name="onsoundstart" type="EventHandler" event-handler="soundstart"/>
        <property name="onspeechend" type="EventHandler" event-handler="speechend"/>
        <property name="onspeechstart" type="EventHandler" event-handler="speechstart"/>
        <property name="onstart" type="EventHandler" event-handler="start"/>
        <property name="serviceURI" type="DOMString"/>
      </properties>
      <events>
        <event name="audioend" type="Event"/>
        <event name="audiostart" type="Event"/>
        <event name="end" type="Event"/>
        <event name="error" type="SpeechRecognitionError"/>
        <event name="nomatch" type="SpeechRecognitionEvent"/>
        <event name="result" type="SpeechRecognitionEvent"/>
        <event name="soundend" type="Event"/>
        <event name="soundstart" type="Event"/>
        <event name="speechend" type="Event"/>
        <event name="speechstart" type="Event"/>
        <event name="start" type="Event"/>
      </events>
    </interface>
    <interface name="SpeechRecognitionAlternative" extends="Object">
      <properties>
        <property name="confidence" read-only="1" type="float"/>
        <property name="transcript" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="SpeechRecognitionError" extends="Event">
      <properties>
        <property name="error" read-only="1" type="SpeechRecognitionErrorCode"/>
        <property name="message" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="SpeechRecognitionEvent" extends="Event">
      <properties>
        <property name="emma" read-only="1" type="Document"/>
        <property name="interpretation" read-only="1" type="any"/>
        <property name="resultIndex" read-only="1" type="unsigned long"/>
        <property name="results" read-only="1" type="SpeechRecognitionResultList"/>
      </properties>
    </interface>
    <interface name="SpeechRecognitionResult" extends="Object">
      <methods>
        <method name="item" getter="1" type="SpeechRecognitionAlternative">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="isFinal" read-only="1" type="boolean"/>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SpeechRecognitionResultList" extends="Object">
      <methods>
        <method name="item" getter="1" type="SpeechRecognitionResult">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SpeechSynthesis" extends="EventTarget">
      <methods>
        <method name="cancel" type="void"/>
        <method name="getVoices" type="sequence&lt;SpeechSynthesisVoice&gt;"/>
        <method name="pause" type="void"/>
        <method name="resume" type="void"/>
        <method name="speak" type="void">
          <param name="utterance" type="SpeechSynthesisUtterance"/>
        </method>
      </methods>
      <properties>
        <property name="onvoiceschanged" type="EventHandler" event-handler="voiceschanged"/>
        <property name="paused" read-only="1" type="boolean"/>
        <property name="pending" read-only="1" type="boolean"/>
        <property name="speaking" read-only="1" type="boolean"/>
      </properties>
      <events>
        <event name="voiceschanged" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="SpeechSynthesisErrorEvent" extends="SpeechSynthesisEvent">
      <properties>
        <property name="error" read-only="1" type="SpeechSynthesisErrorCode"/>
      </properties>
    </interface>
    <interface name="SpeechSynthesisEvent" extends="Event">
      <properties>
        <property name="charIndex" read-only="1" type="unsigned long"/>
        <property name="elapsedTime" read-only="1" type="float"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="utterance" read-only="1" type="SpeechSynthesisUtterance"/>
      </properties>
    </interface>
    <interface name="SpeechSynthesisUtterance" extends="EventTarget">
      <constructor/>
      <constructor>
        <param name="text" type="DOMString"/>
      </constructor>
      <properties>
        <property name="lang" type="DOMString"/>
        <property name="onboundary" type="EventHandler" event-handler="boundary"/>
        <property name="onend" type="EventHandler" event-handler="end"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="onmark" type="EventHandler" event-handler="mark"/>
        <property name="onpause" type="EventHandler" event-handler="pause"/>
        <property name="onresume" type="EventHandler" event-handler="resume"/>
        <property name="onstart" type="EventHandler" event-handler="start"/>
        <property name="pitch" type="float"/>
        <property name="rate" type="float"/>
        <property name="text" type="DOMString"/>
        <property name="voice" type="SpeechSynthesisVoice"/>
        <property name="volume" type="float"/>
      </properties>
      <events>
        <event name="start" dispatch="sync" skips-window="1" type="Event"/>
        <event name="pause" dispatch="sync" skips-window="1" type="Event"/>
        <event name="resume" dispatch="sync" skips-window="1" type="Event"/>
        <event name="end" dispatch="sync" skips-window="1" type="Event"/>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="mark" dispatch="sync" skips-window="1" type="Event"/>
        <event name="boundary" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="SpeechSynthesisVoice" extends="Object">
      <properties>
        <property name="default" read-only="1" type="boolean"/>
        <property name="lang" read-only="1" type="DOMString"/>
        <property name="localService" read-only="1" type="boolean"/>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="voiceURI" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="StereoPannerNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="StereoPannerOptions"/>
      </constructor>
      <properties>
        <property name="pan" read-only="1" type="AudioParam"/>
      </properties>
    </interface>
    <interface name="Storage" extends="Object">
      <methods>
        <method name="clear" type="void"/>
        <method name="getItem" getter="1" nullable="1" type="DOMString">
          <param name="key" type="DOMString"/>
        </method>
        <method name="key" nullable="1" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" deleter="1" type="void">
          <param name="key" type="DOMString"/>
        </method>
        <method name="setItem" setter="1" type="void">
          <param name="key" type="DOMString"/>
          <param name="value" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="StorageEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="StorageEventInit"/>
      </constructor>
      <properties>
        <property name="key" read-only="1" nullable="1" type="DOMString"/>
        <property name="newValue" read-only="1" nullable="1" type="DOMString"/>
        <property name="oldValue" read-only="1" nullable="1" type="DOMString"/>
        <property name="storageArea" read-only="1" nullable="1" type="Storage"/>
        <property name="url" read-only="1" type="USVString"/>
      </properties>
    </interface>
    <interface name="StyleSheet" extends="Object">
      <properties>
        <property name="disabled" type="boolean"/>
        <property name="href" read-only="1" nullable="1" type="USVString"/>
        <property name="media" read-only="1" type="MediaList"/>
        <property name="ownerNode" read-only="1" nullable="1" type="(Element or ProcessingInstruction)"/>
        <property name="parentStyleSheet" read-only="1" nullable="1" type="StyleSheet"/>
        <property name="title" read-only="1" nullable="1" type="DOMString"/>
        <property name="type" read-only="1" type="CSSOMString"/>
      </properties>
    </interface>
    <interface name="StyleSheetList" extends="Object">
      <methods>
        <method name="item" getter="1" nullable="1" type="StyleSheet">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SubtleCrypto" extends="Object" exposed="Window Worker">
      <methods>
        <method name="decrypt" type="Promise&lt;any&gt;">
          <param name="algorithm" type="AlgorithmIdentifier"/>
          <param name="key" type="CryptoKey"/>
          <param name="data" type="BufferSource"/>
        </method>
        <method name="deriveBits" type="Promise&lt;ArrayBuffer&gt;">
          <param name="algorithm" type="AlgorithmIdentifier"/>
          <param name="baseKey" type="CryptoKey"/>
          <param name="length" type="unsigned long"/>
        </method>
        <method name="deriveKey" type="Promise&lt;any&gt;">
          <param name="algorithm" type="AlgorithmIdentifier"/>
          <param name="baseKey" type="CryptoKey"/>
          <param name="derivedKeyType" type="AlgorithmIdentifier"/>
          <param name="extractable" type="boolean"/>
          <param name="keyUsages" type="sequence&lt;KeyUsage&gt;"/>
        </method>
        <method name="digest" type="Promise&lt;any&gt;">
          <param name="algorithm" type="AlgorithmIdentifier"/>
          <param name="data" type="BufferSource"/>
        </method>
        <method name="encrypt" type="Promise&lt;any&gt;">
          <param name="algorithm" type="AlgorithmIdentifier"/>
          <param name="key" type="CryptoKey"/>
          <param name="data" type="BufferSource"/>
        </method>
        <method name="exportKey" type="Promise&lt;any&gt;">
          <param name="format" type="KeyFormat"/>
          <param name="key" type="CryptoKey"/>
        </method>
        <method name="generateKey" type="Promise&lt;any&gt;">
          <param name="algorithm" type="AlgorithmIdentifier"/>
          <param name="extractable" type="boolean"/>
          <param name="keyUsages" type="sequence&lt;KeyUsage&gt;"/>
        </method>
        <method name="importKey" type="Promise&lt;CryptoKey&gt;">
          <param name="format" type="KeyFormat"/>
          <param name="keyData" type="(BufferSource or JsonWebKey)"/>
          <param name="algorithm" type="AlgorithmIdentifier"/>
          <param name="extractable" type="boolean"/>
          <param name="keyUsages" type="sequence&lt;KeyUsage&gt;"/>
        </method>
        <method name="sign" type="Promise&lt;any&gt;">
          <param name="algorithm" type="AlgorithmIdentifier"/>
          <param name="key" type="CryptoKey"/>
          <param name="data" type="BufferSource"/>
        </method>
        <method name="unwrapKey" type="Promise&lt;CryptoKey&gt;">
          <param name="format" type="KeyFormat"/>
          <param name="wrappedKey" type="BufferSource"/>
          <param name="unwrappingKey" type="CryptoKey"/>
          <param name="unwrapAlgorithm" type="AlgorithmIdentifier"/>
          <param name="unwrappedKeyAlgorithm" type="AlgorithmIdentifier"/>
          <param name="extractable" type="boolean"/>
          <param name="keyUsages" type="sequence&lt;KeyUsage&gt;"/>
        </method>
        <method name="verify" type="Promise&lt;any&gt;">
          <param name="algorithm" type="AlgorithmIdentifier"/>
          <param name="key" type="CryptoKey"/>
          <param name="signature" type="BufferSource"/>
          <param name="data" type="BufferSource"/>
        </method>
        <method name="wrapKey" type="Promise&lt;any&gt;">
          <param name="format" type="KeyFormat"/>
          <param name="key" type="CryptoKey"/>
          <param name="wrappingKey" type="CryptoKey"/>
          <param name="wrapAlgorithm" type="AlgorithmIdentifier"/>
        </method>
      </methods>
    </interface>
    <interface name="SVGAElement" extends="SVGGraphicsElement">
      <properties>
        <property name="download" read-only="1" type="SVGAnimatedString"/>
        <property name="hreflang" read-only="1" type="SVGAnimatedString"/>
        <property name="rel" read-only="1" type="SVGAnimatedString"/>
        <property name="relList" read-only="1" type="SVGAnimatedString"/>
        <property name="target" read-only="1" type="SVGAnimatedString"/>
        <property name="type" read-only="1" type="SVGAnimatedString"/>
      </properties>
      <implements>SVGURIReference</implements>
      <implements>HTMLHyperlinkElementUtils</implements>
      <element name="a" namespace="SVG"/>
    </interface>
    <interface name="SVGAngle" extends="Object">
      <constants>
        <constant name="SVG_ANGLETYPE_DEG" type="unsigned short" value="2"/>
        <constant name="SVG_ANGLETYPE_GRAD" type="unsigned short" value="4"/>
        <constant name="SVG_ANGLETYPE_RAD" type="unsigned short" value="3"/>
        <constant name="SVG_ANGLETYPE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_ANGLETYPE_UNSPECIFIED" type="unsigned short" value="1"/>
      </constants>
      <methods>
        <method name="convertToSpecifiedUnits" type="void">
          <param name="unitType" type="unsigned short"/>
        </method>
        <method name="newValueSpecifiedUnits" type="void">
          <param name="unitType" type="unsigned short"/>
          <param name="valueInSpecifiedUnits" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="unitType" read-only="1" type="unsigned short"/>
        <property name="value" type="float"/>
        <property name="valueAsString" type="DOMString"/>
        <property name="valueInSpecifiedUnits" type="float"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedAngle" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGAngle"/>
        <property name="baseVal" read-only="1" type="SVGAngle"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedBoolean" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="boolean"/>
        <property name="baseVal" type="boolean"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedEnumeration" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="unsigned short"/>
        <property name="baseVal" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedInteger" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="long"/>
        <property name="baseVal" type="long"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedLength" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGLength"/>
        <property name="baseVal" read-only="1" type="SVGLength"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedLengthList" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGLengthList"/>
        <property name="baseVal" read-only="1" type="SVGLengthList"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedNumber" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="float"/>
        <property name="baseVal" type="float"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedNumberList" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGNumberList"/>
        <property name="baseVal" read-only="1" type="SVGNumberList"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedPreserveAspectRatio" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGPreserveAspectRatio"/>
        <property name="baseVal" read-only="1" type="SVGPreserveAspectRatio"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedRect" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="DOMRectReadOnly"/>
        <property name="baseVal" read-only="1" type="DOMRect"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedString" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="DOMString"/>
        <property name="baseVal" type="DOMString"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedTransformList" extends="Object">
      <properties>
        <property name="animVal" read-only="1" type="SVGTransformList"/>
        <property name="baseVal" read-only="1" type="SVGTransformList"/>
      </properties>
    </interface>
    <interface name="SVGCircleElement" extends="SVGGeometryElement">
      <properties>
        <property name="cx" read-only="1" type="SVGAnimatedLength"/>
        <property name="cy" read-only="1" type="SVGAnimatedLength"/>
        <property name="r" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <element name="circle" namespace="SVG"/>
    </interface>
    <interface name="SVGClipPathElement" extends="SVGElement">
      <properties>
        <property name="clipPathUnits" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="transform" read-only="1" type="SVGAnimatedTransformList"/>
      </properties>
      <implements>SVGUnitTypes</implements>
      <element name="clipPath" namespace="SVG"/>
    </interface>
    <interface name="SVGComponentTransferFunctionElement" extends="SVGElement">
      <constants>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE" type="unsigned short" value="3"/>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_GAMMA" type="unsigned short" value="5"/>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY" type="unsigned short" value="1"/>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_LINEAR" type="unsigned short" value="4"/>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_TABLE" type="unsigned short" value="2"/>
        <constant name="SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="amplitude" read-only="1" type="SVGAnimatedNumber"/>
        <property name="exponent" read-only="1" type="SVGAnimatedNumber"/>
        <property name="intercept" read-only="1" type="SVGAnimatedNumber"/>
        <property name="offset" read-only="1" type="SVGAnimatedNumber"/>
        <property name="slope" read-only="1" type="SVGAnimatedNumber"/>
        <property name="tableValues" read-only="1" type="SVGAnimatedNumberList"/>
        <property name="type" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
    </interface>
    <interface name="SVGCursorElement" extends="SVGElement">
      <properties>
        <property name="x" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <implements>SVGURIReference</implements>
    </interface>
    <interface name="SVGDefsElement" extends="SVGGraphicsElement">
      <element name="defs" namespace="SVG"/>
    </interface>
    <interface name="SVGDescElement" extends="SVGElement">
      <element name="desc" namespace="SVG"/>
    </interface>
    <interface name="SVGElement" extends="Element">
      <methods>
        <method name="blur" type="void"/>
        <method name="focus" type="void"/>
      </methods>
      <properties>
        <property name="className" read-only="1" type="SVGAnimatedString"/>
        <property name="dataset" read-only="1" type="DOMStringMap"/>
        <property name="ownerSVGElement" read-only="1" nullable="1" type="SVGSVGElement"/>
        <property name="tabIndex" type="long"/>
        <property name="viewportElement" read-only="1" nullable="1" type="SVGElement"/>
      </properties>
      <implements>GlobalEventHandlers</implements>
      <implements>SVGElementInstance</implements>
      <implements>ElementCSSInlineStyle</implements>
      <events>
        <event name="SVGLoad" dispatch="async" type="Event"/>
      </events>
    </interface>
    <interface name="SVGEllipseElement" extends="SVGGeometryElement">
      <properties>
        <property name="cx" read-only="1" type="SVGAnimatedLength"/>
        <property name="cy" read-only="1" type="SVGAnimatedLength"/>
        <property name="rx" read-only="1" type="SVGAnimatedLength"/>
        <property name="ry" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <element name="ellipse" namespace="SVG"/>
    </interface>
    <interface name="SVGFEBlendElement" extends="SVGElement">
      <constants>
        <constant name="SVG_FEBLEND_MODE_DARKEN" type="unsigned short" value="4"/>
        <constant name="SVG_FEBLEND_MODE_LIGHTEN" type="unsigned short" value="5"/>
        <constant name="SVG_FEBLEND_MODE_MULTIPLY" type="unsigned short" value="2"/>
        <constant name="SVG_FEBLEND_MODE_NORMAL" type="unsigned short" value="1"/>
        <constant name="SVG_FEBLEND_MODE_SCREEN" type="unsigned short" value="3"/>
        <constant name="SVG_FEBLEND_MODE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
        <property name="in2" read-only="1" type="SVGAnimatedString"/>
        <property name="mode" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feBlend" namespace="SVG"/>
    </interface>
    <interface name="SVGFEColorMatrixElement" extends="SVGElement">
      <constants>
        <constant name="SVG_FECOLORMATRIX_TYPE_HUEROTATE" type="unsigned short" value="3"/>
        <constant name="SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA" type="unsigned short" value="4"/>
        <constant name="SVG_FECOLORMATRIX_TYPE_MATRIX" type="unsigned short" value="1"/>
        <constant name="SVG_FECOLORMATRIX_TYPE_SATURATE" type="unsigned short" value="2"/>
        <constant name="SVG_FECOLORMATRIX_TYPE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
        <property name="type" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="values" read-only="1" type="SVGAnimatedNumberList"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feColorMatrix" namespace="SVG"/>
    </interface>
    <interface name="SVGFEComponentTransferElement" extends="SVGElement">
      <properties>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feComponentTransfer" namespace="SVG"/>
    </interface>
    <interface name="SVGFECompositeElement" extends="SVGElement">
      <constants>
        <constant name="SVG_FECOMPOSITE_OPERATOR_ARITHMETIC" type="unsigned short" value="6"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_ATOP" type="unsigned short" value="4"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_IN" type="unsigned short" value="2"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_OUT" type="unsigned short" value="3"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_OVER" type="unsigned short" value="1"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_FECOMPOSITE_OPERATOR_XOR" type="unsigned short" value="5"/>
      </constants>
      <properties>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
        <property name="in2" read-only="1" type="SVGAnimatedString"/>
        <property name="k1" read-only="1" type="SVGAnimatedNumber"/>
        <property name="k2" read-only="1" type="SVGAnimatedNumber"/>
        <property name="k3" read-only="1" type="SVGAnimatedNumber"/>
        <property name="k4" read-only="1" type="SVGAnimatedNumber"/>
        <property name="operator" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feComposite" namespace="SVG"/>
    </interface>
    <interface name="SVGFEConvolveMatrixElement" extends="SVGElement">
      <constants>
        <constant name="SVG_EDGEMODE_DUPLICATE" type="unsigned short" value="1"/>
        <constant name="SVG_EDGEMODE_NONE" type="unsigned short" value="3"/>
        <constant name="SVG_EDGEMODE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_EDGEMODE_WRAP" type="unsigned short" value="2"/>
      </constants>
      <properties>
        <property name="bias" read-only="1" type="SVGAnimatedNumber"/>
        <property name="divisor" read-only="1" type="SVGAnimatedNumber"/>
        <property name="edgeMode" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
        <property name="kernelMatrix" read-only="1" type="SVGAnimatedNumberList"/>
        <property name="kernelUnitLengthX" read-only="1" type="SVGAnimatedNumber"/>
        <property name="kernelUnitLengthY" read-only="1" type="SVGAnimatedNumber"/>
        <property name="orderX" read-only="1" type="SVGAnimatedInteger"/>
        <property name="orderY" read-only="1" type="SVGAnimatedInteger"/>
        <property name="targetX" read-only="1" type="SVGAnimatedInteger"/>
        <property name="targetY" read-only="1" type="SVGAnimatedInteger"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feConvolveMatrix" namespace="SVG"/>
    </interface>
    <interface name="SVGFEDiffuseLightingElement" extends="SVGElement">
      <properties>
        <property name="diffuseConstant" read-only="1" type="SVGAnimatedNumber"/>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
        <property name="kernelUnitLengthX" read-only="1" type="SVGAnimatedNumber"/>
        <property name="kernelUnitLengthY" read-only="1" type="SVGAnimatedNumber"/>
        <property name="surfaceScale" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feDiffuseLighting" namespace="SVG"/>
    </interface>
    <interface name="SVGFEDisplacementMapElement" extends="SVGElement">
      <constants>
        <constant name="SVG_CHANNEL_A" type="unsigned short" value="4"/>
        <constant name="SVG_CHANNEL_B" type="unsigned short" value="3"/>
        <constant name="SVG_CHANNEL_G" type="unsigned short" value="2"/>
        <constant name="SVG_CHANNEL_R" type="unsigned short" value="1"/>
        <constant name="SVG_CHANNEL_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
        <property name="in2" read-only="1" type="SVGAnimatedString"/>
        <property name="scale" read-only="1" type="SVGAnimatedNumber"/>
        <property name="xChannelSelector" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="yChannelSelector" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feDisplacementMap" namespace="SVG"/>
    </interface>
    <interface name="SVGFEDistantLightElement" extends="SVGElement">
      <properties>
        <property name="azimuth" read-only="1" type="SVGAnimatedNumber"/>
        <property name="elevation" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
      <element name="feDistantLight" namespace="SVG"/>
    </interface>
    <interface name="SVGFEDropShadowElement" extends="SVGElement">
      <methods>
        <method name="setStdDeviation" type="void">
          <param name="stdDeviationX" type="float"/>
          <param name="stdDeviationY" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="dx" read-only="1" type="SVGAnimatedNumber"/>
        <property name="dy" read-only="1" type="SVGAnimatedNumber"/>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
        <property name="stdDeviationX" read-only="1" type="SVGAnimatedNumber"/>
        <property name="stdDeviationY" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
    </interface>
    <interface name="SVGFEFloodElement" extends="SVGElement">
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feFlood" namespace="SVG"/>
    </interface>
    <interface name="SVGFEFuncAElement" extends="SVGComponentTransferFunctionElement">
      <element name="feFuncA" namespace="SVG"/>
    </interface>
    <interface name="SVGFEFuncBElement" extends="SVGComponentTransferFunctionElement">
      <element name="feFuncB" namespace="SVG"/>
    </interface>
    <interface name="SVGFEFuncGElement" extends="SVGComponentTransferFunctionElement">
      <element name="feFuncG" namespace="SVG"/>
    </interface>
    <interface name="SVGFEFuncRElement" extends="SVGComponentTransferFunctionElement">
      <element name="feFuncR" namespace="SVG"/>
    </interface>
    <interface name="SVGFEGaussianBlurElement" extends="SVGElement">
      <constants>
        <constant name="SVG_EDGEMODE_DUPLICATE" type="unsigned short" value="1"/>
        <constant name="SVG_EDGEMODE_NONE" type="unsigned short" value="3"/>
        <constant name="SVG_EDGEMODE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_EDGEMODE_WRAP" type="unsigned short" value="2"/>
      </constants>
      <methods>
        <method name="setStdDeviation" type="void">
          <param name="stdDeviationX" type="float"/>
          <param name="stdDeviationY" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="edgeMode" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
        <property name="stdDeviationX" read-only="1" type="SVGAnimatedNumber"/>
        <property name="stdDeviationY" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feGaussianBlur" namespace="SVG"/>
    </interface>
    <interface name="SVGFEImageElement" extends="SVGElement">
      <properties>
        <property name="crossOrigin" read-only="1" type="SVGAnimatedString"/>
        <property name="preserveAspectRatio" read-only="1" type="SVGAnimatedPreserveAspectRatio"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <implements>SVGURIReference</implements>
      <element name="feImage" namespace="SVG"/>
    </interface>
    <interface name="SVGFEMergeElement" extends="SVGElement">
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feMerge" namespace="SVG"/>
    </interface>
    <interface name="SVGFEMergeNodeElement" extends="SVGElement">
      <properties>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
      </properties>
      <element name="feMergeNode" namespace="SVG"/>
    </interface>
    <interface name="SVGFEMorphologyElement" extends="SVGElement">
      <constants>
        <constant name="SVG_MORPHOLOGY_OPERATOR_DILATE" type="unsigned short" value="2"/>
        <constant name="SVG_MORPHOLOGY_OPERATOR_ERODE" type="unsigned short" value="1"/>
        <constant name="SVG_MORPHOLOGY_OPERATOR_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
        <property name="operator" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="radiusX" read-only="1" type="SVGAnimatedNumber"/>
        <property name="radiusY" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feMorphology" namespace="SVG"/>
    </interface>
    <interface name="SVGFEOffsetElement" extends="SVGElement">
      <properties>
        <property name="dx" read-only="1" type="SVGAnimatedNumber"/>
        <property name="dy" read-only="1" type="SVGAnimatedNumber"/>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feOffset" namespace="SVG"/>
    </interface>
    <interface name="SVGFEPointLightElement" extends="SVGElement">
      <properties>
        <property name="x" read-only="1" type="SVGAnimatedNumber"/>
        <property name="y" read-only="1" type="SVGAnimatedNumber"/>
        <property name="z" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
      <element name="fePointLight" namespace="SVG"/>
    </interface>
    <interface name="SVGFESpecularLightingElement" extends="SVGElement">
      <properties>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
        <property name="kernelUnitLengthX" read-only="1" type="SVGAnimatedNumber"/>
        <property name="kernelUnitLengthY" read-only="1" type="SVGAnimatedNumber"/>
        <property name="specularConstant" read-only="1" type="SVGAnimatedNumber"/>
        <property name="specularExponent" read-only="1" type="SVGAnimatedNumber"/>
        <property name="surfaceScale" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feSpecularLighting" namespace="SVG"/>
    </interface>
    <interface name="SVGFESpotLightElement" extends="SVGElement">
      <properties>
        <property name="limitingConeAngle" read-only="1" type="SVGAnimatedNumber"/>
        <property name="pointsAtX" read-only="1" type="SVGAnimatedNumber"/>
        <property name="pointsAtY" read-only="1" type="SVGAnimatedNumber"/>
        <property name="pointsAtZ" read-only="1" type="SVGAnimatedNumber"/>
        <property name="specularExponent" read-only="1" type="SVGAnimatedNumber"/>
        <property name="x" read-only="1" type="SVGAnimatedNumber"/>
        <property name="y" read-only="1" type="SVGAnimatedNumber"/>
        <property name="z" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
      <element name="feSpotLight" namespace="SVG"/>
    </interface>
    <interface name="SVGFETileElement" extends="SVGElement">
      <properties>
        <property name="in1" read-only="1" type="SVGAnimatedString"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feTile" namespace="SVG"/>
    </interface>
    <interface name="SVGFETurbulenceElement" extends="SVGElement">
      <constants>
        <constant name="SVG_STITCHTYPE_NOSTITCH" type="unsigned short" value="2"/>
        <constant name="SVG_STITCHTYPE_STITCH" type="unsigned short" value="1"/>
        <constant name="SVG_STITCHTYPE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_TURBULENCE_TYPE_FRACTALNOISE" type="unsigned short" value="1"/>
        <constant name="SVG_TURBULENCE_TYPE_TURBULENCE" type="unsigned short" value="2"/>
        <constant name="SVG_TURBULENCE_TYPE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="baseFrequencyX" read-only="1" type="SVGAnimatedNumber"/>
        <property name="baseFrequencyY" read-only="1" type="SVGAnimatedNumber"/>
        <property name="numOctaves" read-only="1" type="SVGAnimatedInteger"/>
        <property name="seed" read-only="1" type="SVGAnimatedNumber"/>
        <property name="stitchTiles" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="type" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
      <implements>SVGFilterPrimitiveStandardAttributes</implements>
      <element name="feTurbulence" namespace="SVG"/>
    </interface>
    <interface name="SVGFilterElement" extends="SVGElement">
      <properties>
        <property name="filterUnits" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="height" read-only="1" type="SVGAnimatedLength"/>
        <property name="primitiveUnits" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="width" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <implements>SVGURIReference</implements>
      <implements>SVGUnitTypes</implements>
      <element name="filter" namespace="SVG"/>
    </interface>
    <interface name="SVGForeignObjectElement" extends="SVGGraphicsElement">
      <properties>
        <property name="height" read-only="1" type="SVGAnimatedLength"/>
        <property name="width" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <element name="foreignObject" namespace="SVG"/>
    </interface>
    <interface name="SVGGElement" extends="SVGGraphicsElement">
      <element name="g" namespace="SVG"/>
    </interface>
    <interface name="SVGGeometryElement" extends="SVGGraphicsElement">
      <methods>
        <method name="getPointAtLength" type="DOMPoint">
          <param name="distance" type="float"/>
        </method>
        <method name="getTotalLength" type="float"/>
        <method name="isPointInFill" type="boolean">
          <param name="point" type="DOMPoint"/>
        </method>
        <method name="isPointInStroke" type="boolean">
          <param name="point" type="DOMPoint"/>
        </method>
      </methods>
      <properties>
        <property name="pathLength" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
    </interface>
    <interface name="SVGGradientElement" extends="SVGElement">
      <constants>
        <constant name="SVG_SPREADMETHOD_PAD" type="unsigned short" value="1"/>
        <constant name="SVG_SPREADMETHOD_REFLECT" type="unsigned short" value="2"/>
        <constant name="SVG_SPREADMETHOD_REPEAT" type="unsigned short" value="3"/>
        <constant name="SVG_SPREADMETHOD_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="gradientTransform" read-only="1" type="SVGAnimatedTransformList"/>
        <property name="gradientUnits" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="spreadMethod" read-only="1" type="SVGAnimatedEnumeration"/>
      </properties>
      <implements>SVGURIReference</implements>
    </interface>
    <interface name="SVGGraphicsElement" extends="SVGElement">
      <methods>
        <method name="getBBox" type="DOMRect">
          <param name="options" optional="1" type="SVGBoundingBoxOptions"/>
        </method>
        <method name="getCTM" nullable="1" type="DOMMatrix"/>
        <method name="getScreenCTM" nullable="1" type="DOMMatrix"/>
      </methods>
      <properties>
        <property name="transform" read-only="1" type="SVGAnimatedTransformList"/>
      </properties>
      <implements>SVGTests</implements>
    </interface>
    <interface name="SVGHatchElement" extends="SVGElement"/>
    <interface name="SVGHatchpathElement" extends="SVGElement"/>
    <interface name="SVGImageElement" extends="SVGGraphicsElement">
      <properties>
        <property name="crossOrigin" nullable="1" type="DOMString"/>
        <property name="height" read-only="1" type="SVGAnimatedLength"/>
        <property name="preserveAspectRatio" read-only="1" type="SVGAnimatedPreserveAspectRatio"/>
        <property name="width" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <implements>SVGURIReference</implements>
      <events>
        <event name="SVGAbort" bubbles="1" dispatch="sync" type="Event"/>
        <event name="SVGError" bubbles="1" dispatch="sync" type="Event"/>
        <event name="error" bubbles="1" dispatch="async" tags="IEOnly" type="Event"/>
      </events>
      <element name="image" namespace="SVG"/>
    </interface>
    <interface name="SVGLength" extends="Object">
      <constants>
        <constant name="SVG_LENGTHTYPE_CM" type="unsigned short" value="6"/>
        <constant name="SVG_LENGTHTYPE_EMS" type="unsigned short" value="3"/>
        <constant name="SVG_LENGTHTYPE_EXS" type="unsigned short" value="4"/>
        <constant name="SVG_LENGTHTYPE_IN" type="unsigned short" value="8"/>
        <constant name="SVG_LENGTHTYPE_MM" type="unsigned short" value="7"/>
        <constant name="SVG_LENGTHTYPE_NUMBER" type="unsigned short" value="1"/>
        <constant name="SVG_LENGTHTYPE_PC" type="unsigned short" value="10"/>
        <constant name="SVG_LENGTHTYPE_PERCENTAGE" type="unsigned short" value="2"/>
        <constant name="SVG_LENGTHTYPE_PT" type="unsigned short" value="9"/>
        <constant name="SVG_LENGTHTYPE_PX" type="unsigned short" value="5"/>
        <constant name="SVG_LENGTHTYPE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <methods>
        <method name="convertToSpecifiedUnits" type="void">
          <param name="unitType" type="unsigned short"/>
        </method>
        <method name="newValueSpecifiedUnits" type="void">
          <param name="unitType" type="unsigned short"/>
          <param name="valueInSpecifiedUnits" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="unitType" read-only="1" type="unsigned short"/>
        <property name="value" type="float"/>
        <property name="valueAsString" type="DOMString"/>
        <property name="valueInSpecifiedUnits" type="float"/>
      </properties>
    </interface>
    <interface name="SVGLengthList" extends="Object">
      <anonymous-methods>
        <method setter="1" type="void">
          <param name="index" type="unsigned long"/>
          <param name="newItem" type="SVGLength"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="appendItem" type="SVGLength">
          <param name="newItem" type="SVGLength"/>
        </method>
        <method name="clear" type="void"/>
        <method name="getItem" getter="1" type="SVGLength">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="initialize" type="SVGLength">
          <param name="newItem" type="SVGLength"/>
        </method>
        <method name="insertItemBefore" type="SVGLength">
          <param name="newItem" type="SVGLength"/>
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" type="SVGLength">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="replaceItem" type="SVGLength">
          <param name="newItem" type="SVGLength"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="numberOfItems" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGLinearGradientElement" extends="SVGGradientElement">
      <properties>
        <property name="x1" read-only="1" type="SVGAnimatedLength"/>
        <property name="x2" read-only="1" type="SVGAnimatedLength"/>
        <property name="y1" read-only="1" type="SVGAnimatedLength"/>
        <property name="y2" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <element name="linearGradient" namespace="SVG"/>
    </interface>
    <interface name="SVGLineElement" extends="SVGGeometryElement">
      <properties>
        <property name="x1" read-only="1" type="SVGAnimatedLength"/>
        <property name="x2" read-only="1" type="SVGAnimatedLength"/>
        <property name="y1" read-only="1" type="SVGAnimatedLength"/>
        <property name="y2" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <element name="line" namespace="SVG"/>
    </interface>
    <interface name="SVGMarkerElement" extends="SVGElement">
      <constants>
        <constant name="SVG_MARKER_ORIENT_ANGLE" type="unsigned short" value="2"/>
        <constant name="SVG_MARKER_ORIENT_AUTO" type="unsigned short" value="1"/>
        <constant name="SVG_MARKER_ORIENT_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_MARKERUNITS_STROKEWIDTH" type="unsigned short" value="2"/>
        <constant name="SVG_MARKERUNITS_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_MARKERUNITS_USERSPACEONUSE" type="unsigned short" value="1"/>
      </constants>
      <methods>
        <method name="setOrientToAngle" type="void">
          <param name="angle" type="SVGAngle"/>
        </method>
        <method name="setOrientToAuto" type="void"/>
      </methods>
      <properties>
        <property name="markerHeight" read-only="1" type="SVGAnimatedLength"/>
        <property name="markerUnits" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="markerWidth" read-only="1" type="SVGAnimatedLength"/>
        <property name="orient" type="DOMString"/>
        <property name="orientAngle" read-only="1" type="SVGAnimatedAngle"/>
        <property name="orientType" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="refX" read-only="1" type="SVGAnimatedLength"/>
        <property name="refY" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <implements>SVGFitToViewBox</implements>
      <element name="marker" namespace="SVG"/>
    </interface>
    <interface name="SVGMaskElement" extends="SVGElement">
      <properties>
        <property name="height" read-only="1" type="SVGAnimatedLength"/>
        <property name="maskContentUnits" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="maskUnits" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="width" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <implements>SVGUnitTypes</implements>
      <element name="mask" namespace="SVG"/>
    </interface>
    <interface name="SVGMeshElement" extends="SVGGeometryElement">
      <implements>SVGURIReference</implements>
    </interface>
    <interface name="SVGMeshGradientElement" extends="SVGGradientElement"/>
    <interface name="SVGMeshpatchElement" extends="SVGElement"/>
    <interface name="SVGMeshrowElement" extends="SVGElement"/>
    <interface name="SVGMetadataElement" extends="SVGElement">
      <element name="metadata" namespace="SVG"/>
    </interface>
    <interface name="SVGNumber" extends="Object">
      <properties>
        <property name="value" type="float"/>
      </properties>
    </interface>
    <interface name="SVGNumberList" extends="Object">
      <anonymous-methods>
        <method setter="1" type="void">
          <param name="index" type="unsigned long"/>
          <param name="newItem" type="SVGNumber"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="appendItem" type="SVGNumber">
          <param name="newItem" type="SVGNumber"/>
        </method>
        <method name="clear" type="void"/>
        <method name="getItem" getter="1" type="SVGNumber">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="initialize" type="SVGNumber">
          <param name="newItem" type="SVGNumber"/>
        </method>
        <method name="insertItemBefore" type="SVGNumber">
          <param name="newItem" type="SVGNumber"/>
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" type="SVGNumber">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="replaceItem" type="SVGNumber">
          <param name="newItem" type="SVGNumber"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="numberOfItems" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGPathElement" extends="SVGGeometryElement">
      <element name="path" namespace="SVG"/>
    </interface>
    <interface name="SVGPatternElement" extends="SVGElement">
      <properties>
        <property name="height" read-only="1" type="SVGAnimatedLength"/>
        <property name="patternContentUnits" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="patternTransform" read-only="1" type="SVGAnimatedTransformList"/>
        <property name="patternUnits" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="width" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <implements>SVGFitToViewBox</implements>
      <implements>SVGURIReference</implements>
      <element name="pattern" namespace="SVG"/>
    </interface>
    <interface name="SVGPointList" extends="Object">
      <anonymous-methods>
        <method setter="1" type="void">
          <param name="index" type="unsigned long"/>
          <param name="newItem" type="DOMPoint"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="appendItem" type="DOMPoint">
          <param name="newItem" type="DOMPoint"/>
        </method>
        <method name="clear" type="void"/>
        <method name="getItem" getter="1" type="DOMPoint">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="initialize" type="DOMPoint">
          <param name="newItem" type="DOMPoint"/>
        </method>
        <method name="insertItemBefore" type="DOMPoint">
          <param name="newItem" type="DOMPoint"/>
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" type="DOMPoint">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="replaceItem" type="DOMPoint">
          <param name="newItem" type="DOMPoint"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="numberOfItems" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGPolygonElement" extends="SVGGeometryElement">
      <implements>SVGAnimatedPoints</implements>
      <element name="polygon" namespace="SVG"/>
    </interface>
    <interface name="SVGPolylineElement" extends="SVGGeometryElement">
      <implements>SVGAnimatedPoints</implements>
      <element name="polyline" namespace="SVG"/>
    </interface>
    <interface name="SVGPreserveAspectRatio" extends="Object">
      <constants>
        <constant name="SVG_MEETORSLICE_MEET" type="unsigned short" value="1"/>
        <constant name="SVG_MEETORSLICE_SLICE" type="unsigned short" value="2"/>
        <constant name="SVG_MEETORSLICE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_PRESERVEASPECTRATIO_NONE" type="unsigned short" value="1"/>
        <constant name="SVG_PRESERVEASPECTRATIO_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMAXYMAX" type="unsigned short" value="10"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMAXYMID" type="unsigned short" value="7"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMAXYMIN" type="unsigned short" value="4"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMIDYMAX" type="unsigned short" value="9"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMIDYMID" type="unsigned short" value="6"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMIDYMIN" type="unsigned short" value="3"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMINYMAX" type="unsigned short" value="8"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMINYMID" type="unsigned short" value="5"/>
        <constant name="SVG_PRESERVEASPECTRATIO_XMINYMIN" type="unsigned short" value="2"/>
      </constants>
      <properties>
        <property name="align" type="unsigned short"/>
        <property name="meetOrSlice" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="SVGRadialGradientElement" extends="SVGGradientElement">
      <properties>
        <property name="cx" read-only="1" type="SVGAnimatedLength"/>
        <property name="cy" read-only="1" type="SVGAnimatedLength"/>
        <property name="fr" read-only="1" type="SVGAnimatedLength"/>
        <property name="fx" read-only="1" type="SVGAnimatedLength"/>
        <property name="fy" read-only="1" type="SVGAnimatedLength"/>
        <property name="r" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <element name="radialGradient" namespace="SVG"/>
    </interface>
    <interface name="SVGRectElement" extends="SVGGeometryElement">
      <properties>
        <property name="height" read-only="1" type="SVGAnimatedLength"/>
        <property name="rx" read-only="1" type="SVGAnimatedLength"/>
        <property name="ry" read-only="1" type="SVGAnimatedLength"/>
        <property name="width" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <element name="rect" namespace="SVG"/>
    </interface>
    <interface name="SVGScriptElement" extends="SVGElement">
      <properties>
        <property name="crossOrigin" nullable="1" type="DOMString"/>
        <property name="type" type="DOMString"/>
      </properties>
      <implements>SVGURIReference</implements>
      <element name="script" namespace="SVG"/>
    </interface>
    <interface name="SVGSolidcolorElement" extends="SVGElement"/>
    <interface name="SVGStopElement" extends="SVGElement">
      <properties>
        <property name="offset" read-only="1" type="SVGAnimatedNumber"/>
      </properties>
      <element name="stop" namespace="SVG"/>
    </interface>
    <interface name="SVGStringList" extends="Object">
      <anonymous-methods>
        <method setter="1" type="void">
          <param name="index" type="unsigned long"/>
          <param name="newItem" type="DOMString"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="appendItem" type="DOMString">
          <param name="newItem" type="DOMString"/>
        </method>
        <method name="clear" type="void"/>
        <method name="getItem" getter="1" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="initialize" type="DOMString">
          <param name="newItem" type="DOMString"/>
        </method>
        <method name="insertItemBefore" type="DOMString">
          <param name="newItem" type="DOMString"/>
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" type="DOMString">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="replaceItem" type="DOMString">
          <param name="newItem" type="DOMString"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="numberOfItems" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGStyleElement" extends="SVGElement">
      <properties>
        <property name="media" type="DOMString"/>
        <property name="title" type="DOMString"/>
        <property name="type" type="DOMString"/>
      </properties>
      <implements>LinkStyle</implements>
      <element name="style" namespace="SVG"/>
    </interface>
    <interface name="SVGSVGElement" extends="SVGGraphicsElement">
      <methods>
        <method name="checkEnclosure" type="boolean">
          <param name="element" type="SVGElement"/>
          <param name="rect" type="DOMRectReadOnly"/>
        </method>
        <method name="checkIntersection" type="boolean">
          <param name="element" type="SVGElement"/>
          <param name="rect" type="DOMRectReadOnly"/>
        </method>
        <method name="createSVGAngle" type="SVGAngle"/>
        <method name="createSVGLength" type="SVGLength"/>
        <method name="createSVGMatrix" type="DOMMatrix"/>
        <method name="createSVGNumber" type="SVGNumber"/>
        <method name="createSVGPoint" type="DOMPoint"/>
        <method name="createSVGRect" type="DOMRect"/>
        <method name="createSVGTransform" type="SVGTransform"/>
        <method name="createSVGTransformFromMatrix" type="SVGTransform">
          <param name="matrix" type="DOMMatrixReadOnly"/>
        </method>
        <method name="deselectAll" type="void"/>
        <method name="forceRedraw" type="void"/>
        <method name="getElementById" type="Element">
          <param name="elementId" type="DOMString"/>
        </method>
        <method name="getEnclosureList" type="NodeList">
          <param name="rect" type="DOMRectReadOnly"/>
          <param name="referenceElement" nullable="1" type="SVGElement"/>
        </method>
        <method name="getIntersectionList" type="NodeList">
          <param name="rect" type="DOMRectReadOnly"/>
          <param name="referenceElement" nullable="1" type="SVGElement"/>
        </method>
        <method name="suspendRedraw" type="unsigned long">
          <param name="maxWaitMilliseconds" type="unsigned long"/>
        </method>
        <method name="unsuspendRedraw" type="void">
          <param name="suspendHandleID" type="unsigned long"/>
        </method>
        <method name="unsuspendRedrawAll" type="void"/>
      </methods>
      <properties>
        <property name="currentScale" type="float"/>
        <property name="currentTranslate" read-only="1" type="DOMPointReadOnly"/>
        <property name="height" read-only="1" type="SVGAnimatedLength"/>
        <property name="width" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <implements>SVGFitToViewBox</implements>
      <implements>SVGZoomAndPan</implements>
      <implements>WindowEventHandlers</implements>
      <element name="svg" namespace="SVG"/>
    </interface>
    <interface name="SVGSwitchElement" extends="SVGGraphicsElement">
      <element name="switch" namespace="SVG"/>
    </interface>
    <interface name="SVGSymbolElement" extends="SVGGraphicsElement">
      <implements>SVGFitToViewBox</implements>
      <element name="symbol" namespace="SVG"/>
    </interface>
    <interface name="SVGTextContentElement" extends="SVGGraphicsElement">
      <constants>
        <constant name="LENGTHADJUST_SPACING" type="unsigned short" value="1"/>
        <constant name="LENGTHADJUST_SPACINGANDGLYPHS" type="unsigned short" value="2"/>
        <constant name="LENGTHADJUST_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <methods>
        <method name="getCharNumAtPosition" type="long">
          <param name="point" type="DOMPoint"/>
        </method>
        <method name="getComputedTextLength" type="float"/>
        <method name="getEndPositionOfChar" type="DOMPoint">
          <param name="charnum" type="unsigned long"/>
        </method>
        <method name="getExtentOfChar" type="DOMRect">
          <param name="charnum" type="unsigned long"/>
        </method>
        <method name="getNumberOfChars" type="long"/>
        <method name="getRotationOfChar" type="float">
          <param name="charnum" type="unsigned long"/>
        </method>
        <method name="getStartPositionOfChar" type="DOMPoint">
          <param name="charnum" type="unsigned long"/>
        </method>
        <method name="getSubStringLength" type="float">
          <param name="charnum" type="unsigned long"/>
          <param name="nchars" type="unsigned long"/>
        </method>
        <method name="selectSubString" type="void">
          <param name="charnum" type="unsigned long"/>
          <param name="nchars" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="lengthAdjust" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="textLength" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGTextElement" extends="SVGTextPositioningElement">
      <element name="text" namespace="SVG"/>
    </interface>
    <interface name="SVGTextPathElement" extends="SVGTextContentElement">
      <constants>
        <constant name="TEXTPATH_METHODTYPE_ALIGN" type="unsigned short" value="1"/>
        <constant name="TEXTPATH_METHODTYPE_STRETCH" type="unsigned short" value="2"/>
        <constant name="TEXTPATH_METHODTYPE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="TEXTPATH_SPACINGTYPE_AUTO" type="unsigned short" value="1"/>
        <constant name="TEXTPATH_SPACINGTYPE_EXACT" type="unsigned short" value="2"/>
        <constant name="TEXTPATH_SPACINGTYPE_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="method" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="spacing" read-only="1" type="SVGAnimatedEnumeration"/>
        <property name="startOffset" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <implements>SVGURIReference</implements>
      <element name="textPath" namespace="SVG"/>
    </interface>
    <interface name="SVGTextPositioningElement" extends="SVGTextContentElement">
      <properties>
        <property name="dx" read-only="1" type="SVGAnimatedLengthList"/>
        <property name="dy" read-only="1" type="SVGAnimatedLengthList"/>
        <property name="rotate" read-only="1" type="SVGAnimatedNumberList"/>
        <property name="x" read-only="1" type="SVGAnimatedLengthList"/>
        <property name="y" read-only="1" type="SVGAnimatedLengthList"/>
      </properties>
    </interface>
    <interface name="SVGTitleElement" extends="SVGElement">
      <element name="title" namespace="SVG"/>
    </interface>
    <interface name="SVGTransform" extends="Object">
      <constants>
        <constant name="SVG_TRANSFORM_MATRIX" type="unsigned short" value="1"/>
        <constant name="SVG_TRANSFORM_ROTATE" type="unsigned short" value="4"/>
        <constant name="SVG_TRANSFORM_SCALE" type="unsigned short" value="3"/>
        <constant name="SVG_TRANSFORM_SKEWX" type="unsigned short" value="5"/>
        <constant name="SVG_TRANSFORM_SKEWY" type="unsigned short" value="6"/>
        <constant name="SVG_TRANSFORM_TRANSLATE" type="unsigned short" value="2"/>
        <constant name="SVG_TRANSFORM_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <methods>
        <method name="setMatrix" type="void">
          <param name="matrix" type="DOMMatrixReadOnly"/>
        </method>
        <method name="setRotate" type="void">
          <param name="angle" type="float"/>
          <param name="cx" type="float"/>
          <param name="cy" type="float"/>
        </method>
        <method name="setScale" type="void">
          <param name="sx" type="float"/>
          <param name="sy" type="float"/>
        </method>
        <method name="setSkewX" type="void">
          <param name="angle" type="float"/>
        </method>
        <method name="setSkewY" type="void">
          <param name="angle" type="float"/>
        </method>
        <method name="setTranslate" type="void">
          <param name="tx" type="float"/>
          <param name="ty" type="float"/>
        </method>
      </methods>
      <properties>
        <property name="angle" read-only="1" type="float"/>
        <property name="matrix" read-only="1" type="DOMMatrix"/>
        <property name="type" read-only="1" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="SVGTransformList" extends="Object">
      <anonymous-methods>
        <method setter="1" type="void">
          <param name="index" type="unsigned long"/>
          <param name="newItem" type="SVGTransform"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="appendItem" type="SVGTransform">
          <param name="newItem" type="SVGTransform"/>
        </method>
        <method name="clear" type="void"/>
        <method name="consolidate" nullable="1" type="SVGTransform"/>
        <method name="createSVGTransformFromMatrix" type="SVGTransform">
          <param name="matrix" type="DOMMatrixReadOnly"/>
        </method>
        <method name="getItem" getter="1" type="SVGTransform">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="initialize" type="SVGTransform">
          <param name="newItem" type="SVGTransform"/>
        </method>
        <method name="insertItemBefore" type="SVGTransform">
          <param name="newItem" type="SVGTransform"/>
          <param name="index" type="unsigned long"/>
        </method>
        <method name="removeItem" type="SVGTransform">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="replaceItem" type="SVGTransform">
          <param name="newItem" type="SVGTransform"/>
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="numberOfItems" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="SVGTSpanElement" extends="SVGTextPositioningElement">
      <element name="tspan" namespace="SVG"/>
    </interface>
    <interface name="SVGUnitTypes" extends="Object">
      <constants>
        <constant name="SVG_UNIT_TYPE_OBJECTBOUNDINGBOX" type="unsigned short" value="2"/>
        <constant name="SVG_UNIT_TYPE_UNKNOWN" type="unsigned short" value="0"/>
        <constant name="SVG_UNIT_TYPE_USERSPACEONUSE" type="unsigned short" value="1"/>
      </constants>
    </interface>
    <interface name="SVGUnknownElement" extends="SVGGraphicsElement"/>
    <interface name="SVGUseElement" extends="SVGGraphicsElement">
      <properties>
        <property name="animatedInstanceRoot" read-only="1" nullable="1" type="SVGElement"/>
        <property name="height" read-only="1" type="SVGAnimatedLength"/>
        <property name="instanceRoot" read-only="1" nullable="1" type="SVGElement"/>
        <property name="width" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" read-only="1" type="SVGAnimatedLength"/>
      </properties>
      <implements>SVGURIReference</implements>
      <element name="use" namespace="SVG"/>
    </interface>
    <interface name="SVGUseElementShadowRoot" extends="ShadowRoot"/>
    <interface name="SVGViewElement" extends="SVGElement">
      <implements>SVGFitToViewBox</implements>
      <implements>SVGZoomAndPan</implements>
      <element name="view" namespace="SVG"/>
    </interface>
    <interface name="SyncEvent" extends="ExtendableEvent" exposed="ServiceWorker">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="init" type="SyncEventInit"/>
      </constructor>
      <properties>
        <property name="lastChance" read-only="1" type="boolean"/>
        <property name="tag" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="SyncManager" extends="Object" exposed="Window Worker">
      <methods>
        <method name="getTags" type="Promise&lt;sequence&lt;DOMString&gt;&gt;"/>
        <method name="register" type="Promise&lt;void&gt;">
          <param name="tag" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="Text" extends="CharacterData" exposed="Window">
      <constructor>
        <param name="data" default="&quot;&quot;" optional="1" type="DOMString"/>
      </constructor>
      <methods>
        <method name="splitText" type="Text">
          <param name="offset" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="wholeText" read-only="1" type="DOMString"/>
      </properties>
      <implements>Slotable</implements>
      <implements>GeometryUtils</implements>
    </interface>
    <interface name="TextMetrics" extends="Object">
      <properties>
        <property name="actualBoundingBoxAscent" read-only="1" type="double"/>
        <property name="actualBoundingBoxDescent" read-only="1" type="double"/>
        <property name="actualBoundingBoxLeft" read-only="1" type="double"/>
        <property name="actualBoundingBoxRight" read-only="1" type="double"/>
        <property name="alphabeticBaseline" read-only="1" type="double"/>
        <property name="emHeightAscent" read-only="1" type="double"/>
        <property name="emHeightDescent" read-only="1" type="double"/>
        <property name="fontBoundingBoxAscent" read-only="1" type="double"/>
        <property name="fontBoundingBoxDescent" read-only="1" type="double"/>
        <property name="hangingBaseline" read-only="1" type="double"/>
        <property name="ideographicBaseline" read-only="1" type="double"/>
        <property name="width" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="TextTrack" extends="EventTarget">
      <methods>
        <method name="addCue" type="void">
          <param name="cue" type="TextTrackCue"/>
        </method>
        <method name="removeCue" type="void">
          <param name="cue" type="TextTrackCue"/>
        </method>
      </methods>
      <properties>
        <property name="activeCues" read-only="1" nullable="1" type="TextTrackCueList"/>
        <property name="cues" read-only="1" nullable="1" type="TextTrackCueList"/>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="inBandMetadataTrackDispatchType" read-only="1" type="DOMString"/>
        <property name="kind" read-only="1" type="TextTrackKind"/>
        <property name="label" read-only="1" type="DOMString"/>
        <property name="language" read-only="1" type="DOMString"/>
        <property name="mode" type="TextTrackMode"/>
        <property name="oncuechange" type="EventHandler" event-handler="cuechange"/>
        <property name="sourceBuffer" read-only="1" nullable="1" type="SourceBuffer"/>
      </properties>
      <events>
        <event name="cuechange" dispatch="sync" skips-window="1" type="Event"/>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="load" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="TextTrackCue" extends="EventTarget">
      <properties>
        <property name="endTime" type="double"/>
        <property name="id" type="DOMString"/>
        <property name="onenter" type="EventHandler" event-handler="enter"/>
        <property name="onexit" type="EventHandler" event-handler="exit"/>
        <property name="pauseOnExit" type="boolean"/>
        <property name="startTime" type="double"/>
        <property name="track" read-only="1" nullable="1" type="TextTrack"/>
      </properties>
      <events>
        <event name="enter" dispatch="sync" skips-window="1" type="Event"/>
        <event name="exit" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="TextTrackCueList" extends="Object">
      <anonymous-methods>
        <method getter="1" type="TextTrackCue">
          <param name="index" type="unsigned long"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="getCueById" nullable="1" type="TextTrackCue">
          <param name="id" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="TextTrackList" extends="EventTarget">
      <anonymous-methods>
        <method getter="1" type="TextTrack">
          <param name="index" type="unsigned long"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="getTrackById" nullable="1" type="TextTrack">
          <param name="id" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="onaddtrack" type="EventHandler" event-handler="addtrack"/>
        <property name="onchange" type="EventHandler" event-handler="change"/>
        <property name="onremovetrack" type="EventHandler" event-handler="removetrack"/>
      </properties>
      <events>
        <event name="addtrack" type="TrackEvent"/>
        <event name="change" type="Event"/>
        <event name="removetrack" type="TrackEvent"/>
        <event name="addtrack" dispatch="async" skips-window="1" type="TrackEvent"/>
        <event name="removetrack" dispatch="async" skips-window="1" type="TrackEvent"/>
      </events>
    </interface>
    <interface name="TimeRanges" extends="Object">
      <methods>
        <method name="end" type="double">
          <param name="index" type="unsigned long"/>
        </method>
        <method name="start" type="double">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="Touch" extends="Object">
      <constructor>
        <param name="touchInitDict" type="TouchInit"/>
      </constructor>
      <properties>
        <property name="altitudeAngle" read-only="1" type="float"/>
        <property name="azimuthAngle" read-only="1" type="float"/>
        <property name="clientX" read-only="1" type="double"/>
        <property name="clientY" read-only="1" type="double"/>
        <property name="force" read-only="1" type="float"/>
        <property name="identifier" read-only="1" type="long"/>
        <property name="pageX" read-only="1" type="double"/>
        <property name="pageY" read-only="1" type="double"/>
        <property name="radiusX" read-only="1" type="float"/>
        <property name="radiusY" read-only="1" type="float"/>
        <property name="rotationAngle" read-only="1" type="float"/>
        <property name="screenX" read-only="1" type="double"/>
        <property name="screenY" read-only="1" type="double"/>
        <property name="target" read-only="1" type="EventTarget"/>
        <property name="touchType" read-only="1" type="TouchType"/>
      </properties>
    </interface>
    <interface name="TouchEvent" extends="UIEvent">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="TouchEventInit"/>
      </constructor>
      <properties>
        <property name="altKey" read-only="1" type="boolean"/>
        <property name="changedTouches" read-only="1" type="TouchList"/>
        <property name="ctrlKey" read-only="1" type="boolean"/>
        <property name="metaKey" read-only="1" type="boolean"/>
        <property name="shiftKey" read-only="1" type="boolean"/>
        <property name="targetTouches" read-only="1" type="TouchList"/>
        <property name="touches" read-only="1" type="TouchList"/>
      </properties>
    </interface>
    <interface name="TouchList" extends="Object">
      <methods>
        <method name="item" getter="1" nullable="1" type="Touch">
          <param name="index" type="unsigned long"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="TrackEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="TrackEventInit"/>
      </constructor>
      <properties>
        <property name="track" read-only="1" nullable="1" type="(VideoTrack or AudioTrack or TextTrack)"/>
      </properties>
    </interface>
    <interface name="TransitionEvent" extends="Event">
      <constructor>
        <param name="type" type="CSSOMString"/>
        <param name="transitionEventInitDict" optional="1" type="TransitionEventInit"/>
      </constructor>
      <properties>
        <property name="elapsedTime" read-only="1" type="float"/>
        <property name="propertyName" read-only="1" type="CSSOMString"/>
        <property name="pseudoElement" read-only="1" type="CSSOMString"/>
      </properties>
    </interface>
    <interface name="TreeWalker" extends="Object" exposed="Window">
      <methods>
        <method name="firstChild" nullable="1" type="Node"/>
        <method name="lastChild" nullable="1" type="Node"/>
        <method name="nextNode" nullable="1" type="Node"/>
        <method name="nextSibling" nullable="1" type="Node"/>
        <method name="parentNode" nullable="1" type="Node"/>
        <method name="previousNode" nullable="1" type="Node"/>
        <method name="previousSibling" nullable="1" type="Node"/>
      </methods>
      <properties>
        <property name="currentNode" type="Node"/>
        <property name="filter" read-only="1" nullable="1" type="NodeFilter"/>
        <property name="root" read-only="1" type="Node"/>
        <property name="whatToShow" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="UIEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="UIEventInit"/>
      </constructor>
      <properties>
        <property name="detail" read-only="1" type="long"/>
        <property name="view" read-only="1" nullable="1" type="Window"/>
      </properties>
    </interface>
    <interface name="URL" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="url" type="USVString"/>
        <param name="base" optional="1" type="USVString"/>
      </constructor>
      <methods>
        <method name="createObjectURL" static="1" type="DOMString" exposed="Window DedicatedWorker SharedWorker">
          <param name="blob" type="Blob"/>
        </method>
        <method name="createObjectURL" static="1" type="DOMString" exposed="Window">
          <param name="mediaSource" type="MediaSource"/>
        </method>
        <method name="revokeObjectURL" static="1" type="void" exposed="Window DedicatedWorker SharedWorker">
          <param name="url" type="DOMString"/>
        </method>
        <method name="toJSON" type="USVString"/>
      </methods>
      <properties>
        <property name="hash" type="USVString"/>
        <property name="host" type="USVString"/>
        <property name="hostname" type="USVString"/>
        <property name="href" stringifier="1" type="USVString"/>
        <property name="origin" read-only="1" type="USVString"/>
        <property name="password" type="USVString"/>
        <property name="pathname" type="USVString"/>
        <property name="port" type="USVString"/>
        <property name="protocol" type="USVString"/>
        <property name="search" type="USVString"/>
        <property name="searchParams" read-only="1" type="URLSearchParams"/>
        <property name="username" type="USVString"/>
      </properties>
    </interface>
    <interface name="URLSearchParams" extends="Object" exposed="Window Worker">
      <constructor>
        <param name="init" default="&quot;&quot;" optional="1" type="(sequence&lt;sequence&lt;USVString&gt;&gt; or record&lt;USVString, USVString&gt; or USVString)"/>
      </constructor>
      <anonymous-methods>
        <method stringifier="1" type="DOMString"/>
      </anonymous-methods>
      <methods>
        <method name="append" type="void">
          <param name="name" type="USVString"/>
          <param name="value" type="USVString"/>
        </method>
        <method name="delete" type="void">
          <param name="name" type="USVString"/>
        </method>
        <method name="get" nullable="1" type="USVString">
          <param name="name" type="USVString"/>
        </method>
        <method name="getAll" type="sequence&lt;USVString&gt;">
          <param name="name" type="USVString"/>
        </method>
        <method name="has" type="boolean">
          <param name="name" type="USVString"/>
        </method>
        <method name="set" type="void">
          <param name="name" type="USVString"/>
          <param name="value" type="USVString"/>
        </method>
        <method name="sort" type="void"/>
      </methods>
      <sn:declarations>
        <sn:iterable keytype="USVString" type="USVString"/>
      </sn:declarations>
    </interface>
    <interface name="ValidityState" extends="Object">
      <properties>
        <property name="badInput" read-only="1" type="boolean"/>
        <property name="customError" read-only="1" type="boolean"/>
        <property name="patternMismatch" read-only="1" type="boolean"/>
        <property name="rangeOverflow" read-only="1" type="boolean"/>
        <property name="rangeUnderflow" read-only="1" type="boolean"/>
        <property name="stepMismatch" read-only="1" type="boolean"/>
        <property name="tooLong" read-only="1" type="boolean"/>
        <property name="tooShort" read-only="1" type="boolean"/>
        <property name="typeMismatch" read-only="1" type="boolean"/>
        <property name="valid" read-only="1" type="boolean"/>
        <property name="valueMissing" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="VideoPlaybackQuality" extends="Object">
      <properties>
        <property name="corruptedVideoFrames" read-only="1" type="unsigned long"/>
        <property name="creationTime" read-only="1" type="DOMHighResTimeStamp"/>
        <property name="droppedVideoFrames" read-only="1" type="unsigned long"/>
        <property name="totalVideoFrames" read-only="1" type="unsigned long"/>
      </properties>
    </interface>
    <interface name="VideoTrack" extends="Object">
      <properties>
        <property name="id" read-only="1" type="DOMString"/>
        <property name="kind" read-only="1" type="DOMString"/>
        <property name="label" read-only="1" type="DOMString"/>
        <property name="language" read-only="1" type="DOMString"/>
        <property name="selected" type="boolean"/>
        <property name="sourceBuffer" read-only="1" nullable="1" type="SourceBuffer"/>
      </properties>
    </interface>
    <interface name="VideoTrackList" extends="EventTarget">
      <anonymous-methods>
        <method getter="1" type="VideoTrack">
          <param name="index" type="unsigned long"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="getTrackById" nullable="1" type="VideoTrack">
          <param name="id" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="onaddtrack" type="EventHandler" event-handler="addtrack"/>
        <property name="onchange" type="EventHandler" event-handler="change"/>
        <property name="onremovetrack" type="EventHandler" event-handler="removetrack"/>
        <property name="selectedIndex" read-only="1" type="long"/>
      </properties>
      <events>
        <event name="addtrack" dispatch="async" skips-window="1" type="TrackEvent"/>
        <event name="removetrack" dispatch="async" skips-window="1" type="TrackEvent"/>
        <event name="change" dispatch="async" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="WaveShaperNode" extends="AudioNode">
      <constructor>
        <param name="context" type="BaseAudioContext"/>
        <param name="options" optional="1" type="WaveShaperOptions"/>
      </constructor>
      <properties>
        <property name="curve" nullable="1" type="Float32Array"/>
        <property name="oversample" type="OverSampleType"/>
      </properties>
    </interface>
    <interface name="WebGLActiveInfo" extends="Object">
      <properties>
        <property name="name" read-only="1" type="DOMString"/>
        <property name="size" read-only="1" type="GLint"/>
        <property name="type" read-only="1" type="GLenum"/>
      </properties>
    </interface>
    <interface name="WebGLBuffer" extends="WebGLObject"/>
    <interface name="WebGLContextEvent" extends="Event">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInit" optional="1" type="WebGLContextEventInit"/>
      </constructor>
      <properties>
        <property name="statusMessage" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="WebGLFramebuffer" extends="WebGLObject"/>
    <interface name="WebGLObject" extends="Object"/>
    <interface name="WebGLProgram" extends="WebGLObject"/>
    <interface name="WebGLRenderbuffer" extends="WebGLObject"/>
    <interface name="WebGLRenderingContext" extends="Object">
      <implements>WebGLRenderingContextBase</implements>
    </interface>
    <interface name="WebGLShader" extends="WebGLObject"/>
    <interface name="WebGLShaderPrecisionFormat" extends="Object">
      <properties>
        <property name="precision" read-only="1" type="GLint"/>
        <property name="rangeMax" read-only="1" type="GLint"/>
        <property name="rangeMin" read-only="1" type="GLint"/>
      </properties>
    </interface>
    <interface name="WebGLTexture" extends="WebGLObject"/>
    <interface name="WebGLUniformLocation" extends="Object"/>
    <interface name="WebSocket" extends="EventTarget" exposed="Window Worker">
      <constructor>
        <param name="url" type="USVString"/>
        <param name="protocols" default="[]" optional="1" type="(DOMString or sequence&lt;DOMString&gt;)"/>
      </constructor>
      <constants>
        <constant name="CLOSED" type="unsigned short" value="3"/>
        <constant name="CLOSING" type="unsigned short" value="2"/>
        <constant name="CONNECTING" type="unsigned short" value="0"/>
        <constant name="OPEN" type="unsigned short" value="1"/>
      </constants>
      <methods>
        <method name="close" type="void">
          <param name="code" optional="1" type="unsigned short"/>
          <param name="reason" optional="1" type="USVString"/>
        </method>
        <method name="send" type="void">
          <param name="data" type="USVString"/>
        </method>
        <method name="send" type="void">
          <param name="data" type="Blob"/>
        </method>
        <method name="send" type="void">
          <param name="data" type="ArrayBuffer"/>
        </method>
        <method name="send" type="void">
          <param name="data" type="ArrayBufferView"/>
        </method>
      </methods>
      <properties>
        <property name="binaryType" type="BinaryType"/>
        <property name="bufferedAmount" read-only="1" type="unsigned long long"/>
        <property name="extensions" read-only="1" type="DOMString"/>
        <property name="onclose" type="EventHandler" event-handler="close"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="onmessage" type="EventHandler" event-handler="message"/>
        <property name="onopen" type="EventHandler" event-handler="open"/>
        <property name="protocol" read-only="1" type="DOMString"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
        <property name="url" read-only="1" type="USVString"/>
      </properties>
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
        <event name="message" dispatch="async" skips-window="1" type="MessageEvent"/>
        <event name="open" dispatch="sync" skips-window="1" type="Event"/>
        <event name="close" dispatch="sync" skips-window="1" type="CloseEvent"/>
      </events>
    </interface>
    <interface name="WheelEvent" extends="MouseEvent">
      <constructor>
        <param name="type" type="DOMString"/>
        <param name="eventInitDict" optional="1" type="WheelEventInit"/>
      </constructor>
      <constants>
        <constant name="DOM_DELTA_LINE" type="unsigned long" value="1"/>
        <constant name="DOM_DELTA_PAGE" type="unsigned long" value="2"/>
        <constant name="DOM_DELTA_PIXEL" type="unsigned long" value="0"/>
      </constants>
      <properties>
        <property name="deltaMode" read-only="1" type="unsigned long"/>
        <property name="deltaX" read-only="1" type="double"/>
        <property name="deltaY" read-only="1" type="double"/>
        <property name="deltaZ" read-only="1" type="double"/>
      </properties>
    </interface>
    <interface name="Window" extends="EventTarget" primary-global="Window">
      <anonymous-methods>
        <method getter="1" type="object">
          <param name="name" type="DOMString"/>
        </method>
      </anonymous-methods>
      <methods>
        <method name="alert" type="void"/>
        <method name="alert" type="void">
          <param name="message" type="DOMString"/>
        </method>
        <method name="blur" type="void"/>
        <method name="cancelAnimationFrame" type="void">
          <param name="handle" type="unsigned long"/>
        </method>
        <method name="captureEvents" type="void"/>
        <method name="close" type="void"/>
        <method name="confirm" type="boolean">
          <param name="message" default="&quot;&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="focus" type="void"/>
        <method name="getComputedStyle" type="CSSStyleDeclaration">
          <param name="elt" type="Element"/>
          <param name="pseudoElt" optional="1" nullable="1" type="CSSOMString"/>
        </method>
        <method name="getSelection" nullable="1" type="Selection"/>
        <method name="matchMedia" type="MediaQueryList">
          <param name="query" type="DOMString"/>
        </method>
        <method name="moveBy" type="void">
          <param name="x" type="long"/>
          <param name="y" type="long"/>
        </method>
        <method name="moveTo" type="void">
          <param name="x" type="long"/>
          <param name="y" type="long"/>
        </method>
        <method name="open" nullable="1" type="WindowProxy">
          <param name="url" default="&quot;about:blank&quot;" optional="1" type="USVString"/>
          <param name="target" default="&quot;_blank&quot;" optional="1" type="DOMString"/>
          <param name="features" default="&quot;&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="postMessage" type="void">
          <param name="message" type="any"/>
          <param name="targetOrigin" type="USVString"/>
          <param name="transfer" default="[]" optional="1" type="sequence&lt;object&gt;"/>
        </method>
        <method name="print" type="void"/>
        <method name="prompt" nullable="1" type="DOMString">
          <param name="message" default="&quot;&quot;" optional="1" type="DOMString"/>
          <param name="default" default="&quot;&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="releaseEvents" type="void"/>
        <method name="requestAnimationFrame" type="unsigned long">
          <param name="callback" type="FrameRequestCallback"/>
        </method>
        <method name="resizeBy" type="void">
          <param name="x" type="long"/>
          <param name="y" type="long"/>
        </method>
        <method name="resizeTo" type="void">
          <param name="x" type="long"/>
          <param name="y" type="long"/>
        </method>
        <method name="scroll" type="void">
          <param name="options" optional="1" type="ScrollToOptions"/>
        </method>
        <method name="scroll" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="scrollBy" type="void">
          <param name="options" optional="1" type="ScrollToOptions"/>
        </method>
        <method name="scrollBy" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="scrollTo" type="void">
          <param name="options" optional="1" type="ScrollToOptions"/>
        </method>
        <method name="scrollTo" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="stop" type="void"/>
      </methods>
      <properties>
        <property name="applicationCache" read-only="1" type="ApplicationCache"/>
        <property name="audioWorklet" read-only="1" type="Worklet"/>
        <property name="closed" read-only="1" type="boolean"/>
        <property name="customElements" read-only="1" type="CustomElementRegistry"/>
        <property name="devicePixelRatio" read-only="1" type="double"/>
        <property name="document" read-only="1" type="Document"/>
        <property name="external" read-only="1" type="External"/>
        <property name="frameElement" read-only="1" nullable="1" type="Element"/>
        <property name="frames" read-only="1" type="WindowProxy"/>
        <property name="history" read-only="1" type="History"/>
        <property name="innerHeight" read-only="1" type="long"/>
        <property name="innerWidth" read-only="1" type="long"/>
        <property name="length" read-only="1" type="unsigned long"/>
        <property name="location" read-only="1" type="Location"/>
        <property name="locationbar" read-only="1" type="BarProp"/>
        <property name="menubar" read-only="1" type="BarProp"/>
        <property name="name" type="DOMString"/>
        <property name="navigator" read-only="1" type="Navigator"/>
        <property name="ondevicemotion" type="EventHandler" event-handler="devicemotion"/>
        <property name="ondeviceorientation" type="EventHandler" event-handler="deviceorientation"/>
        <property name="opener" type="any"/>
        <property name="outerHeight" read-only="1" type="long"/>
        <property name="outerWidth" read-only="1" type="long"/>
        <property name="pageXOffset" read-only="1" type="double"/>
        <property name="pageYOffset" read-only="1" type="double"/>
        <property name="parent" read-only="1" nullable="1" type="WindowProxy"/>
        <property name="personalbar" read-only="1" type="BarProp"/>
        <property name="screen" read-only="1" type="Screen"/>
        <property name="screenX" read-only="1" type="long"/>
        <property name="screenY" read-only="1" type="long"/>
        <property name="scrollbars" read-only="1" type="BarProp"/>
        <property name="scrollX" read-only="1" type="double"/>
        <property name="scrollY" read-only="1" type="double"/>
        <property name="self" read-only="1" type="WindowProxy"/>
        <property name="status" type="DOMString"/>
        <property name="statusbar" read-only="1" type="BarProp"/>
        <property name="toolbar" read-only="1" type="BarProp"/>
        <property name="top" read-only="1" nullable="1" type="WindowProxy"/>
        <property name="window" read-only="1" type="WindowProxy"/>
      </properties>
      <implements>GlobalEventHandlers</implements>
      <implements>WindowEventHandlers</implements>
      <implements>WindowOrWorkerGlobalScope</implements>
      <implements>WindowSessionStorage</implements>
      <implements>WindowLocalStorage</implements>
      <implements>GlobalPerformance</implements>
      <implements>GlobalCrypto</implements>
      <implements>SpeechSynthesisGetter</implements>
      <events>
        <event name="load" alternate-target="Document" dispatch="sync" follows="DOMContentLoaded readystatechange" type="Event"/>
        <event name="SVGUnload" dispatch="sync" type="Event"/>
        <event name="unload" dispatch="sync" follows="beforeunload" type="Event"/>
        <event name="beforeunload" cancelable="1" dispatch="sync" precedes="unload" type="BeforeUnloadEvent"/>
        <event name="hashchange" dispatch="async" type="HashChangeEvent"/>
        <event name="popstate" dispatch="sync" type="PopStateEvent"/>
        <event name="SVGResize" dispatch="sync" type="Event"/>
        <event name="resize" dispatch="async" type="UIEvent"/>
        <event name="beforeprint" dispatch="sync" precedes="afterprint" type="Event"/>
        <event name="afterprint" dispatch="sync" follows="beforeprint" type="Event"/>
        <event name="focus" dispatch="sync" type="FocusEvent"/>
        <event name="blur" dispatch="sync" type="FocusEvent"/>
        <event name="storage" dispatch="sync" type="StorageEvent"/>
        <event name="error" dispatch="sync" type="ErrorEvent"/>
        <event name="message" dispatch="async" type="MessageEvent"/>
        <event name="orientationchange" dispatch="async" type="Event"/>
        <event name="deviceorientation" dispatch="sync" type="DeviceOrientationEvent"/>
        <event name="devicemotion" dispatch="sync" type="DeviceMotionEvent"/>
        <event name="compassneedscalibration" dispatch="async" type="Event"/>
        <event name="pageshow" dispatch="sync" type="PageTransitionEvent"/>
        <event name="pagehide" dispatch="sync" type="PageTransitionEvent"/>
        <event name="gamepadconnected" dispatch="sync" type="GamepadEvent"/>
        <event name="gamepaddisconnected" dispatch="sync" type="GamepadEvent"/>
      </events>
    </interface>
    <interface name="WindowClient" extends="Client" exposed="ServiceWorker">
      <methods>
        <method name="focus" type="Promise&lt;WindowClient&gt;"/>
        <method name="navigate" type="Promise&lt;WindowClient&gt;">
          <param name="url" type="USVString"/>
        </method>
      </methods>
      <properties>
        <property name="ancestorOrigins" read-only="1" type="FrozenArray&lt;USVString&gt;"/>
        <property name="focused" read-only="1" type="boolean"/>
        <property name="visibilityState" read-only="1" type="VisibilityState"/>
      </properties>
    </interface>
    <interface name="Worker" extends="EventTarget" exposed="Window Worker">
      <constructor>
        <param name="scriptURL" type="USVString"/>
        <param name="options" optional="1" type="WorkerOptions"/>
      </constructor>
      <methods>
        <method name="postMessage" type="void">
          <param name="message" type="any"/>
          <param name="transfer" default="[]" optional="1" type="sequence&lt;object&gt;"/>
        </method>
        <method name="terminate" type="void"/>
      </methods>
      <properties>
        <property name="onmessage" type="EventHandler" event-handler="message"/>
        <property name="onmessageerror" type="EventHandler" event-handler="messageerror"/>
      </properties>
      <implements>AbstractWorker</implements>
      <events>
        <event name="messageerror" type="MessageEvent"/>
        <event name="error" dispatch="async" skips-window="1" type="ErrorEvent"/>
        <event name="message" dispatch="async" skips-window="1" type="MessageEvent"/>
      </events>
    </interface>
    <interface name="WorkerGlobalScope" extends="EventTarget" exposed="Worker">
      <methods>
        <method name="importScripts" type="void">
          <param name="urls" type="USVString" variadic="1"/>
        </method>
      </methods>
      <properties>
        <property name="location" read-only="1" type="WorkerLocation"/>
        <property name="navigator" read-only="1" type="WorkerNavigator"/>
        <property name="onerror" type="OnErrorEventHandler" event-handler="error"/>
        <property name="onlanguagechange" type="EventHandler" event-handler="languagechange"/>
        <property name="onoffline" type="EventHandler" event-handler="offline"/>
        <property name="ononline" type="EventHandler" event-handler="online"/>
        <property name="onrejectionhandled" type="EventHandler" event-handler="rejectionhandled"/>
        <property name="onunhandledrejection" type="EventHandler" event-handler="unhandledrejection"/>
        <property name="self" read-only="1" type="WorkerGlobalScope"/>
      </properties>
      <implements>WindowOrWorkerGlobalScope</implements>
      <events>
        <event name="error" type="ErrorEvent"/>
        <event name="languagechange" type="Event"/>
        <event name="offline" type="Event"/>
        <event name="online" type="Event"/>
        <event name="rejectionhandled" type="PromiseRejectionEvent"/>
        <event name="unhandledrejection" type="PromiseRejectionEvent"/>
      </events>
      <implements>GlobalPerformance</implements>
      <implements>GlobalCrypto</implements>
    </interface>
    <interface name="WorkerLocation" extends="Object" exposed="Worker">
      <properties>
        <property name="hash" read-only="1" type="USVString"/>
        <property name="host" read-only="1" type="USVString"/>
        <property name="hostname" read-only="1" type="USVString"/>
        <property name="href" read-only="1" stringifier="1" type="USVString"/>
        <property name="origin" read-only="1" type="USVString"/>
        <property name="pathname" read-only="1" type="USVString"/>
        <property name="port" read-only="1" type="USVString"/>
        <property name="protocol" read-only="1" type="USVString"/>
        <property name="search" read-only="1" type="USVString"/>
      </properties>
    </interface>
    <interface name="WorkerNavigator" extends="Object" exposed="Worker">
      <implements>NavigatorID</implements>
      <implements>NavigatorLanguage</implements>
      <implements>NavigatorOnLine</implements>
      <implements>NavigatorConcurrentHardware</implements>
      <properties>
        <property name="serviceWorker" read-only="1" type="ServiceWorkerContainer"/>
      </properties>
    </interface>
    <interface name="Worklet" extends="Object">
      <methods>
        <method name="addModule" type="Promise&lt;void&gt;">
          <param name="moduleURL" type="USVString"/>
          <param name="options" optional="1" type="WorkletOptions"/>
        </method>
      </methods>
    </interface>
    <interface name="WorkletGlobalScope" extends="Object" exposed="Worklet"/>
    <interface name="XMLDocument" extends="Document" exposed="Window"/>
    <interface name="XMLHttpRequest" extends="XMLHttpRequestEventTarget" exposed="Window DedicatedWorker SharedWorker">
      <constructor/>
      <constants>
        <constant name="DONE" type="unsigned short" value="4"/>
        <constant name="HEADERS_RECEIVED" type="unsigned short" value="2"/>
        <constant name="LOADING" type="unsigned short" value="3"/>
        <constant name="OPENED" type="unsigned short" value="1"/>
        <constant name="UNSENT" type="unsigned short" value="0"/>
      </constants>
      <methods>
        <method name="abort" type="void"/>
        <method name="getAllResponseHeaders" type="ByteString"/>
        <method name="getResponseHeader" nullable="1" type="ByteString">
          <param name="name" type="ByteString"/>
        </method>
        <method name="open" type="void">
          <param name="method" type="ByteString"/>
          <param name="url" type="USVString"/>
        </method>
        <method name="open" type="void">
          <param name="method" type="ByteString"/>
          <param name="url" type="USVString"/>
          <param name="async" type="boolean"/>
          <param name="username" default="null" optional="1" nullable="1" type="USVString"/>
          <param name="password" default="null" optional="1" nullable="1" type="USVString"/>
        </method>
        <method name="overrideMimeType" type="void">
          <param name="mime" type="DOMString"/>
        </method>
        <method name="send" type="void">
          <param name="body" default="null" optional="1" nullable="1" type="(Document or BodyInit)"/>
        </method>
        <method name="setRequestHeader" type="void">
          <param name="name" type="ByteString"/>
          <param name="value" type="ByteString"/>
        </method>
      </methods>
      <properties>
        <property name="onreadystatechange" type="EventHandler" event-handler="readystatechange"/>
        <property name="readyState" read-only="1" type="unsigned short"/>
        <property name="response" read-only="1" type="any"/>
        <property name="responseText" read-only="1" type="USVString"/>
        <property name="responseType" type="XMLHttpRequestResponseType"/>
        <property name="responseURL" read-only="1" type="USVString"/>
        <property name="responseXML" read-only="1" nullable="1" type="Document" exposed="Window"/>
        <property name="status" read-only="1" type="unsigned short"/>
        <property name="statusText" read-only="1" type="ByteString"/>
        <property name="timeout" type="unsigned long"/>
        <property name="upload" read-only="1" type="XMLHttpRequestUpload"/>
        <property name="withCredentials" type="boolean"/>
      </properties>
      <events>
        <event name="readystatechange" dispatch="sync-or-async" precedes="load" skips-window="1" type="Event"/>
        <event name="load" dispatch="sync-or-async" follows="progress readystatechange" precedes="loadend" skips-window="1" type="ProgressEvent"/>
        <event name="timeout" dispatch="sync-or-async" skips-window="1" type="Event"/>
        <event name="progress" dispatch="sync-or-async" follows="readystatechange" precedes="load" skips-window="1" type="ProgressEvent"/>
        <event name="abort" dispatch="sync-or-async" skips-window="1" type="Event"/>
        <event name="error" dispatch="sync-or-async" skips-window="1" type="Event"/>
        <event name="loadstart" dispatch="sync-or-async" precedes="readystatechange" skips-window="1" type="ProgressEvent"/>
        <event name="loadend" dispatch="sync-or-async" follows="load" skips-window="1" type="ProgressEvent"/>
      </events>
    </interface>
    <interface name="XMLHttpRequestEventTarget" extends="EventTarget" exposed="Window DedicatedWorker SharedWorker">
      <properties>
        <property name="onabort" type="EventHandler" event-handler="abort"/>
        <property name="onerror" type="EventHandler" event-handler="error"/>
        <property name="onload" type="EventHandler" event-handler="load"/>
        <property name="onloadend" type="EventHandler" event-handler="loadend"/>
        <property name="onloadstart" type="EventHandler" event-handler="loadstart"/>
        <property name="onprogress" type="EventHandler" event-handler="progress"/>
        <property name="ontimeout" type="EventHandler" event-handler="timeout"/>
      </properties>
    </interface>
    <interface name="XMLHttpRequestUpload" extends="XMLHttpRequestEventTarget" exposed="Window DedicatedWorker SharedWorker">
      <events>
        <event name="readystatechange" dispatch="sync-or-async" follows="loadstart" precedes="progress" skips-window="1" type="ProgressEvent"/>
        <event name="progress" dispatch="sync-or-async" follows="readystatechange" precedes="load" skips-window="1" type="ProgressEvent"/>
        <event name="abort" dispatch="sync-or-async" skips-window="1" type="ProgressEvent"/>
        <event name="error" dispatch="sync-or-async" skips-window="1" type="ProgressEvent"/>
        <event name="load" dispatch="sync-or-async" follows="progress" precedes="loadend" skips-window="1" type="ProgressEvent"/>
        <event name="loadstart" dispatch="sync-or-async" precedes="readystatechange" skips-window="1" type="ProgressEvent"/>
        <event name="loadend" dispatch="sync-or-async" follows="load" skips-window="1" type="ProgressEvent"/>
        <event name="timeout" dispatch="sync-or-async" skips-window="1" type="ProgressEvent"/>
      </events>
    </interface>
    <interface name="XMLSerializer" extends="Object">
      <constructor/>
      <methods>
        <method name="serializeToString" type="DOMString">
          <param name="root" type="Node"/>
        </method>
      </methods>
    </interface>
  </interfaces>
  <mixin-interfaces>
    <interface name="AbstractWorker" extends="Object" no-interface-object="1" exposed="Window Worker">
      <properties>
        <property name="onerror" type="EventHandler" event-handler="error"/>
      </properties>
    </interface>
    <interface name="ANGLE_instanced_arrays" extends="Object" no-interface-object="1">
      <constants>
        <constant name="VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE" type="GLenum" value="35070"/>
      </constants>
      <methods>
        <method name="drawArraysInstancedANGLE" type="void">
          <param name="mode" type="GLenum"/>
          <param name="first" type="GLint"/>
          <param name="count" type="GLsizei"/>
          <param name="primcount" type="GLsizei"/>
        </method>
        <method name="drawElementsInstancedANGLE" type="void">
          <param name="mode" type="GLenum"/>
          <param name="count" type="GLsizei"/>
          <param name="type" type="GLenum"/>
          <param name="offset" type="GLintptr"/>
          <param name="primcount" type="GLsizei"/>
        </method>
        <method name="vertexAttribDivisorANGLE" type="void">
          <param name="index" type="GLuint"/>
          <param name="divisor" type="GLuint"/>
        </method>
      </methods>
    </interface>
    <interface name="Body" extends="Object" no-interface-object="1" exposed="Window Worker">
      <methods>
        <method name="arrayBuffer" type="Promise&lt;ArrayBuffer&gt;"/>
        <method name="blob" type="Promise&lt;Blob&gt;"/>
        <method name="formData" type="Promise&lt;FormData&gt;"/>
        <method name="json" type="Promise&lt;any&gt;"/>
        <method name="text" type="Promise&lt;USVString&gt;"/>
      </methods>
      <properties>
        <property name="body" read-only="1" nullable="1" type="ReadableStream"/>
        <property name="bodyUsed" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="CanvasCompositing" extends="Object" no-interface-object="1" exposed="Window Worker">
      <properties>
        <property name="globalAlpha" type="unrestricted double"/>
        <property name="globalCompositeOperation" type="DOMString"/>
      </properties>
    </interface>
    <interface name="CanvasDrawImage" extends="Object" no-interface-object="1" exposed="Window Worker">
      <methods>
        <method name="drawImage" type="void">
          <param name="image" type="CanvasImageSource"/>
          <param name="dx" type="unrestricted double"/>
          <param name="dy" type="unrestricted double"/>
        </method>
        <method name="drawImage" type="void">
          <param name="image" type="CanvasImageSource"/>
          <param name="dx" type="unrestricted double"/>
          <param name="dy" type="unrestricted double"/>
          <param name="dw" type="unrestricted double"/>
          <param name="dh" type="unrestricted double"/>
        </method>
        <method name="drawImage" type="void">
          <param name="image" type="CanvasImageSource"/>
          <param name="sx" type="unrestricted double"/>
          <param name="sy" type="unrestricted double"/>
          <param name="sw" type="unrestricted double"/>
          <param name="sh" type="unrestricted double"/>
          <param name="dx" type="unrestricted double"/>
          <param name="dy" type="unrestricted double"/>
          <param name="dw" type="unrestricted double"/>
          <param name="dh" type="unrestricted double"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasDrawPath" extends="Object" no-interface-object="1" exposed="Window Worker">
      <methods>
        <method name="beginPath" type="void"/>
        <method name="clip" type="void">
          <param name="fillRule" default="&quot;nonzero&quot;" optional="1" type="CanvasFillRule"/>
        </method>
        <method name="clip" type="void">
          <param name="path" type="Path2D"/>
          <param name="fillRule" default="&quot;nonzero&quot;" optional="1" type="CanvasFillRule"/>
        </method>
        <method name="fill" type="void">
          <param name="path" type="Path2D"/>
          <param name="fillRule" default="&quot;nonzero&quot;" optional="1" type="CanvasFillRule"/>
        </method>
        <method name="fill" type="void">
          <param name="fillRule" default="&quot;nonzero&quot;" optional="1" type="CanvasFillRule"/>
        </method>
        <method name="isPointInPath" type="boolean">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
          <param name="fillRule" default="&quot;nonzero&quot;" optional="1" type="CanvasFillRule"/>
        </method>
        <method name="isPointInPath" type="boolean">
          <param name="path" type="Path2D"/>
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
          <param name="fillRule" default="&quot;nonzero&quot;" optional="1" type="CanvasFillRule"/>
        </method>
        <method name="isPointInStroke" type="boolean">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="isPointInStroke" type="boolean">
          <param name="path" type="Path2D"/>
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="resetClip" type="void"/>
        <method name="stroke" type="void"/>
        <method name="stroke" type="void">
          <param name="path" type="Path2D"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasFillStrokeStyles" extends="Object" no-interface-object="1" exposed="Window Worker">
      <methods>
        <method name="createLinearGradient" type="CanvasGradient">
          <param name="x0" type="double"/>
          <param name="y0" type="double"/>
          <param name="x1" type="double"/>
          <param name="y1" type="double"/>
        </method>
        <method name="createPattern" nullable="1" type="CanvasPattern">
          <param name="image" type="CanvasImageSource"/>
          <param name="repetition" type="DOMString"/>
        </method>
        <method name="createRadialGradient" type="CanvasGradient">
          <param name="x0" type="double"/>
          <param name="y0" type="double"/>
          <param name="r0" type="double"/>
          <param name="x1" type="double"/>
          <param name="y1" type="double"/>
          <param name="r1" type="double"/>
        </method>
      </methods>
      <properties>
        <property name="fillStyle" type="(DOMString or CanvasGradient or CanvasPattern)"/>
        <property name="strokeStyle" type="(DOMString or CanvasGradient or CanvasPattern)"/>
      </properties>
    </interface>
    <interface name="CanvasFilters" extends="Object" no-interface-object="1" exposed="Window Worker">
      <properties>
        <property name="filter" type="DOMString"/>
      </properties>
    </interface>
    <interface name="CanvasImageData" extends="Object" no-interface-object="1" exposed="Window Worker">
      <methods>
        <method name="createImageData" type="ImageData">
          <param name="sw" type="long"/>
          <param name="sh" type="long"/>
        </method>
        <method name="createImageData" type="ImageData">
          <param name="imagedata" type="ImageData"/>
        </method>
        <method name="getImageData" type="ImageData">
          <param name="sx" type="long"/>
          <param name="sy" type="long"/>
          <param name="sw" type="long"/>
          <param name="sh" type="long"/>
        </method>
        <method name="putImageData" type="void">
          <param name="imagedata" type="ImageData"/>
          <param name="dx" type="long"/>
          <param name="dy" type="long"/>
        </method>
        <method name="putImageData" type="void">
          <param name="imagedata" type="ImageData"/>
          <param name="dx" type="long"/>
          <param name="dy" type="long"/>
          <param name="dirtyX" type="long"/>
          <param name="dirtyY" type="long"/>
          <param name="dirtyWidth" type="long"/>
          <param name="dirtyHeight" type="long"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasImageSmoothing" extends="Object" no-interface-object="1" exposed="Window Worker">
      <properties>
        <property name="imageSmoothingEnabled" type="boolean"/>
        <property name="imageSmoothingQuality" type="ImageSmoothingQuality"/>
      </properties>
    </interface>
    <interface name="CanvasPath" extends="Object" no-interface-object="1" exposed="Window Worker">
      <methods>
        <method name="arc" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
          <param name="radius" type="unrestricted double"/>
          <param name="startAngle" type="unrestricted double"/>
          <param name="endAngle" type="unrestricted double"/>
          <param name="anticlockwise" default="false" optional="1" type="boolean"/>
        </method>
        <method name="arcTo" type="void">
          <param name="x1" type="unrestricted double"/>
          <param name="y1" type="unrestricted double"/>
          <param name="x2" type="unrestricted double"/>
          <param name="y2" type="unrestricted double"/>
          <param name="radius" type="unrestricted double"/>
        </method>
        <method name="arcTo" type="void">
          <param name="x1" type="unrestricted double"/>
          <param name="y1" type="unrestricted double"/>
          <param name="x2" type="unrestricted double"/>
          <param name="y2" type="unrestricted double"/>
          <param name="radiusX" type="unrestricted double"/>
          <param name="radiusY" type="unrestricted double"/>
          <param name="rotation" type="unrestricted double"/>
        </method>
        <method name="bezierCurveTo" type="void">
          <param name="cp1x" type="unrestricted double"/>
          <param name="cp1y" type="unrestricted double"/>
          <param name="cp2x" type="unrestricted double"/>
          <param name="cp2y" type="unrestricted double"/>
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="closePath" type="void"/>
        <method name="ellipse" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
          <param name="radiusX" type="unrestricted double"/>
          <param name="radiusY" type="unrestricted double"/>
          <param name="rotation" type="unrestricted double"/>
          <param name="startAngle" type="unrestricted double"/>
          <param name="endAngle" type="unrestricted double"/>
          <param name="anticlockwise" default="false" optional="1" type="boolean"/>
        </method>
        <method name="lineTo" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="moveTo" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="quadraticCurveTo" type="void">
          <param name="cpx" type="unrestricted double"/>
          <param name="cpy" type="unrestricted double"/>
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="rect" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
          <param name="w" type="unrestricted double"/>
          <param name="h" type="unrestricted double"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasPathDrawingStyles" extends="Object" no-interface-object="1" exposed="Window Worker">
      <methods>
        <method name="getLineDash" type="sequence&lt;unrestricted double&gt;"/>
        <method name="setLineDash" type="void">
          <param name="segments" type="sequence&lt;unrestricted double&gt;"/>
        </method>
      </methods>
      <properties>
        <property name="lineCap" type="CanvasLineCap"/>
        <property name="lineDashOffset" type="unrestricted double"/>
        <property name="lineJoin" type="CanvasLineJoin"/>
        <property name="lineWidth" type="unrestricted double"/>
        <property name="miterLimit" type="unrestricted double"/>
      </properties>
    </interface>
    <interface name="CanvasRect" extends="Object" no-interface-object="1" exposed="Window Worker">
      <methods>
        <method name="clearRect" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
          <param name="w" type="unrestricted double"/>
          <param name="h" type="unrestricted double"/>
        </method>
        <method name="fillRect" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
          <param name="w" type="unrestricted double"/>
          <param name="h" type="unrestricted double"/>
        </method>
        <method name="strokeRect" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
          <param name="w" type="unrestricted double"/>
          <param name="h" type="unrestricted double"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasShadowStyles" extends="Object" no-interface-object="1" exposed="Window Worker">
      <properties>
        <property name="shadowBlur" type="unrestricted double"/>
        <property name="shadowColor" type="DOMString"/>
        <property name="shadowOffsetX" type="unrestricted double"/>
        <property name="shadowOffsetY" type="unrestricted double"/>
      </properties>
    </interface>
    <interface name="CanvasState" extends="Object" no-interface-object="1" exposed="Window Worker">
      <methods>
        <method name="restore" type="void"/>
        <method name="save" type="void"/>
      </methods>
    </interface>
    <interface name="CanvasText" extends="Object" no-interface-object="1">
      <methods>
        <method name="fillText" type="void">
          <param name="text" type="DOMString"/>
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
          <param name="maxWidth" optional="1" type="unrestricted double"/>
        </method>
        <method name="measureText" type="TextMetrics">
          <param name="text" type="DOMString"/>
        </method>
        <method name="strokeText" type="void">
          <param name="text" type="DOMString"/>
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
          <param name="maxWidth" optional="1" type="unrestricted double"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasTextDrawingStyles" extends="Object" no-interface-object="1">
      <properties>
        <property name="direction" type="CanvasDirection"/>
        <property name="font" type="DOMString"/>
        <property name="textAlign" type="CanvasTextAlign"/>
        <property name="textBaseline" type="CanvasTextBaseline"/>
      </properties>
    </interface>
    <interface name="CanvasTransform" extends="Object" no-interface-object="1" exposed="Window Worker">
      <methods>
        <method name="getTransform" type="DOMMatrix"/>
        <method name="resetTransform" type="void"/>
        <method name="rotate" type="void">
          <param name="angle" type="unrestricted double"/>
        </method>
        <method name="scale" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
        <method name="setTransform" type="void">
          <param name="a" type="unrestricted double"/>
          <param name="b" type="unrestricted double"/>
          <param name="c" type="unrestricted double"/>
          <param name="d" type="unrestricted double"/>
          <param name="e" type="unrestricted double"/>
          <param name="f" type="unrestricted double"/>
        </method>
        <method name="setTransform" type="void">
          <param name="transform" optional="1" type="DOMMatrixInit"/>
        </method>
        <method name="transform" type="void">
          <param name="a" type="unrestricted double"/>
          <param name="b" type="unrestricted double"/>
          <param name="c" type="unrestricted double"/>
          <param name="d" type="unrestricted double"/>
          <param name="e" type="unrestricted double"/>
          <param name="f" type="unrestricted double"/>
        </method>
        <method name="translate" type="void">
          <param name="x" type="unrestricted double"/>
          <param name="y" type="unrestricted double"/>
        </method>
      </methods>
    </interface>
    <interface name="CanvasUserInterface" extends="Object" no-interface-object="1">
      <methods>
        <method name="drawFocusIfNeeded" type="void">
          <param name="element" type="Element"/>
        </method>
        <method name="drawFocusIfNeeded" type="void">
          <param name="path" type="Path2D"/>
          <param name="element" type="Element"/>
        </method>
        <method name="scrollPathIntoView" type="void"/>
        <method name="scrollPathIntoView" type="void">
          <param name="path" type="Path2D"/>
        </method>
      </methods>
    </interface>
    <interface name="ChildNode" extends="Object" no-interface-object="1" exposed="Window">
      <methods>
        <method name="after" type="void">
          <param name="nodes" type="(Node or DOMString)" variadic="1"/>
        </method>
        <method name="before" type="void">
          <param name="nodes" type="(Node or DOMString)" variadic="1"/>
        </method>
        <method name="remove" type="void"/>
        <method name="replaceWith" type="void">
          <param name="nodes" type="(Node or DOMString)" variadic="1"/>
        </method>
      </methods>
    </interface>
    <interface name="ConstrainablePattern" extends="Object" no-interface-object="1">
      <methods>
        <method name="applyConstraints" type="Promise&lt;void&gt;">
          <param name="constraints" optional="1" type="Constraints"/>
        </method>
        <method name="getCapabilities" type="Capabilities"/>
        <method name="getConstraints" type="Constraints"/>
        <method name="getSettings" type="Settings"/>
      </methods>
      <properties>
        <property name="onoverconstrained" type="EventHandler" event-handler="overconstrained"/>
      </properties>
      <events>
        <event name="overconstrained" type="OverconstrainedErrorEvent"/>
      </events>
    </interface>
    <interface name="Coordinates" extends="Object" no-interface-object="1">
      <properties>
        <property name="accuracy" read-only="1" type="double"/>
        <property name="altitude" read-only="1" nullable="1" type="double"/>
        <property name="altitudeAccuracy" read-only="1" nullable="1" type="double"/>
        <property name="heading" read-only="1" nullable="1" type="double"/>
        <property name="latitude" read-only="1" type="double"/>
        <property name="longitude" read-only="1" type="double"/>
        <property name="speed" read-only="1" nullable="1" type="double"/>
      </properties>
    </interface>
    <interface name="CSSPseudoElement" extends="Object" no-interface-object="1" sn:partial="1">
      <implements>GeometryUtils</implements>
    </interface>
    <interface name="DeviceAcceleration" extends="Object" no-interface-object="1">
      <properties>
        <property name="x" read-only="1" nullable="1" type="double"/>
        <property name="y" read-only="1" nullable="1" type="double"/>
        <property name="z" read-only="1" nullable="1" type="double"/>
      </properties>
    </interface>
    <interface name="DeviceRotationRate" extends="Object" no-interface-object="1">
      <properties>
        <property name="alpha" read-only="1" nullable="1" type="double"/>
        <property name="beta" read-only="1" nullable="1" type="double"/>
        <property name="gamma" read-only="1" nullable="1" type="double"/>
      </properties>
    </interface>
    <interface name="DocumentAndElementEventHandlers" extends="Object" no-interface-object="1">
      <properties>
        <property name="oncopy" type="EventHandler" event-handler="copy"/>
        <property name="oncut" type="EventHandler" event-handler="cut"/>
        <property name="onpaste" type="EventHandler" event-handler="paste"/>
      </properties>
      <events>
        <event name="copy" type="Event"/>
        <event name="cut" type="Event"/>
        <event name="paste" type="Event"/>
      </events>
    </interface>
    <interface name="DocumentOrShadowRoot" extends="Object" no-interface-object="1" exposed="Window">
      <properties>
        <property name="fullscreenElement" read-only="1" nullable="1" type="Element"/>
      </properties>
    </interface>
    <interface name="ElementContentEditable" extends="Object" no-interface-object="1">
      <properties>
        <property name="contentEditable" type="DOMString"/>
        <property name="isContentEditable" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="ElementCSSInlineStyle" extends="Object" no-interface-object="1">
      <properties>
        <property name="style" read-only="1" type="CSSStyleDeclaration"/>
      </properties>
    </interface>
    <interface name="EXT_frag_depth" extends="Object" no-interface-object="1"/>
    <interface name="EXT_texture_filter_anisotropic" extends="Object" no-interface-object="1">
      <constants>
        <constant name="MAX_TEXTURE_MAX_ANISOTROPY_EXT" type="GLenum" value="34047"/>
        <constant name="TEXTURE_MAX_ANISOTROPY_EXT" type="GLenum" value="34046"/>
      </constants>
    </interface>
    <interface name="External" extends="Object" no-interface-object="1">
      <methods>
        <method name="AddSearchProvider" type="void"/>
        <method name="IsSearchProviderInstalled" type="void"/>
      </methods>
    </interface>
    <interface name="Geolocation" extends="Object" no-interface-object="1">
      <methods>
        <method name="clearWatch" type="void">
          <param name="watchId" type="long"/>
        </method>
        <method name="getCurrentPosition" type="void">
          <param name="successCallback" type="PositionCallback"/>
          <param name="errorCallback" optional="1" type="PositionErrorCallback"/>
          <param name="options" optional="1" type="PositionOptions"/>
        </method>
        <method name="watchPosition" type="long">
          <param name="successCallback" type="PositionCallback"/>
          <param name="errorCallback" optional="1" type="PositionErrorCallback"/>
          <param name="options" optional="1" type="PositionOptions"/>
        </method>
      </methods>
    </interface>
    <interface name="GeometryUtils" extends="Object" no-interface-object="1">
      <methods>
        <method name="convertPointFromNode" type="DOMPoint">
          <param name="point" type="DOMPointInit"/>
          <param name="from" type="GeometryNode"/>
          <param name="options" optional="1" type="ConvertCoordinateOptions"/>
        </method>
        <method name="convertQuadFromNode" type="DOMQuad">
          <param name="quad" type="DOMQuadInit"/>
          <param name="from" type="GeometryNode"/>
          <param name="options" optional="1" type="ConvertCoordinateOptions"/>
        </method>
        <method name="convertRectFromNode" type="DOMQuad">
          <param name="rect" type="DOMRectReadOnly"/>
          <param name="from" type="GeometryNode"/>
          <param name="options" optional="1" type="ConvertCoordinateOptions"/>
        </method>
        <method name="getBoxQuads" type="sequence&lt;DOMQuad&gt;">
          <param name="options" optional="1" type="BoxQuadOptions"/>
        </method>
      </methods>
    </interface>
    <interface name="GetSVGDocument" extends="Object" no-interface-object="1">
      <methods>
        <method name="getSVGDocument" type="Document"/>
      </methods>
    </interface>
    <interface name="GlobalCrypto" extends="Object" no-interface-object="1" exposed="Window Worker">
      <properties>
        <property name="crypto" read-only="1" type="Crypto"/>
      </properties>
    </interface>
    <interface name="GlobalEventHandlers" extends="Object" no-interface-object="1">
      <properties>
        <property name="onabort" type="EventHandler" event-handler="abort"/>
        <property name="onanimationcancel" type="EventHandler" event-handler="animationcancel"/>
        <property name="onanimationend" type="EventHandler" event-handler="animationend"/>
        <property name="onanimationiteration" type="EventHandler" event-handler="animationiteration"/>
        <property name="onanimationstart" type="EventHandler" event-handler="animationstart"/>
        <property name="onauxclick" type="EventHandler" event-handler="auxclick"/>
        <property name="onblur" type="EventHandler" event-handler="blur"/>
        <property name="oncancel" type="EventHandler" event-handler="cancel"/>
        <property name="oncanplay" type="EventHandler" event-handler="canplay"/>
        <property name="oncanplaythrough" type="EventHandler" event-handler="canplaythrough"/>
        <property name="onchange" type="EventHandler" event-handler="change"/>
        <property name="onclick" type="EventHandler" event-handler="click"/>
        <property name="onclose" type="EventHandler" event-handler="close"/>
        <property name="oncontextmenu" type="EventHandler" event-handler="contextmenu"/>
        <property name="oncuechange" type="EventHandler" event-handler="cuechange"/>
        <property name="ondblclick" type="EventHandler" event-handler="dblclick"/>
        <property name="ondrag" type="EventHandler" event-handler="drag"/>
        <property name="ondragend" type="EventHandler" event-handler="dragend"/>
        <property name="ondragenter" type="EventHandler" event-handler="dragenter"/>
        <property name="ondragexit" type="EventHandler" event-handler="dragexit"/>
        <property name="ondragleave" type="EventHandler" event-handler="dragleave"/>
        <property name="ondragover" type="EventHandler" event-handler="dragover"/>
        <property name="ondragstart" type="EventHandler" event-handler="dragstart"/>
        <property name="ondrop" type="EventHandler" event-handler="drop"/>
        <property name="ondurationchange" type="EventHandler" event-handler="durationchange"/>
        <property name="onemptied" type="EventHandler" event-handler="emptied"/>
        <property name="onended" type="EventHandler" event-handler="ended"/>
        <property name="onerror" type="OnErrorEventHandler" event-handler="error"/>
        <property name="onfocus" type="EventHandler" event-handler="focus"/>
        <property name="oninput" type="EventHandler" event-handler="input"/>
        <property name="oninvalid" type="EventHandler" event-handler="invalid"/>
        <property name="onkeydown" type="EventHandler" event-handler="keydown"/>
        <property name="onkeypress" type="EventHandler" event-handler="keypress"/>
        <property name="onkeyup" type="EventHandler" event-handler="keyup"/>
        <property name="onload" type="EventHandler" event-handler="load"/>
        <property name="onloadeddata" type="EventHandler" event-handler="loadeddata"/>
        <property name="onloadedmetadata" type="EventHandler" event-handler="loadedmetadata"/>
        <property name="onloadend" type="EventHandler" event-handler="loadend"/>
        <property name="onloadstart" type="EventHandler" event-handler="loadstart"/>
        <property name="onmousedown" type="EventHandler" event-handler="mousedown"/>
        <property name="onmouseenter" type="EventHandler" event-handler="mouseenter"/>
        <property name="onmouseleave" type="EventHandler" event-handler="mouseleave"/>
        <property name="onmousemove" type="EventHandler" event-handler="mousemove"/>
        <property name="onmouseout" type="EventHandler" event-handler="mouseout"/>
        <property name="onmouseover" type="EventHandler" event-handler="mouseover"/>
        <property name="onmouseup" type="EventHandler" event-handler="mouseup"/>
        <property name="onpause" type="EventHandler" event-handler="pause"/>
        <property name="onplay" type="EventHandler" event-handler="play"/>
        <property name="onplaying" type="EventHandler" event-handler="playing"/>
        <property name="onpointercancel" type="EventHandler" event-handler="pointercancel"/>
        <property name="onpointerdown" type="EventHandler" event-handler="pointerdown"/>
        <property name="onpointerenter" type="EventHandler" event-handler="pointerenter"/>
        <property name="onpointerleave" type="EventHandler" event-handler="pointerleave"/>
        <property name="onpointermove" type="EventHandler" event-handler="pointermove"/>
        <property name="onpointerout" type="EventHandler" event-handler="pointerout"/>
        <property name="onpointerover" type="EventHandler" event-handler="pointerover"/>
        <property name="onpointerup" type="EventHandler" event-handler="pointerup"/>
        <property name="onprogress" type="EventHandler" event-handler="progress"/>
        <property name="onratechange" type="EventHandler" event-handler="ratechange"/>
        <property name="onreset" type="EventHandler" event-handler="reset"/>
        <property name="onresize" type="EventHandler" event-handler="resize"/>
        <property name="onscroll" type="EventHandler" event-handler="scroll"/>
        <property name="onseeked" type="EventHandler" event-handler="seeked"/>
        <property name="onseeking" type="EventHandler" event-handler="seeking"/>
        <property name="onselect" type="EventHandler" event-handler="select"/>
        <property name="onselectionchange" type="EventHandler" event-handler="selectionchange"/>
        <property name="onselectstart" type="EventHandler" event-handler="selectstart"/>
        <property name="onshow" type="EventHandler" event-handler="show"/>
        <property name="onstalled" type="EventHandler" event-handler="stalled"/>
        <property name="onsubmit" type="EventHandler" event-handler="submit"/>
        <property name="onsuspend" type="EventHandler" event-handler="suspend"/>
        <property name="ontimeupdate" type="EventHandler" event-handler="timeupdate"/>
        <property name="ontoggle" type="EventHandler" event-handler="toggle"/>
        <property name="ontouchcancel" type="EventHandler" event-handler="touchcancel"/>
        <property name="ontouchend" type="EventHandler" event-handler="touchend"/>
        <property name="ontouchmove" type="EventHandler" event-handler="touchmove"/>
        <property name="ontouchstart" type="EventHandler" event-handler="touchstart"/>
        <property name="ontransitioncancel" type="EventHandler" event-handler="transitioncancel"/>
        <property name="ontransitionend" type="EventHandler" event-handler="transitionend"/>
        <property name="ontransitionrun" type="EventHandler" event-handler="transitionrun"/>
        <property name="ontransitionstart" type="EventHandler" event-handler="transitionstart"/>
        <property name="onvolumechange" type="EventHandler" event-handler="volumechange"/>
        <property name="onwaiting" type="EventHandler" event-handler="waiting"/>
        <property name="onwheel" type="EventHandler" event-handler="wheel"/>
      </properties>
      <events>
        <event name="abort" type="Event"/>
        <event name="auxclick" type="MouseEvent"/>
        <event name="blur" type="Event"/>
        <event name="cancel" type="Event"/>
        <event name="canplay" type="Event"/>
        <event name="canplaythrough" type="Event"/>
        <event name="change" type="Event"/>
        <event name="click" type="MouseEvent"/>
        <event name="close" type="Event"/>
        <event name="contextmenu" type="MouseEvent"/>
        <event name="cuechange" type="Event"/>
        <event name="dblclick" type="MouseEvent"/>
        <event name="drag" type="DragEvent"/>
        <event name="dragend" type="DragEvent"/>
        <event name="dragenter" type="DragEvent"/>
        <event name="dragexit" type="DragEvent"/>
        <event name="dragleave" type="DragEvent"/>
        <event name="dragover" type="DragEvent"/>
        <event name="dragstart" type="DragEvent"/>
        <event name="drop" type="DragEvent"/>
        <event name="durationchange" type="Event"/>
        <event name="emptied" type="Event"/>
        <event name="ended" type="Event"/>
        <event name="error" type="Event"/>
        <event name="focus" type="Event"/>
        <event name="input" type="Event"/>
        <event name="invalid" type="Event"/>
        <event name="keydown" type="KeyboardEvent"/>
        <event name="keypress" type="KeyboardEvent"/>
        <event name="keyup" type="KeyboardEvent"/>
        <event name="load" type="Event"/>
        <event name="loadeddata" type="Event"/>
        <event name="loadedmetadata" type="Event"/>
        <event name="loadend" type="Event"/>
        <event name="loadstart" type="Event"/>
        <event name="mousedown" type="MouseEvent"/>
        <event name="mouseenter" type="MouseEvent"/>
        <event name="mouseleave" type="MouseEvent"/>
        <event name="mousemove" type="MouseEvent"/>
        <event name="mouseout" type="MouseEvent"/>
        <event name="mouseover" type="MouseEvent"/>
        <event name="mouseup" type="MouseEvent"/>
        <event name="pause" type="Event"/>
        <event name="play" type="Event"/>
        <event name="playing" type="Event"/>
        <event name="progress" type="Event"/>
        <event name="ratechange" type="Event"/>
        <event name="reset" type="Event"/>
        <event name="resize" type="Event"/>
        <event name="scroll" type="Event"/>
        <event name="seeked" type="Event"/>
        <event name="seeking" type="Event"/>
        <event name="select" type="Event"/>
        <event name="show" type="RelatedEvent"/>
        <event name="stalled" type="Event"/>
        <event name="submit" type="Event"/>
        <event name="suspend" type="Event"/>
        <event name="timeupdate" type="Event"/>
        <event name="toggle" type="Event"/>
        <event name="volumechange" type="Event"/>
        <event name="waiting" type="Event"/>
        <event name="wheel" type="WheelEvent"/>
        <event name="animationcancel" type="AnimationEvent"/>
        <event name="animationend" type="AnimationEvent"/>
        <event name="animationiteration" type="AnimationEvent"/>
        <event name="animationstart" type="AnimationEvent"/>
        <event name="transitioncancel" type="TransitionEvent"/>
        <event name="transitionend" type="TransitionEvent"/>
        <event name="transitionrun" type="TransitionEvent"/>
        <event name="transitionstart" type="TransitionEvent"/>
        <event name="selectionchange" type="Event"/>
        <event name="selectstart" type="Event"/>
        <event name="touchcancel" type="TouchEvent"/>
        <event name="touchend" type="TouchEvent"/>
        <event name="touchmove" type="TouchEvent"/>
        <event name="touchstart" type="TouchEvent"/>
      </events>
    </interface>
    <interface name="GlobalPerformance" extends="Object" no-interface-object="1" exposed="Window Worker">
      <properties>
        <property name="performance" read-only="1" type="Performance"/>
      </properties>
    </interface>
    <interface name="HTMLHyperlinkElementUtils" extends="Object" no-interface-object="1">
      <properties>
        <property name="hash" type="USVString"/>
        <property name="host" type="USVString"/>
        <property name="hostname" type="USVString"/>
        <property name="href" stringifier="1" type="USVString"/>
        <property name="origin" read-only="1" type="USVString"/>
        <property name="password" type="USVString"/>
        <property name="pathname" type="USVString"/>
        <property name="port" type="USVString"/>
        <property name="protocol" type="USVString"/>
        <property name="search" type="USVString"/>
        <property name="username" type="USVString"/>
      </properties>
    </interface>
    <interface name="LinkStyle" extends="Object" no-interface-object="1">
      <properties>
        <property name="sheet" read-only="1" nullable="1" type="StyleSheet"/>
      </properties>
    </interface>
    <interface name="NavigatorConcurrentHardware" extends="Object" no-interface-object="1" exposed="Window Worker">
      <properties>
        <property name="hardwareConcurrency" read-only="1" type="unsigned long long"/>
      </properties>
    </interface>
    <interface name="NavigatorContentUtils" extends="Object" no-interface-object="1">
      <methods>
        <method name="isContentHandlerRegistered" type="DOMString">
          <param name="mimeType" type="DOMString"/>
          <param name="url" type="USVString"/>
        </method>
        <method name="isProtocolHandlerRegistered" type="DOMString">
          <param name="scheme" type="DOMString"/>
          <param name="url" type="USVString"/>
        </method>
        <method name="registerContentHandler" type="void">
          <param name="mimeType" type="DOMString"/>
          <param name="url" type="USVString"/>
          <param name="title" type="DOMString"/>
        </method>
        <method name="registerProtocolHandler" type="void">
          <param name="scheme" type="DOMString"/>
          <param name="url" type="USVString"/>
          <param name="title" type="DOMString"/>
        </method>
        <method name="unregisterContentHandler" type="void">
          <param name="mimeType" type="DOMString"/>
          <param name="url" type="USVString"/>
        </method>
        <method name="unregisterProtocolHandler" type="void">
          <param name="scheme" type="DOMString"/>
          <param name="url" type="USVString"/>
        </method>
      </methods>
    </interface>
    <interface name="NavigatorCookies" extends="Object" no-interface-object="1">
      <properties>
        <property name="cookieEnabled" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="NavigatorID" extends="Object" no-interface-object="1" exposed="Window Worker">
      <properties>
        <property name="appCodeName" read-only="1" type="DOMString"/>
        <property name="appName" read-only="1" type="DOMString"/>
        <property name="appVersion" read-only="1" type="DOMString"/>
        <property name="oscpu" read-only="1" type="DOMString" exposed="Window"/>
        <property name="platform" read-only="1" type="DOMString"/>
        <property name="product" read-only="1" type="DOMString"/>
        <property name="productSub" read-only="1" type="DOMString" exposed="Window"/>
        <property name="userAgent" read-only="1" type="DOMString"/>
        <property name="vendor" read-only="1" type="DOMString" exposed="Window"/>
        <property name="vendorSub" read-only="1" type="DOMString" exposed="Window"/>
      </properties>
      <methods>
        <method name="taintEnabled" type="boolean" exposed="Window"/>
      </methods>
    </interface>
    <interface name="NavigatorLanguage" extends="Object" no-interface-object="1" exposed="Window Worker">
      <properties>
        <property name="language" read-only="1" type="DOMString"/>
        <property name="languages" read-only="1" type="FrozenArray&lt;DOMString&gt;"/>
      </properties>
    </interface>
    <interface name="NavigatorOnLine" extends="Object" no-interface-object="1" exposed="Window Worker">
      <properties>
        <property name="onLine" read-only="1" type="boolean"/>
      </properties>
    </interface>
    <interface name="NavigatorPlugins" extends="Object" no-interface-object="1">
      <methods>
        <method name="javaEnabled" type="boolean"/>
      </methods>
      <properties>
        <property name="mimeTypes" read-only="1" type="MimeTypeArray"/>
        <property name="plugins" read-only="1" type="PluginArray"/>
      </properties>
    </interface>
    <interface name="NavigatorUserMedia" extends="Object" exposed="Window" no-interface-object="1">
      <properties>
        <property name="mediaDevices" read-only="1" type="MediaDevices"/>
      </properties>
      <methods>
        <method name="getUserMedia" type="void">
          <param name="constraints" type="MediaStreamConstraints"/>
          <param name="successCallback" type="NavigatorUserMediaSuccessCallback"/>
          <param name="errorCallback" type="NavigatorUserMediaErrorCallback"/>
        </method>
      </methods>
    </interface>
    <interface name="NonDocumentTypeChildNode" extends="Object" no-interface-object="1" exposed="Window">
      <properties>
        <property name="nextElementSibling" read-only="1" nullable="1" type="Element"/>
        <property name="previousElementSibling" read-only="1" nullable="1" type="Element"/>
      </properties>
    </interface>
    <interface name="NonElementParentNode" extends="Object" no-interface-object="1" exposed="Window">
      <methods>
        <method name="getElementById" nullable="1" type="Element">
          <param name="elementId" type="DOMString"/>
        </method>
      </methods>
    </interface>
    <interface name="OES_element_index_uint" extends="Object" no-interface-object="1"/>
    <interface name="OES_standard_derivatives" extends="Object" no-interface-object="1">
      <constants>
        <constant name="FRAGMENT_SHADER_DERIVATIVE_HINT_OES" type="GLenum" value="35723"/>
      </constants>
    </interface>
    <interface name="OES_texture_float" extends="Object" no-interface-object="1"/>
    <interface name="OES_texture_float_linear" extends="Object" no-interface-object="1"/>
    <interface name="OES_texture_half_float" extends="Object" no-interface-object="1">
      <constants>
        <constant name="HALF_FLOAT_OES" type="GLenum" value="36193"/>
      </constants>
    </interface>
    <interface name="OES_texture_half_float_linear" extends="Object" no-interface-object="1"/>
    <interface name="ParentNode" extends="Object" no-interface-object="1" exposed="Window">
      <methods>
        <method name="append" type="void">
          <param name="nodes" type="(Node or DOMString)" variadic="1"/>
        </method>
        <method name="prepend" type="void">
          <param name="nodes" type="(Node or DOMString)" variadic="1"/>
        </method>
        <method name="querySelector" nullable="1" type="Element">
          <param name="selectors" type="DOMString"/>
        </method>
        <method name="querySelectorAll" type="NodeList">
          <param name="selectors" type="DOMString"/>
        </method>
      </methods>
      <properties>
        <property name="childElementCount" read-only="1" type="unsigned long"/>
        <property name="children" read-only="1" type="HTMLCollection"/>
        <property name="firstElementChild" read-only="1" nullable="1" type="Element"/>
        <property name="lastElementChild" read-only="1" nullable="1" type="Element"/>
      </properties>
    </interface>
    <interface name="Position" extends="Object" no-interface-object="1">
      <properties>
        <property name="coords" read-only="1" type="Coordinates"/>
        <property name="timestamp" read-only="1" type="DOMTimeStamp"/>
      </properties>
    </interface>
    <interface name="PositionError" extends="Object" no-interface-object="1">
      <constants>
        <constant name="PERMISSION_DENIED" type="unsigned short" value="1"/>
        <constant name="POSITION_UNAVAILABLE" type="unsigned short" value="2"/>
        <constant name="TIMEOUT" type="unsigned short" value="3"/>
      </constants>
      <properties>
        <property name="code" read-only="1" type="unsigned short"/>
        <property name="message" read-only="1" type="DOMString"/>
      </properties>
    </interface>
    <interface name="RTCDtmfSender" no-interface-object="1" sn:partial="1">
      <events>
        <event name="tonechange" dispatch="sync" skips-window="1" type="RTCDTMFToneChangeEvent"/>
      </events>
    </interface>
    <interface name="RTCIceGatherer" no-interface-object="1" sn:partial="1">
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="RTCSrtpSdesTransport" no-interface-object="1" sn:partial="1">
      <events>
        <event name="error" dispatch="sync" skips-window="1" type="Event"/>
      </events>
    </interface>
    <interface name="Slotable" extends="Object" no-interface-object="1" exposed="Window">
      <properties>
        <property name="assignedSlot" read-only="1" nullable="1" type="HTMLSlotElement"/>
      </properties>
    </interface>
    <interface name="SpeechSynthesisGetter" extends="Object" no-interface-object="1">
      <properties>
        <property name="speechSynthesis" read-only="1" type="SpeechSynthesis"/>
      </properties>
    </interface>
    <interface name="SVGAnimatedPoints" extends="Object" no-interface-object="1">
      <properties>
        <property name="animatedPoints" read-only="1" type="SVGPointList"/>
        <property name="points" read-only="1" type="SVGPointList"/>
      </properties>
    </interface>
    <interface name="SVGElementInstance" extends="Object" no-interface-object="1">
      <properties>
        <property name="correspondingElement" read-only="1" nullable="1" type="SVGElement"/>
        <property name="correspondingUseElement" read-only="1" nullable="1" type="SVGUseElement"/>
      </properties>
    </interface>
    <interface name="SVGFilterPrimitiveStandardAttributes" extends="Object" no-interface-object="1">
      <properties>
        <property name="height" read-only="1" type="SVGAnimatedLength"/>
        <property name="result" read-only="1" type="SVGAnimatedString"/>
        <property name="width" read-only="1" type="SVGAnimatedLength"/>
        <property name="x" read-only="1" type="SVGAnimatedLength"/>
        <property name="y" read-only="1" type="SVGAnimatedLength"/>
      </properties>
    </interface>
    <interface name="SVGFitToViewBox" extends="Object" no-interface-object="1">
      <properties>
        <property name="preserveAspectRatio" read-only="1" type="SVGAnimatedPreserveAspectRatio"/>
        <property name="viewBox" read-only="1" type="SVGAnimatedRect"/>
      </properties>
    </interface>
    <interface name="SVGTests" extends="Object" no-interface-object="1">
      <properties>
        <property name="requiredExtensions" read-only="1" type="SVGStringList"/>
        <property name="systemLanguage" read-only="1" type="SVGStringList"/>
      </properties>
    </interface>
    <interface name="SVGURIReference" extends="Object" no-interface-object="1">
      <properties>
        <property name="href" read-only="1" type="SVGAnimatedString"/>
      </properties>
    </interface>
    <interface name="SVGZoomAndPan" extends="Object" no-interface-object="1">
      <constants>
        <constant name="SVG_ZOOMANDPAN_DISABLE" type="unsigned short" value="1"/>
        <constant name="SVG_ZOOMANDPAN_MAGNIFY" type="unsigned short" value="2"/>
        <constant name="SVG_ZOOMANDPAN_UNKNOWN" type="unsigned short" value="0"/>
      </constants>
      <properties>
        <property name="zoomAndPan" type="unsigned short"/>
      </properties>
    </interface>
    <interface name="WEBGL_compressed_texture_s3tc" extends="Object" no-interface-object="1">
      <constants>
        <constant name="COMPRESSED_RGB_S3TC_DXT1_EXT" type="GLenum" value="33776"/>
        <constant name="COMPRESSED_RGBA_S3TC_DXT1_EXT" type="GLenum" value="33777"/>
        <constant name="COMPRESSED_RGBA_S3TC_DXT3_EXT" type="GLenum" value="33778"/>
        <constant name="COMPRESSED_RGBA_S3TC_DXT5_EXT" type="GLenum" value="33779"/>
      </constants>
    </interface>
    <interface name="WEBGL_debug_renderer_info" extends="Object" no-interface-object="1">
      <constants>
        <constant name="UNMASKED_RENDERER_WEBGL" type="GLenum" value="37446"/>
        <constant name="UNMASKED_VENDOR_WEBGL" type="GLenum" value="37445"/>
      </constants>
    </interface>
    <interface name="WEBGL_depth_texture" extends="Object" no-interface-object="1">
      <constants>
        <constant name="UNSIGNED_INT_24_8_WEBGL" type="GLenum" value="34042"/>
      </constants>
    </interface>
    <interface name="WebGLRenderingContextBase" extends="Object" no-interface-object="1">
      <constants>
        <constant name="ACTIVE_ATTRIBUTES" type="GLenum" value="35721"/>
        <constant name="ACTIVE_TEXTURE" type="GLenum" value="34016"/>
        <constant name="ACTIVE_UNIFORMS" type="GLenum" value="35718"/>
        <constant name="ALIASED_LINE_WIDTH_RANGE" type="GLenum" value="33902"/>
        <constant name="ALIASED_POINT_SIZE_RANGE" type="GLenum" value="33901"/>
        <constant name="ALPHA" type="GLenum" value="6406"/>
        <constant name="ALPHA_BITS" type="GLenum" value="3413"/>
        <constant name="ALWAYS" type="GLenum" value="519"/>
        <constant name="ARRAY_BUFFER" type="GLenum" value="34962"/>
        <constant name="ARRAY_BUFFER_BINDING" type="GLenum" value="34964"/>
        <constant name="ATTACHED_SHADERS" type="GLenum" value="35717"/>
        <constant name="BACK" type="GLenum" value="1029"/>
        <constant name="BLEND" type="GLenum" value="3042"/>
        <constant name="BLEND_COLOR" type="GLenum" value="32773"/>
        <constant name="BLEND_DST_ALPHA" type="GLenum" value="32970"/>
        <constant name="BLEND_DST_RGB" type="GLenum" value="32968"/>
        <constant name="BLEND_EQUATION" type="GLenum" value="32777"/>
        <constant name="BLEND_EQUATION_ALPHA" type="GLenum" value="34877"/>
        <constant name="BLEND_EQUATION_RGB" type="GLenum" value="32777"/>
        <constant name="BLEND_SRC_ALPHA" type="GLenum" value="32971"/>
        <constant name="BLEND_SRC_RGB" type="GLenum" value="32969"/>
        <constant name="BLUE_BITS" type="GLenum" value="3412"/>
        <constant name="BOOL" type="GLenum" value="35670"/>
        <constant name="BOOL_VEC2" type="GLenum" value="35671"/>
        <constant name="BOOL_VEC3" type="GLenum" value="35672"/>
        <constant name="BOOL_VEC4" type="GLenum" value="35673"/>
        <constant name="BROWSER_DEFAULT_WEBGL" type="GLenum" value="37444"/>
        <constant name="BUFFER_SIZE" type="GLenum" value="34660"/>
        <constant name="BUFFER_USAGE" type="GLenum" value="34661"/>
        <constant name="BYTE" type="GLenum" value="5120"/>
        <constant name="CCW" type="GLenum" value="2305"/>
        <constant name="CLAMP_TO_EDGE" type="GLenum" value="33071"/>
        <constant name="COLOR_ATTACHMENT0" type="GLenum" value="36064"/>
        <constant name="COLOR_BUFFER_BIT" type="GLenum" value="16384"/>
        <constant name="COLOR_CLEAR_VALUE" type="GLenum" value="3106"/>
        <constant name="COLOR_WRITEMASK" type="GLenum" value="3107"/>
        <constant name="COMPILE_STATUS" type="GLenum" value="35713"/>
        <constant name="COMPRESSED_TEXTURE_FORMATS" type="GLenum" value="34467"/>
        <constant name="CONSTANT_ALPHA" type="GLenum" value="32771"/>
        <constant name="CONSTANT_COLOR" type="GLenum" value="32769"/>
        <constant name="CONTEXT_LOST_WEBGL" type="GLenum" value="37442"/>
        <constant name="CULL_FACE" type="GLenum" value="2884"/>
        <constant name="CULL_FACE_MODE" type="GLenum" value="2885"/>
        <constant name="CURRENT_PROGRAM" type="GLenum" value="35725"/>
        <constant name="CURRENT_VERTEX_ATTRIB" type="GLenum" value="34342"/>
        <constant name="CW" type="GLenum" value="2304"/>
        <constant name="DECR" type="GLenum" value="7683"/>
        <constant name="DECR_WRAP" type="GLenum" value="34056"/>
        <constant name="DELETE_STATUS" type="GLenum" value="35712"/>
        <constant name="DEPTH_ATTACHMENT" type="GLenum" value="36096"/>
        <constant name="DEPTH_BITS" type="GLenum" value="3414"/>
        <constant name="DEPTH_BUFFER_BIT" type="GLenum" value="256"/>
        <constant name="DEPTH_CLEAR_VALUE" type="GLenum" value="2931"/>
        <constant name="DEPTH_COMPONENT" type="GLenum" value="6402"/>
        <constant name="DEPTH_COMPONENT16" type="GLenum" value="33189"/>
        <constant name="DEPTH_FUNC" type="GLenum" value="2932"/>
        <constant name="DEPTH_RANGE" type="GLenum" value="2928"/>
        <constant name="DEPTH_STENCIL" type="GLenum" value="34041"/>
        <constant name="DEPTH_STENCIL_ATTACHMENT" type="GLenum" value="33306"/>
        <constant name="DEPTH_TEST" type="GLenum" value="2929"/>
        <constant name="DEPTH_WRITEMASK" type="GLenum" value="2930"/>
        <constant name="DITHER" type="GLenum" value="3024"/>
        <constant name="DONT_CARE" type="GLenum" value="4352"/>
        <constant name="DST_ALPHA" type="GLenum" value="772"/>
        <constant name="DST_COLOR" type="GLenum" value="774"/>
        <constant name="DYNAMIC_DRAW" type="GLenum" value="35048"/>
        <constant name="ELEMENT_ARRAY_BUFFER" type="GLenum" value="34963"/>
        <constant name="ELEMENT_ARRAY_BUFFER_BINDING" type="GLenum" value="34965"/>
        <constant name="EQUAL" type="GLenum" value="514"/>
        <constant name="FASTEST" type="GLenum" value="4353"/>
        <constant name="FLOAT" type="GLenum" value="5126"/>
        <constant name="FLOAT_MAT2" type="GLenum" value="35674"/>
        <constant name="FLOAT_MAT3" type="GLenum" value="35675"/>
        <constant name="FLOAT_MAT4" type="GLenum" value="35676"/>
        <constant name="FLOAT_VEC2" type="GLenum" value="35664"/>
        <constant name="FLOAT_VEC3" type="GLenum" value="35665"/>
        <constant name="FLOAT_VEC4" type="GLenum" value="35666"/>
        <constant name="FRAGMENT_SHADER" type="GLenum" value="35632"/>
        <constant name="FRAMEBUFFER" type="GLenum" value="36160"/>
        <constant name="FRAMEBUFFER_ATTACHMENT_OBJECT_NAME" type="GLenum" value="36049"/>
        <constant name="FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE" type="GLenum" value="36048"/>
        <constant name="FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE" type="GLenum" value="36051"/>
        <constant name="FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL" type="GLenum" value="36050"/>
        <constant name="FRAMEBUFFER_BINDING" type="GLenum" value="36006"/>
        <constant name="FRAMEBUFFER_COMPLETE" type="GLenum" value="36053"/>
        <constant name="FRAMEBUFFER_INCOMPLETE_ATTACHMENT" type="GLenum" value="36054"/>
        <constant name="FRAMEBUFFER_INCOMPLETE_DIMENSIONS" type="GLenum" value="36057"/>
        <constant name="FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT" type="GLenum" value="36055"/>
        <constant name="FRAMEBUFFER_UNSUPPORTED" type="GLenum" value="36061"/>
        <constant name="FRONT" type="GLenum" value="1028"/>
        <constant name="FRONT_AND_BACK" type="GLenum" value="1032"/>
        <constant name="FRONT_FACE" type="GLenum" value="2886"/>
        <constant name="FUNC_ADD" type="GLenum" value="32774"/>
        <constant name="FUNC_REVERSE_SUBTRACT" type="GLenum" value="32779"/>
        <constant name="FUNC_SUBTRACT" type="GLenum" value="32778"/>
        <constant name="GENERATE_MIPMAP_HINT" type="GLenum" value="33170"/>
        <constant name="GEQUAL" type="GLenum" value="518"/>
        <constant name="GREATER" type="GLenum" value="516"/>
        <constant name="GREEN_BITS" type="GLenum" value="3411"/>
        <constant name="HIGH_FLOAT" type="GLenum" value="36338"/>
        <constant name="HIGH_INT" type="GLenum" value="36341"/>
        <constant name="IMPLEMENTATION_COLOR_READ_FORMAT" type="GLenum" value="35739"/>
        <constant name="IMPLEMENTATION_COLOR_READ_TYPE" type="GLenum" value="35738"/>
        <constant name="INCR" type="GLenum" value="7682"/>
        <constant name="INCR_WRAP" type="GLenum" value="34055"/>
        <constant name="INT" type="GLenum" value="5124"/>
        <constant name="INT_VEC2" type="GLenum" value="35667"/>
        <constant name="INT_VEC3" type="GLenum" value="35668"/>
        <constant name="INT_VEC4" type="GLenum" value="35669"/>
        <constant name="INVALID_ENUM" type="GLenum" value="1280"/>
        <constant name="INVALID_FRAMEBUFFER_OPERATION" type="GLenum" value="1286"/>
        <constant name="INVALID_OPERATION" type="GLenum" value="1282"/>
        <constant name="INVALID_VALUE" type="GLenum" value="1281"/>
        <constant name="INVERT" type="GLenum" value="5386"/>
        <constant name="KEEP" type="GLenum" value="7680"/>
        <constant name="LEQUAL" type="GLenum" value="515"/>
        <constant name="LESS" type="GLenum" value="513"/>
        <constant name="LINE_LOOP" type="GLenum" value="2"/>
        <constant name="LINE_STRIP" type="GLenum" value="3"/>
        <constant name="LINE_WIDTH" type="GLenum" value="2849"/>
        <constant name="LINEAR" type="GLenum" value="9729"/>
        <constant name="LINEAR_MIPMAP_LINEAR" type="GLenum" value="9987"/>
        <constant name="LINEAR_MIPMAP_NEAREST" type="GLenum" value="9985"/>
        <constant name="LINES" type="GLenum" value="1"/>
        <constant name="LINK_STATUS" type="GLenum" value="35714"/>
        <constant name="LOW_FLOAT" type="GLenum" value="36336"/>
        <constant name="LOW_INT" type="GLenum" value="36339"/>
        <constant name="LUMINANCE" type="GLenum" value="6409"/>
        <constant name="LUMINANCE_ALPHA" type="GLenum" value="6410"/>
        <constant name="MAX_COMBINED_TEXTURE_IMAGE_UNITS" type="GLenum" value="35661"/>
        <constant name="MAX_CUBE_MAP_TEXTURE_SIZE" type="GLenum" value="34076"/>
        <constant name="MAX_FRAGMENT_UNIFORM_VECTORS" type="GLenum" value="36349"/>
        <constant name="MAX_RENDERBUFFER_SIZE" type="GLenum" value="34024"/>
        <constant name="MAX_TEXTURE_IMAGE_UNITS" type="GLenum" value="34930"/>
        <constant name="MAX_TEXTURE_SIZE" type="GLenum" value="3379"/>
        <constant name="MAX_VARYING_VECTORS" type="GLenum" value="36348"/>
        <constant name="MAX_VERTEX_ATTRIBS" type="GLenum" value="34921"/>
        <constant name="MAX_VERTEX_TEXTURE_IMAGE_UNITS" type="GLenum" value="35660"/>
        <constant name="MAX_VERTEX_UNIFORM_VECTORS" type="GLenum" value="36347"/>
        <constant name="MAX_VIEWPORT_DIMS" type="GLenum" value="3386"/>
        <constant name="MEDIUM_FLOAT" type="GLenum" value="36337"/>
        <constant name="MEDIUM_INT" type="GLenum" value="36340"/>
        <constant name="MIRRORED_REPEAT" type="GLenum" value="33648"/>
        <constant name="NEAREST" type="GLenum" value="9728"/>
        <constant name="NEAREST_MIPMAP_LINEAR" type="GLenum" value="9986"/>
        <constant name="NEAREST_MIPMAP_NEAREST" type="GLenum" value="9984"/>
        <constant name="NEVER" type="GLenum" value="512"/>
        <constant name="NICEST" type="GLenum" value="4354"/>
        <constant name="NO_ERROR" type="GLenum" value="0"/>
        <constant name="NONE" type="GLenum" value="0"/>
        <constant name="NOTEQUAL" type="GLenum" value="517"/>
        <constant name="ONE" type="GLenum" value="1"/>
        <constant name="ONE_MINUS_CONSTANT_ALPHA" type="GLenum" value="32772"/>
        <constant name="ONE_MINUS_CONSTANT_COLOR" type="GLenum" value="32770"/>
        <constant name="ONE_MINUS_DST_ALPHA" type="GLenum" value="773"/>
        <constant name="ONE_MINUS_DST_COLOR" type="GLenum" value="775"/>
        <constant name="ONE_MINUS_SRC_ALPHA" type="GLenum" value="771"/>
        <constant name="ONE_MINUS_SRC_COLOR" type="GLenum" value="769"/>
        <constant name="OUT_OF_MEMORY" type="GLenum" value="1285"/>
        <constant name="PACK_ALIGNMENT" type="GLenum" value="3333"/>
        <constant name="POINTS" type="GLenum" value="0"/>
        <constant name="POLYGON_OFFSET_FACTOR" type="GLenum" value="32824"/>
        <constant name="POLYGON_OFFSET_FILL" type="GLenum" value="32823"/>
        <constant name="POLYGON_OFFSET_UNITS" type="GLenum" value="10752"/>
        <constant name="RED_BITS" type="GLenum" value="3410"/>
        <constant name="RENDERBUFFER" type="GLenum" value="36161"/>
        <constant name="RENDERBUFFER_ALPHA_SIZE" type="GLenum" value="36179"/>
        <constant name="RENDERBUFFER_BINDING" type="GLenum" value="36007"/>
        <constant name="RENDERBUFFER_BLUE_SIZE" type="GLenum" value="36178"/>
        <constant name="RENDERBUFFER_DEPTH_SIZE" type="GLenum" value="36180"/>
        <constant name="RENDERBUFFER_GREEN_SIZE" type="GLenum" value="36177"/>
        <constant name="RENDERBUFFER_HEIGHT" type="GLenum" value="36163"/>
        <constant name="RENDERBUFFER_INTERNAL_FORMAT" type="GLenum" value="36164"/>
        <constant name="RENDERBUFFER_RED_SIZE" type="GLenum" value="36176"/>
        <constant name="RENDERBUFFER_STENCIL_SIZE" type="GLenum" value="36181"/>
        <constant name="RENDERBUFFER_WIDTH" type="GLenum" value="36162"/>
        <constant name="RENDERER" type="GLenum" value="7937"/>
        <constant name="REPEAT" type="GLenum" value="10497"/>
        <constant name="REPLACE" type="GLenum" value="7681"/>
        <constant name="RGB" type="GLenum" value="6407"/>
        <constant name="RGB5_A1" type="GLenum" value="32855"/>
        <constant name="RGB565" type="GLenum" value="36194"/>
        <constant name="RGBA" type="GLenum" value="6408"/>
        <constant name="RGBA4" type="GLenum" value="32854"/>
        <constant name="SAMPLE_ALPHA_TO_COVERAGE" type="GLenum" value="32926"/>
        <constant name="SAMPLE_BUFFERS" type="GLenum" value="32936"/>
        <constant name="SAMPLE_COVERAGE" type="GLenum" value="32928"/>
        <constant name="SAMPLE_COVERAGE_INVERT" type="GLenum" value="32939"/>
        <constant name="SAMPLE_COVERAGE_VALUE" type="GLenum" value="32938"/>
        <constant name="SAMPLER_2D" type="GLenum" value="35678"/>
        <constant name="SAMPLER_CUBE" type="GLenum" value="35680"/>
        <constant name="SAMPLES" type="GLenum" value="32937"/>
        <constant name="SCISSOR_BOX" type="GLenum" value="3088"/>
        <constant name="SCISSOR_TEST" type="GLenum" value="3089"/>
        <constant name="SHADER_TYPE" type="GLenum" value="35663"/>
        <constant name="SHADING_LANGUAGE_VERSION" type="GLenum" value="35724"/>
        <constant name="SHORT" type="GLenum" value="5122"/>
        <constant name="SRC_ALPHA" type="GLenum" value="770"/>
        <constant name="SRC_ALPHA_SATURATE" type="GLenum" value="776"/>
        <constant name="SRC_COLOR" type="GLenum" value="768"/>
        <constant name="STATIC_DRAW" type="GLenum" value="35044"/>
        <constant name="STENCIL_ATTACHMENT" type="GLenum" value="36128"/>
        <constant name="STENCIL_BACK_FAIL" type="GLenum" value="34817"/>
        <constant name="STENCIL_BACK_FUNC" type="GLenum" value="34816"/>
        <constant name="STENCIL_BACK_PASS_DEPTH_FAIL" type="GLenum" value="34818"/>
        <constant name="STENCIL_BACK_PASS_DEPTH_PASS" type="GLenum" value="34819"/>
        <constant name="STENCIL_BACK_REF" type="GLenum" value="36003"/>
        <constant name="STENCIL_BACK_VALUE_MASK" type="GLenum" value="36004"/>
        <constant name="STENCIL_BACK_WRITEMASK" type="GLenum" value="36005"/>
        <constant name="STENCIL_BITS" type="GLenum" value="3415"/>
        <constant name="STENCIL_BUFFER_BIT" type="GLenum" value="1024"/>
        <constant name="STENCIL_CLEAR_VALUE" type="GLenum" value="2961"/>
        <constant name="STENCIL_FAIL" type="GLenum" value="2964"/>
        <constant name="STENCIL_FUNC" type="GLenum" value="2962"/>
        <constant name="STENCIL_INDEX8" type="GLenum" value="36168"/>
        <constant name="STENCIL_PASS_DEPTH_FAIL" type="GLenum" value="2965"/>
        <constant name="STENCIL_PASS_DEPTH_PASS" type="GLenum" value="2966"/>
        <constant name="STENCIL_REF" type="GLenum" value="2967"/>
        <constant name="STENCIL_TEST" type="GLenum" value="2960"/>
        <constant name="STENCIL_VALUE_MASK" type="GLenum" value="2963"/>
        <constant name="STENCIL_WRITEMASK" type="GLenum" value="2968"/>
        <constant name="STREAM_DRAW" type="GLenum" value="35040"/>
        <constant name="SUBPIXEL_BITS" type="GLenum" value="3408"/>
        <constant name="TEXTURE" type="GLenum" value="5890"/>
        <constant name="TEXTURE_2D" type="GLenum" value="3553"/>
        <constant name="TEXTURE_BINDING_2D" type="GLenum" value="32873"/>
        <constant name="TEXTURE_BINDING_CUBE_MAP" type="GLenum" value="34068"/>
        <constant name="TEXTURE_CUBE_MAP" type="GLenum" value="34067"/>
        <constant name="TEXTURE_CUBE_MAP_NEGATIVE_X" type="GLenum" value="34070"/>
        <constant name="TEXTURE_CUBE_MAP_NEGATIVE_Y" type="GLenum" value="34072"/>
        <constant name="TEXTURE_CUBE_MAP_NEGATIVE_Z" type="GLenum" value="34074"/>
        <constant name="TEXTURE_CUBE_MAP_POSITIVE_X" type="GLenum" value="34069"/>
        <constant name="TEXTURE_CUBE_MAP_POSITIVE_Y" type="GLenum" value="34071"/>
        <constant name="TEXTURE_CUBE_MAP_POSITIVE_Z" type="GLenum" value="34073"/>
        <constant name="TEXTURE_MAG_FILTER" type="GLenum" value="10240"/>
        <constant name="TEXTURE_MIN_FILTER" type="GLenum" value="10241"/>
        <constant name="TEXTURE_WRAP_S" type="GLenum" value="10242"/>
        <constant name="TEXTURE_WRAP_T" type="GLenum" value="10243"/>
        <constant name="TEXTURE0" type="GLenum" value="33984"/>
        <constant name="TEXTURE1" type="GLenum" value="33985"/>
        <constant name="TEXTURE10" type="GLenum" value="33994"/>
        <constant name="TEXTURE11" type="GLenum" value="33995"/>
        <constant name="TEXTURE12" type="GLenum" value="33996"/>
        <constant name="TEXTURE13" type="GLenum" value="33997"/>
        <constant name="TEXTURE14" type="GLenum" value="33998"/>
        <constant name="TEXTURE15" type="GLenum" value="33999"/>
        <constant name="TEXTURE16" type="GLenum" value="34000"/>
        <constant name="TEXTURE17" type="GLenum" value="34001"/>
        <constant name="TEXTURE18" type="GLenum" value="34002"/>
        <constant name="TEXTURE19" type="GLenum" value="34003"/>
        <constant name="TEXTURE2" type="GLenum" value="33986"/>
        <constant name="TEXTURE20" type="GLenum" value="34004"/>
        <constant name="TEXTURE21" type="GLenum" value="34005"/>
        <constant name="TEXTURE22" type="GLenum" value="34006"/>
        <constant name="TEXTURE23" type="GLenum" value="34007"/>
        <constant name="TEXTURE24" type="GLenum" value="34008"/>
        <constant name="TEXTURE25" type="GLenum" value="34009"/>
        <constant name="TEXTURE26" type="GLenum" value="34010"/>
        <constant name="TEXTURE27" type="GLenum" value="34011"/>
        <constant name="TEXTURE28" type="GLenum" value="34012"/>
        <constant name="TEXTURE29" type="GLenum" value="34013"/>
        <constant name="TEXTURE3" type="GLenum" value="33987"/>
        <constant name="TEXTURE30" type="GLenum" value="34014"/>
        <constant name="TEXTURE31" type="GLenum" value="34015"/>
        <constant name="TEXTURE4" type="GLenum" value="33988"/>
        <constant name="TEXTURE5" type="GLenum" value="33989"/>
        <constant name="TEXTURE6" type="GLenum" value="33990"/>
        <constant name="TEXTURE7" type="GLenum" value="33991"/>
        <constant name="TEXTURE8" type="GLenum" value="33992"/>
        <constant name="TEXTURE9" type="GLenum" value="33993"/>
        <constant name="TRIANGLE_FAN" type="GLenum" value="6"/>
        <constant name="TRIANGLE_STRIP" type="GLenum" value="5"/>
        <constant name="TRIANGLES" type="GLenum" value="4"/>
        <constant name="UNPACK_ALIGNMENT" type="GLenum" value="3317"/>
        <constant name="UNPACK_COLORSPACE_CONVERSION_WEBGL" type="GLenum" value="37443"/>
        <constant name="UNPACK_FLIP_Y_WEBGL" type="GLenum" value="37440"/>
        <constant name="UNPACK_PREMULTIPLY_ALPHA_WEBGL" type="GLenum" value="37441"/>
        <constant name="UNSIGNED_BYTE" type="GLenum" value="5121"/>
        <constant name="UNSIGNED_INT" type="GLenum" value="5125"/>
        <constant name="UNSIGNED_SHORT" type="GLenum" value="5123"/>
        <constant name="UNSIGNED_SHORT_4_4_4_4" type="GLenum" value="32819"/>
        <constant name="UNSIGNED_SHORT_5_5_5_1" type="GLenum" value="32820"/>
        <constant name="UNSIGNED_SHORT_5_6_5" type="GLenum" value="33635"/>
        <constant name="VALIDATE_STATUS" type="GLenum" value="35715"/>
        <constant name="VENDOR" type="GLenum" value="7936"/>
        <constant name="VERSION" type="GLenum" value="7938"/>
        <constant name="VERTEX_ATTRIB_ARRAY_BUFFER_BINDING" type="GLenum" value="34975"/>
        <constant name="VERTEX_ATTRIB_ARRAY_ENABLED" type="GLenum" value="34338"/>
        <constant name="VERTEX_ATTRIB_ARRAY_NORMALIZED" type="GLenum" value="34922"/>
        <constant name="VERTEX_ATTRIB_ARRAY_POINTER" type="GLenum" value="34373"/>
        <constant name="VERTEX_ATTRIB_ARRAY_SIZE" type="GLenum" value="34339"/>
        <constant name="VERTEX_ATTRIB_ARRAY_STRIDE" type="GLenum" value="34340"/>
        <constant name="VERTEX_ATTRIB_ARRAY_TYPE" type="GLenum" value="34341"/>
        <constant name="VERTEX_SHADER" type="GLenum" value="35633"/>
        <constant name="VIEWPORT" type="GLenum" value="2978"/>
        <constant name="ZERO" type="GLenum" value="0"/>
      </constants>
      <methods>
        <method name="activeTexture" type="void">
          <param name="texture" type="GLenum"/>
        </method>
        <method name="attachShader" type="void">
          <param name="program" type="WebGLProgram"/>
          <param name="shader" type="WebGLShader"/>
        </method>
        <method name="bindAttribLocation" type="void">
          <param name="program" type="WebGLProgram"/>
          <param name="index" type="GLuint"/>
          <param name="name" type="DOMString"/>
        </method>
        <method name="bindBuffer" type="void">
          <param name="target" type="GLenum"/>
          <param name="buffer" nullable="1" type="WebGLBuffer"/>
        </method>
        <method name="bindFramebuffer" type="void">
          <param name="target" type="GLenum"/>
          <param name="framebuffer" nullable="1" type="WebGLFramebuffer"/>
        </method>
        <method name="bindRenderbuffer" type="void">
          <param name="target" type="GLenum"/>
          <param name="renderbuffer" nullable="1" type="WebGLRenderbuffer"/>
        </method>
        <method name="bindTexture" type="void">
          <param name="target" type="GLenum"/>
          <param name="texture" nullable="1" type="WebGLTexture"/>
        </method>
        <method name="blendColor" type="void">
          <param name="red" type="GLclampf"/>
          <param name="green" type="GLclampf"/>
          <param name="blue" type="GLclampf"/>
          <param name="alpha" type="GLclampf"/>
        </method>
        <method name="blendEquation" type="void">
          <param name="mode" type="GLenum"/>
        </method>
        <method name="blendEquationSeparate" type="void">
          <param name="modeRGB" type="GLenum"/>
          <param name="modeAlpha" type="GLenum"/>
        </method>
        <method name="blendFunc" type="void">
          <param name="sfactor" type="GLenum"/>
          <param name="dfactor" type="GLenum"/>
        </method>
        <method name="blendFuncSeparate" type="void">
          <param name="srcRGB" type="GLenum"/>
          <param name="dstRGB" type="GLenum"/>
          <param name="srcAlpha" type="GLenum"/>
          <param name="dstAlpha" type="GLenum"/>
        </method>
        <method name="bufferData" type="void">
          <param name="target" type="GLenum"/>
          <param name="size" type="GLsizeiptr"/>
          <param name="usage" type="GLenum"/>
        </method>
        <method name="bufferData" type="void">
          <param name="target" type="GLenum"/>
          <param name="data" nullable="1" type="BufferSource"/>
          <param name="usage" type="GLenum"/>
        </method>
        <method name="bufferSubData" type="void">
          <param name="target" type="GLenum"/>
          <param name="offset" type="GLintptr"/>
          <param name="data" type="BufferSource"/>
        </method>
        <method name="checkFramebufferStatus" type="GLenum">
          <param name="target" type="GLenum"/>
        </method>
        <method name="clear" type="void">
          <param name="mask" type="GLbitfield"/>
        </method>
        <method name="clearColor" type="void">
          <param name="red" type="GLclampf"/>
          <param name="green" type="GLclampf"/>
          <param name="blue" type="GLclampf"/>
          <param name="alpha" type="GLclampf"/>
        </method>
        <method name="clearDepth" type="void">
          <param name="depth" type="GLclampf"/>
        </method>
        <method name="clearStencil" type="void">
          <param name="s" type="GLint"/>
        </method>
        <method name="colorMask" type="void">
          <param name="red" type="GLboolean"/>
          <param name="green" type="GLboolean"/>
          <param name="blue" type="GLboolean"/>
          <param name="alpha" type="GLboolean"/>
        </method>
        <method name="compileShader" type="void">
          <param name="shader" type="WebGLShader"/>
        </method>
        <method name="compressedTexImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalformat" type="GLenum"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="border" type="GLint"/>
          <param name="data" type="ArrayBufferView"/>
        </method>
        <method name="compressedTexSubImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="yoffset" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="format" type="GLenum"/>
          <param name="data" type="ArrayBufferView"/>
        </method>
        <method name="copyTexImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalformat" type="GLenum"/>
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="border" type="GLint"/>
        </method>
        <method name="copyTexSubImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="yoffset" type="GLint"/>
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
        </method>
        <method name="createBuffer" nullable="1" type="WebGLBuffer"/>
        <method name="createFramebuffer" nullable="1" type="WebGLFramebuffer"/>
        <method name="createProgram" nullable="1" type="WebGLProgram"/>
        <method name="createRenderbuffer" nullable="1" type="WebGLRenderbuffer"/>
        <method name="createShader" nullable="1" type="WebGLShader">
          <param name="type" type="GLenum"/>
        </method>
        <method name="createTexture" nullable="1" type="WebGLTexture"/>
        <method name="cullFace" type="void">
          <param name="mode" type="GLenum"/>
        </method>
        <method name="deleteBuffer" type="void">
          <param name="buffer" nullable="1" type="WebGLBuffer"/>
        </method>
        <method name="deleteFramebuffer" type="void">
          <param name="framebuffer" nullable="1" type="WebGLFramebuffer"/>
        </method>
        <method name="deleteProgram" type="void">
          <param name="program" nullable="1" type="WebGLProgram"/>
        </method>
        <method name="deleteRenderbuffer" type="void">
          <param name="renderbuffer" nullable="1" type="WebGLRenderbuffer"/>
        </method>
        <method name="deleteShader" type="void">
          <param name="shader" nullable="1" type="WebGLShader"/>
        </method>
        <method name="deleteTexture" type="void">
          <param name="texture" nullable="1" type="WebGLTexture"/>
        </method>
        <method name="depthFunc" type="void">
          <param name="func" type="GLenum"/>
        </method>
        <method name="depthMask" type="void">
          <param name="flag" type="GLboolean"/>
        </method>
        <method name="depthRange" type="void">
          <param name="zNear" type="GLclampf"/>
          <param name="zFar" type="GLclampf"/>
        </method>
        <method name="detachShader" type="void">
          <param name="program" type="WebGLProgram"/>
          <param name="shader" type="WebGLShader"/>
        </method>
        <method name="disable" type="void">
          <param name="cap" type="GLenum"/>
        </method>
        <method name="disableVertexAttribArray" type="void">
          <param name="index" type="GLuint"/>
        </method>
        <method name="drawArrays" type="void">
          <param name="mode" type="GLenum"/>
          <param name="first" type="GLint"/>
          <param name="count" type="GLsizei"/>
        </method>
        <method name="drawElements" type="void">
          <param name="mode" type="GLenum"/>
          <param name="count" type="GLsizei"/>
          <param name="type" type="GLenum"/>
          <param name="offset" type="GLintptr"/>
        </method>
        <method name="enable" type="void">
          <param name="cap" type="GLenum"/>
        </method>
        <method name="enableVertexAttribArray" type="void">
          <param name="index" type="GLuint"/>
        </method>
        <method name="finish" type="void"/>
        <method name="flush" type="void"/>
        <method name="framebufferRenderbuffer" type="void">
          <param name="target" type="GLenum"/>
          <param name="attachment" type="GLenum"/>
          <param name="renderbuffertarget" type="GLenum"/>
          <param name="renderbuffer" nullable="1" type="WebGLRenderbuffer"/>
        </method>
        <method name="framebufferTexture2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="attachment" type="GLenum"/>
          <param name="textarget" type="GLenum"/>
          <param name="texture" nullable="1" type="WebGLTexture"/>
          <param name="level" type="GLint"/>
        </method>
        <method name="frontFace" type="void">
          <param name="mode" type="GLenum"/>
        </method>
        <method name="generateMipmap" type="void">
          <param name="target" type="GLenum"/>
        </method>
        <method name="getActiveAttrib" nullable="1" type="WebGLActiveInfo">
          <param name="program" type="WebGLProgram"/>
          <param name="index" type="GLuint"/>
        </method>
        <method name="getActiveUniform" nullable="1" type="WebGLActiveInfo">
          <param name="program" type="WebGLProgram"/>
          <param name="index" type="GLuint"/>
        </method>
        <method name="getAttachedShaders" nullable="1" type="sequence&lt;WebGLShader&gt;">
          <param name="program" type="WebGLProgram"/>
        </method>
        <method name="getAttribLocation" type="GLint">
          <param name="program" type="WebGLProgram"/>
          <param name="name" type="DOMString"/>
        </method>
        <method name="getBufferParameter" type="any">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
        </method>
        <method name="getContextAttributes" nullable="1" type="WebGLContextAttributes"/>
        <method name="getError" type="GLenum"/>
        <method name="getExtension" nullable="1" type="object">
          <param name="name" type="DOMString"/>
        </method>
        <method name="getFramebufferAttachmentParameter" type="any">
          <param name="target" type="GLenum"/>
          <param name="attachment" type="GLenum"/>
          <param name="pname" type="GLenum"/>
        </method>
        <method name="getParameter" type="any">
          <param name="pname" type="GLenum"/>
        </method>
        <method name="getProgramInfoLog" nullable="1" type="DOMString">
          <param name="program" type="WebGLProgram"/>
        </method>
        <method name="getProgramParameter" type="any">
          <param name="program" type="WebGLProgram"/>
          <param name="pname" type="GLenum"/>
        </method>
        <method name="getRenderbufferParameter" type="any">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
        </method>
        <method name="getShaderInfoLog" nullable="1" type="DOMString">
          <param name="shader" type="WebGLShader"/>
        </method>
        <method name="getShaderParameter" type="any">
          <param name="shader" type="WebGLShader"/>
          <param name="pname" type="GLenum"/>
        </method>
        <method name="getShaderPrecisionFormat" nullable="1" type="WebGLShaderPrecisionFormat">
          <param name="shadertype" type="GLenum"/>
          <param name="precisiontype" type="GLenum"/>
        </method>
        <method name="getShaderSource" nullable="1" type="DOMString">
          <param name="shader" type="WebGLShader"/>
        </method>
        <method name="getSupportedExtensions" nullable="1" type="sequence&lt;DOMString&gt;"/>
        <method name="getTexParameter" type="any">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
        </method>
        <method name="getUniform" type="any">
          <param name="program" type="WebGLProgram"/>
          <param name="location" type="WebGLUniformLocation"/>
        </method>
        <method name="getUniformLocation" nullable="1" type="WebGLUniformLocation">
          <param name="program" type="WebGLProgram"/>
          <param name="name" type="DOMString"/>
        </method>
        <method name="getVertexAttrib" type="any">
          <param name="index" type="GLuint"/>
          <param name="pname" type="GLenum"/>
        </method>
        <method name="getVertexAttribOffset" type="GLintptr">
          <param name="index" type="GLuint"/>
          <param name="pname" type="GLenum"/>
        </method>
        <method name="hint" type="void">
          <param name="target" type="GLenum"/>
          <param name="mode" type="GLenum"/>
        </method>
        <method name="isBuffer" type="GLboolean">
          <param name="buffer" nullable="1" type="WebGLBuffer"/>
        </method>
        <method name="isContextLost" type="boolean"/>
        <method name="isEnabled" type="GLboolean">
          <param name="cap" type="GLenum"/>
        </method>
        <method name="isFramebuffer" type="GLboolean">
          <param name="framebuffer" nullable="1" type="WebGLFramebuffer"/>
        </method>
        <method name="isProgram" type="GLboolean">
          <param name="program" nullable="1" type="WebGLProgram"/>
        </method>
        <method name="isRenderbuffer" type="GLboolean">
          <param name="renderbuffer" nullable="1" type="WebGLRenderbuffer"/>
        </method>
        <method name="isShader" type="GLboolean">
          <param name="shader" nullable="1" type="WebGLShader"/>
        </method>
        <method name="isTexture" type="GLboolean">
          <param name="texture" nullable="1" type="WebGLTexture"/>
        </method>
        <method name="lineWidth" type="void">
          <param name="width" type="GLfloat"/>
        </method>
        <method name="linkProgram" type="void">
          <param name="program" type="WebGLProgram"/>
        </method>
        <method name="pixelStorei" type="void">
          <param name="pname" type="GLenum"/>
          <param name="param" type="GLint"/>
        </method>
        <method name="polygonOffset" type="void">
          <param name="factor" type="GLfloat"/>
          <param name="units" type="GLfloat"/>
        </method>
        <method name="readPixels" type="void">
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="pixels" nullable="1" type="ArrayBufferView"/>
        </method>
        <method name="renderbufferStorage" type="void">
          <param name="target" type="GLenum"/>
          <param name="internalformat" type="GLenum"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
        </method>
        <method name="sampleCoverage" type="void">
          <param name="value" type="GLclampf"/>
          <param name="invert" type="GLboolean"/>
        </method>
        <method name="scissor" type="void">
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
        </method>
        <method name="shaderSource" type="void">
          <param name="shader" type="WebGLShader"/>
          <param name="source" type="DOMString"/>
        </method>
        <method name="stencilFunc" type="void">
          <param name="func" type="GLenum"/>
          <param name="ref" type="GLint"/>
          <param name="mask" type="GLuint"/>
        </method>
        <method name="stencilFuncSeparate" type="void">
          <param name="face" type="GLenum"/>
          <param name="func" type="GLenum"/>
          <param name="ref" type="GLint"/>
          <param name="mask" type="GLuint"/>
        </method>
        <method name="stencilMask" type="void">
          <param name="mask" type="GLuint"/>
        </method>
        <method name="stencilMaskSeparate" type="void">
          <param name="face" type="GLenum"/>
          <param name="mask" type="GLuint"/>
        </method>
        <method name="stencilOp" type="void">
          <param name="fail" type="GLenum"/>
          <param name="zfail" type="GLenum"/>
          <param name="zpass" type="GLenum"/>
        </method>
        <method name="stencilOpSeparate" type="void">
          <param name="face" type="GLenum"/>
          <param name="fail" type="GLenum"/>
          <param name="zfail" type="GLenum"/>
          <param name="zpass" type="GLenum"/>
        </method>
        <method name="texImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalformat" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="border" type="GLint"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="pixels" nullable="1" type="ArrayBufferView"/>
        </method>
        <method name="texImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="internalformat" type="GLint"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="source" type="TexImageSource"/>
        </method>
        <method name="texParameterf" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="param" type="GLfloat"/>
        </method>
        <method name="texParameteri" type="void">
          <param name="target" type="GLenum"/>
          <param name="pname" type="GLenum"/>
          <param name="param" type="GLint"/>
        </method>
        <method name="texSubImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="yoffset" type="GLint"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="source" type="TexImageSource"/>
        </method>
        <method name="texSubImage2D" type="void">
          <param name="target" type="GLenum"/>
          <param name="level" type="GLint"/>
          <param name="xoffset" type="GLint"/>
          <param name="yoffset" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
          <param name="format" type="GLenum"/>
          <param name="type" type="GLenum"/>
          <param name="pixels" nullable="1" type="ArrayBufferView"/>
        </method>
        <method name="uniform1f" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="GLfloat"/>
        </method>
        <method name="uniform1fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Float32List"/>
        </method>
        <method name="uniform1i" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="GLint"/>
        </method>
        <method name="uniform1iv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Int32List"/>
        </method>
        <method name="uniform2f" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="GLfloat"/>
          <param name="y" type="GLfloat"/>
        </method>
        <method name="uniform2fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Float32List"/>
        </method>
        <method name="uniform2i" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
        </method>
        <method name="uniform2iv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Int32List"/>
        </method>
        <method name="uniform3f" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="GLfloat"/>
          <param name="y" type="GLfloat"/>
          <param name="z" type="GLfloat"/>
        </method>
        <method name="uniform3fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Float32List"/>
        </method>
        <method name="uniform3i" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="z" type="GLint"/>
        </method>
        <method name="uniform3iv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Int32List"/>
        </method>
        <method name="uniform4f" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="GLfloat"/>
          <param name="y" type="GLfloat"/>
          <param name="z" type="GLfloat"/>
          <param name="w" type="GLfloat"/>
        </method>
        <method name="uniform4fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Float32List"/>
        </method>
        <method name="uniform4i" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="z" type="GLint"/>
          <param name="w" type="GLint"/>
        </method>
        <method name="uniform4iv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="v" type="Int32List"/>
        </method>
        <method name="uniformMatrix2fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="Float32List"/>
        </method>
        <method name="uniformMatrix3fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="Float32List"/>
        </method>
        <method name="uniformMatrix4fv" type="void">
          <param name="location" nullable="1" type="WebGLUniformLocation"/>
          <param name="transpose" type="GLboolean"/>
          <param name="value" type="Float32List"/>
        </method>
        <method name="useProgram" type="void">
          <param name="program" nullable="1" type="WebGLProgram"/>
        </method>
        <method name="validateProgram" type="void">
          <param name="program" type="WebGLProgram"/>
        </method>
        <method name="vertexAttrib1f" type="void">
          <param name="index" type="GLuint"/>
          <param name="x" type="GLfloat"/>
        </method>
        <method name="vertexAttrib1fv" type="void">
          <param name="index" type="GLuint"/>
          <param name="values" type="Float32List"/>
        </method>
        <method name="vertexAttrib2f" type="void">
          <param name="index" type="GLuint"/>
          <param name="x" type="GLfloat"/>
          <param name="y" type="GLfloat"/>
        </method>
        <method name="vertexAttrib2fv" type="void">
          <param name="index" type="GLuint"/>
          <param name="values" type="Float32List"/>
        </method>
        <method name="vertexAttrib3f" type="void">
          <param name="index" type="GLuint"/>
          <param name="x" type="GLfloat"/>
          <param name="y" type="GLfloat"/>
          <param name="z" type="GLfloat"/>
        </method>
        <method name="vertexAttrib3fv" type="void">
          <param name="index" type="GLuint"/>
          <param name="values" type="Float32List"/>
        </method>
        <method name="vertexAttrib4f" type="void">
          <param name="index" type="GLuint"/>
          <param name="x" type="GLfloat"/>
          <param name="y" type="GLfloat"/>
          <param name="z" type="GLfloat"/>
          <param name="w" type="GLfloat"/>
        </method>
        <method name="vertexAttrib4fv" type="void">
          <param name="index" type="GLuint"/>
          <param name="values" type="Float32List"/>
        </method>
        <method name="vertexAttribPointer" type="void">
          <param name="index" type="GLuint"/>
          <param name="size" type="GLint"/>
          <param name="type" type="GLenum"/>
          <param name="normalized" type="GLboolean"/>
          <param name="stride" type="GLsizei"/>
          <param name="offset" type="GLintptr"/>
        </method>
        <method name="viewport" type="void">
          <param name="x" type="GLint"/>
          <param name="y" type="GLint"/>
          <param name="width" type="GLsizei"/>
          <param name="height" type="GLsizei"/>
        </method>
      </methods>
      <properties>
        <property name="canvas" read-only="1" type="HTMLCanvasElement"/>
        <property name="drawingBufferHeight" read-only="1" type="GLsizei"/>
        <property name="drawingBufferWidth" read-only="1" type="GLsizei"/>
      </properties>
    </interface>
    <interface name="WindowEventHandlers" extends="Object" no-interface-object="1">
      <properties>
        <property name="onafterprint" type="EventHandler" event-handler="afterprint"/>
        <property name="onbeforeprint" type="EventHandler" event-handler="beforeprint"/>
        <property name="onbeforeunload" type="OnBeforeUnloadEventHandler" event-handler="beforeunload"/>
        <property name="onhashchange" type="EventHandler" event-handler="hashchange"/>
        <property name="onlanguagechange" type="EventHandler" event-handler="languagechange"/>
        <property name="onmessage" type="EventHandler" event-handler="message"/>
        <property name="onmessageerror" type="EventHandler" event-handler="messageerror"/>
        <property name="onoffline" type="EventHandler" event-handler="offline"/>
        <property name="ononline" type="EventHandler" event-handler="online"/>
        <property name="onpagehide" type="EventHandler" event-handler="pagehide"/>
        <property name="onpageshow" type="EventHandler" event-handler="pageshow"/>
        <property name="onpopstate" type="EventHandler" event-handler="popstate"/>
        <property name="onrejectionhandled" type="EventHandler" event-handler="rejectionhandled"/>
        <property name="onstorage" type="EventHandler" event-handler="storage"/>
        <property name="onunhandledrejection" type="EventHandler" event-handler="unhandledrejection"/>
        <property name="onunload" type="EventHandler" event-handler="unload"/>
      </properties>
      <events>
        <event name="afterprint" type="Event"/>
        <event name="beforeprint" type="Event"/>
        <event name="beforeunload" type="BeforeUnloadEvent"/>
        <event name="hashchange" type="HashChangeEvent"/>
        <event name="languagechange" type="Event"/>
        <event name="message" type="MessageEvent"/>
        <event name="messageerror" type="MessageEvent"/>
        <event name="offline" type="Event"/>
        <event name="online" type="Event"/>
        <event name="pagehide" type="PageTransitionEvent"/>
        <event name="pageshow" type="PageTransitionEvent"/>
        <event name="popstate" type="PopStateEvent"/>
        <event name="rejectionhandled" type="PromiseRejectionEvent"/>
        <event name="storage" type="StorageEvent"/>
        <event name="unhandledrejection" type="PromiseRejectionEvent"/>
        <event name="unload" type="Event"/>
      </events>
    </interface>
    <interface name="WindowLocalStorage" extends="Object" no-interface-object="1">
      <properties>
        <property name="localStorage" read-only="1" type="Storage"/>
      </properties>
    </interface>
    <interface name="WindowOrWorkerGlobalScope" extends="Object" no-interface-object="1" exposed="Window Worker">
      <methods>
        <method name="atob" type="DOMString">
          <param name="data" type="DOMString"/>
        </method>
        <method name="btoa" type="DOMString">
          <param name="data" type="DOMString"/>
        </method>
        <method name="clearInterval" type="void">
          <param name="handle" default="0" optional="1" type="long"/>
        </method>
        <method name="clearTimeout" type="void">
          <param name="handle" default="0" optional="1" type="long"/>
        </method>
        <method name="createImageBitmap" type="Promise&lt;ImageBitmap&gt;">
          <param name="image" type="ImageBitmapSource"/>
          <param name="options" optional="1" type="ImageBitmapOptions"/>
        </method>
        <method name="createImageBitmap" type="Promise&lt;ImageBitmap&gt;">
          <param name="image" type="ImageBitmapSource"/>
          <param name="sx" type="long"/>
          <param name="sy" type="long"/>
          <param name="sw" type="long"/>
          <param name="sh" type="long"/>
          <param name="options" optional="1" type="ImageBitmapOptions"/>
        </method>
        <method name="fetch" type="Promise&lt;Response&gt;">
          <param name="input" type="RequestInfo"/>
          <param name="init" optional="1" type="RequestInit"/>
        </method>
        <method name="setInterval" type="long">
          <param name="handler" type="TimerHandler"/>
          <param name="timeout" default="0" optional="1" type="long"/>
          <param name="arguments" type="any" variadic="1"/>
        </method>
        <method name="setTimeout" type="long">
          <param name="handler" type="TimerHandler"/>
          <param name="timeout" default="0" optional="1" type="long"/>
          <param name="arguments" type="any" variadic="1"/>
        </method>
      </methods>
      <properties>
        <property name="caches" read-only="1" type="CacheStorage"/>
        <property name="indexedDB" read-only="1" type="IDBFactory"/>
        <property name="origin" read-only="1" type="USVString"/>
      </properties>
    </interface>
    <interface name="WindowSessionStorage" extends="Object" no-interface-object="1">
      <properties>
        <property name="sessionStorage" read-only="1" type="Storage"/>
      </properties>
    </interface>
  </mixin-interfaces>
  <typedefs>
    <typedef new-type="AlgorithmIdentifier" type="(object or DOMString)"/>
    <typedef new-type="ArrayBufferView" type="(Int8Array or Int16Array or Int32Array or Uint8Array or Uint16Array or Uint32Array or Uint8ClampedArray or Float32Array or Float64Array or DataView)"/>
    <typedef new-type="BigInteger" type="Uint8Array"/>
    <typedef new-type="BlobPart" type="(BufferSource or Blob or USVString)"/>
    <typedef new-type="BodyInit" type="(Blob or BufferSource or FormData or URLSearchParams or ReadableStream or USVString)"/>
    <typedef new-type="BufferSource" type="(ArrayBufferView or ArrayBuffer)"/>
    <typedef new-type="CanvasImageSource" type="(HTMLOrSVGImageElement or HTMLVideoElement or HTMLCanvasElement or ImageBitmap or OffscreenCanvas)"/>
    <typedef new-type="ConstrainBoolean" type="(boolean or ConstrainBooleanParameters)"/>
    <typedef new-type="ConstrainDOMString" type="(DOMString or sequence&lt;DOMString&gt; or ConstrainDOMStringParameters)"/>
    <typedef new-type="ConstrainDouble" type="(double or ConstrainDoubleRange)"/>
    <typedef new-type="ConstrainLong" type="(long or ConstrainLongRange)"/>
    <typedef new-type="CSSOMString" type="USVString"/>
    <typedef new-type="DOMHighResTimeStamp" type="double"/>
    <typedef new-type="DOMTimeStamp" type="unsigned long long"/>
    <typedef new-type="EventHandler" nullable="1" type="EventHandlerNonNull"/>
    <typedef new-type="Float32List" type="(Float32Array or sequence&lt;GLfloat&gt;)"/>
    <typedef new-type="FormDataEntryValue" type="(File or USVString)"/>
    <typedef new-type="GeometryNode" type="(Text or Element or CSSPseudoElement or Document)"/>
    <typedef new-type="GLbitfield" type="unsigned long"/>
    <typedef new-type="GLboolean" type="boolean"/>
    <typedef new-type="GLbyte" type="byte"/>
    <typedef new-type="GLclampf" type="unrestricted float"/>
    <typedef new-type="GLenum" type="unsigned long"/>
    <typedef new-type="GLfloat" type="unrestricted float"/>
    <typedef new-type="GLint" type="long"/>
    <typedef new-type="GLintptr" type="long long"/>
    <typedef new-type="GLshort" type="short"/>
    <typedef new-type="GLsizei" type="long"/>
    <typedef new-type="GLsizeiptr" type="long long"/>
    <typedef new-type="GLubyte" type="octet"/>
    <typedef new-type="GLuint" type="unsigned long"/>
    <typedef new-type="GLushort" type="unsigned short"/>
    <typedef new-type="HashAlgorithmIdentifier" type="AlgorithmIdentifier"/>
    <typedef new-type="HeadersInit" type="(sequence&lt;sequence&lt;ByteString&gt;&gt; or record&lt;ByteString, ByteString&gt;)"/>
    <typedef new-type="HTMLOrSVGImageElement" type="(HTMLImageElement or SVGImageElement)"/>
    <typedef new-type="HTMLOrSVGScriptElement" type="(HTMLScriptElement or SVGScriptElement)"/>
    <typedef new-type="ImageBitmapSource" type="(CanvasImageSource or Blob or ImageData)"/>
    <typedef new-type="Int32List" type="(Int32Array or sequence&lt;GLint&gt;)"/>
    <typedef new-type="MediaProvider" type="(MediaStream or MediaSource or Blob)"/>
    <typedef new-type="MediaStreamError" type="object"/>
    <typedef new-type="MessageEventSource" type="(WindowProxy or MessagePort or ServiceWorker)"/>
    <typedef new-type="NamedCurve" type="DOMString"/>
    <typedef new-type="OffscreenRenderingContext" type="(OffscreenCanvasRenderingContext2D or WebGLRenderingContext)"/>
    <typedef new-type="OnBeforeUnloadEventHandler" nullable="1" type="OnBeforeUnloadEventHandlerNonNull"/>
    <typedef new-type="OnErrorEventHandler" nullable="1" type="OnErrorEventHandlerNonNull"/>
    <typedef new-type="PerformanceEntryList" type="sequence&lt;PerformanceEntry&gt;"/>
    <typedef new-type="PushMessageDataInit" type="(BufferSource or USVString)"/>
    <typedef new-type="RenderingContext" type="(CanvasRenderingContext2D or WebGLRenderingContext)"/>
    <typedef new-type="RequestInfo" type="(Request or USVString)"/>
    <typedef new-type="TexImageSource" type="(ImageBitmap or ImageData or HTMLImageElement or HTMLCanvasElement or HTMLVideoElement)"/>
    <typedef new-type="TimerHandler" type="(DOMString or Function)"/>
  </typedefs>
  <namespaces>
    <namespace name="console" exposed="Window Worker Worklet">
      <methods>
        <method name="assert" type="void">
          <param name="condition" default="false" optional="1" type="boolean"/>
          <param name="data" type="any" variadic="1"/>
        </method>
        <method name="clear" type="void"/>
        <method name="count" type="void">
          <param name="label" default="&quot;default&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="debug" type="void">
          <param name="data" type="any" variadic="1"/>
        </method>
        <method name="dir" type="void">
          <param name="item" type="any"/>
          <param name="options" optional="1" nullable="1" type="object"/>
        </method>
        <method name="dirxml" type="void">
          <param name="data" type="any" variadic="1"/>
        </method>
        <method name="error" type="void">
          <param name="data" type="any" variadic="1"/>
        </method>
        <method name="group" type="void">
          <param name="data" type="any" variadic="1"/>
        </method>
        <method name="groupCollapsed" type="void">
          <param name="data" type="any" variadic="1"/>
        </method>
        <method name="groupEnd" type="void"/>
        <method name="info" type="void">
          <param name="data" type="any" variadic="1"/>
        </method>
        <method name="log" type="void">
          <param name="data" type="any" variadic="1"/>
        </method>
        <method name="table" type="void">
          <param name="tabularData" type="any"/>
          <param name="properties" optional="1" type="sequence&lt;DOMString&gt;"/>
        </method>
        <method name="time" type="void">
          <param name="label" default="&quot;default&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="timeEnd" type="void">
          <param name="label" default="&quot;default&quot;" optional="1" type="DOMString"/>
        </method>
        <method name="trace" type="void">
          <param name="data" type="any" variadic="1"/>
        </method>
        <method name="warn" type="void">
          <param name="data" type="any" variadic="1"/>
        </method>
      </methods>
    </namespace>
  </namespaces>
</webidl-xml>
