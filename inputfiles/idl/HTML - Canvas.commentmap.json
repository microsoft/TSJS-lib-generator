{
    "canvas-getcontext": "Returns an ImageBitmapRenderingContext object that is permanently bound to a\nparticular canvas element.\nIf the alpha setting is\nprovided and set to false, then the canvas is forced to always be opaque.",
    "canvas-todataurl": "Returns a data: URL for the image in the\ncanvas.\nThe first argument, if provided, controls the type of the image to be returned (e.g. PNG or\nJPEG). The default is \"image/png\"; that type is also used if the given type isn't\nsupported. The second argument applies if the type is an image format that supports variable\nquality (such as \"image/jpeg\"), and is a number in the range 0.0 to 1.0 inclusive\nindicating the desired quality level for the resulting image.\nWhen trying to use types other than \"image/png\", authors can check if the image\nwas really returned in the requested format by checking to see if the returned string starts\nwith one of the exact strings \"data:image/png,\" or \"data:image/png;\". If it does, the image is PNG, and thus the requested type was\nnot supported. (The one exception to this is if the canvas has either no height or no width, in\nwhich case the result might simply be \"data:,\".)",
    "canvas-toblob": "Creates a Blob object representing a file containing the image in the canvas,\nand invokes a callback with a handle to that object.\nThe second argument, if provided, controls the type of the image to be returned (e.g. PNG or\nJPEG). The default is \"image/png\"; that type is also used if the given type isn't\nsupported. The third argument applies if the type is an image format that supports variable\nquality (such as \"image/jpeg\"), and is a number in the range 0.0 to 1.0 inclusive\nindicating the desired quality level for the resulting image.",
    "canvas-transfercontroltooffscreen": "Returns a newly created OffscreenCanvas object that uses the\ncanvas element as a placeholder. Once the canvas element has become a\nplaceholder for an OffscreenCanvas object, its intrinsic size can no longer be\nchanged, and it cannot have a rendering context. The content of the placeholder canvas is\nupdated by calling the commit() method of the\nOffscreenCanvas object's rendering context.",
    "context-": "Returns the current filter.\nCan be set, to change the filter. Values that cannot be parsed as a\n<filter-function-list> value are ignored.",
    "path": "Adds to the path the path given by the argument.",
    "canvasgradient-addcolorstop": "Adds a color stop with the given color to the gradient at the given offset. 0.0 is the offset\nat one end of the gradient, 1.0 is the offset at the other end.\nThrows an \"IndexSizeError\" DOMException if the offset\nis out of range. Throws a \"SyntaxError\" DOMException if\nthe color cannot be parsed.",
    "canvaspattern-settransform": "Sets the transformation matrix that will be used when rendering the pattern during a fill or\nstroke painting operation.",
    "textmetrics-ideographicbaseline": "Returns the measurement described below.",
    "imagedata": "Returns an ImageData object using the data provided in the Uint8ClampedArray argument, interpreted using the given\ndimensions.\nAs each pixel in the data is represented by four numbers, the length of the data needs to be\na multiple of four times the given width. If the height is provided as well, then the length\nneeds to be exactly the width times the height times 4.\nThrows an \"IndexSizeError\" DOMException if the given\ndata and dimensions can't be interpreted consistently, or if either dimension is zero.",
    "imagedata-height": "Returns the actual dimensions of the data in the ImageData object, in\npixels.",
    "imagedata-data": "Returns the one-dimensional array containing the data in RGBA order, as integers in the\nrange 0 to 255.",
    "imagebitmaprenderingcontext-canvas": "Returns the canvas element that the context is bound to.",
    "imagebitmaprenderingcontext-transferfromimagebitmap": "Replaces contents of the canvas element to which context\nis bound with a transparent black bitmap whose size corresponds to the width and height\ncontent attributes of the canvas element.",
    "offscreencanvas": "",
    "offscreencanvas-getcontext": "Returns an object that exposes an API for drawing on the OffscreenCanvas\nobject. contextId specifies the desired API: \"2d\" or \"webgl\". options is handled by that\nAPI.\nThis specification defines the \"2d\" context below,\nwhich is similar but distinct from the \"2d\"\ncontext that is created from a canvas element. There is also a specification that\ndefines a \"webgl\" context. [WEBGL]\nReturns null if the canvas has already been initialized with another context type (e.g.,\ntrying to get a \"2d\" context after getting a\n\"webgl\" context).",
    "offscreencanvas-height": "These attributes return the dimensions of the OffscreenCanvas object's bitmap.\nThey can be set, to replace the bitmap with a\nnew, transparent black bitmap of the specified dimensions (effectively resizing\nit).",
    "offscreencanvas-converttoblob": "Returns a promise that will fulfill with a new Blob object representing a file\ncontaining the image in the OffscreenCanvas object.\nThe argument, if provided, is a dictionary that controls the encoding options of the image\nfile to be created. The type\nfield specifies the file format and has a default value of \"image/png\"; that type\nis also used if the requested type isn't supported. If the image format supports variable\nquality (such as \"image/jpeg\"), then the quality field is a number in the range 0.0\nto 1.0 inclusive indicating the desired quality level for the resulting image.",
    "offscreencanvas-transfertoimagebitmap": "Returns a newly created ImageBitmap object with the image in the\nOffscreenCanvas object. The image in the OffscreenCanvas object is\nreplaced with a new blank image."
}
