{
    "click": "Acts as if the element was clicked.",
    "documentorshadowroot-activeelement": "Returns the deepest element in the document through which or to which key events are being routed. This is, roughly speaking, the focused element in the document.\n\nFor the purposes of this API, when a child browsing context is focused, its browsing context container is focused in the parent browsing context. For example, if the user moves the focus to a text control in an iframe, the iframe is the element returned by the activeElement API in the iframe's node document.\n\nSimilarly, when the focused element is in a different node tree than documentOrShadowRoot, the element returned will be the host that's located in the same node tree as documentOrShadowRoot if documentOrShadowRoot is a shadow-including inclusive ancestor of the focused element, and null if not.",
    "document-hasfocus": "Returns true if key events are being routed through or to the document; otherwise, returns false. Roughly speaking, this corresponds to the document, or a document nested inside this one, being focused.",
    "window-focus": "Moves the focus to the window's browsing context, if any.",
    "focus": "Moves the focus to the element.\n\nIf the element is a browsing context container, moves the focus to the nested browsing context instead.\n\nBy default, this method also scrolls the element into view. Providing the preventScroll option and setting it to true prevents this behavior.",
    "blur": "Moves the focus to the viewport. Use of this method is discouraged; if you want to focus the viewport, call the focus() method on the Document's document element.\n\nDo not use this method to hide the focus ring if you find the focus ring unsightly. Instead, use a CSS rule to override the 'outline' property, and provide a different way to show what element is focused. Be aware that if an alternative focusing style isn't made available, the page will be significantly less usable for people who primarily navigate pages using a keyboard, or those with reduced vision who use focus outlines to help them navigate the page.\n\nFor example, to hide the outline from links and instead use a yellow background to indicate focus, you could use:\n\n```\n:link:focus, :visited:focus { outline: none; background: yellow; color: black; }\n```",
    "contenteditable": "Returns \"true\", \"false\", or \"inherit\", based on the state of the contenteditable attribute.\n\nCan be set, to change that state.\n\nThrows a \"SyntaxError\" DOMException if the new value isn't one of those strings.",
    "iscontenteditable": "Returns true if the element is editable; otherwise, returns false.",
    "spellcheck": "Returns true if the element is to have its spelling and grammar checked; otherwise, returns false.\n\nCan be set, to override the default and set the spellcheck content attribute.",
    "autocapitalize": "Returns the current autocapitalization state for the element, or an empty string if it hasn't been set. Note that for input and textarea elements that inherit their state from a form element, this will return the autocapitalization state of the form element, but for an element in an editable region, this will not return the autocapitalization state of the editing host (unless this element is, in fact, the editing host).\n\nCan be set, to set the autocapitalize content attribute (and thereby change the autocapitalization behavior for the element)."
}
